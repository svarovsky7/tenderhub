// –ù–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü

const handleImportExcelNew = async (file) => {
  console.log('üöÄ [ConstructionCostsPage] Importing Excel with corrected logic:', file.name);
  
  // –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
  setImportProgress(0);
  setImportStatus('processing');
  setImportLog([`–ù–∞—á–∞–ª–æ –∏–º–ø–æ—Ä—Ç–∞ —Ñ–∞–π–ª–∞: ${file.name}`]);
  
  const reader = new FileReader();
  
  reader.onload = async (e) => {
    try {
      setImportLog(prev => [...prev, '–ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞...']);
      const data = new Uint8Array(e.target?.result);
      const workbook = XLSX.read(data, { type: 'array' });
      const sheetName = workbook.SheetNames[0];
      const worksheet = workbook.Sheets[sheetName];
      const jsonData = XLSX.utils.sheet_to_json(worksheet, { header: 1 });
      
      console.log('üì¶ [ConstructionCostsPage] Parsed Excel data:', jsonData);
      setImportLog(prev => [...prev, `–ù–∞–π–¥–µ–Ω–æ —Å—Ç—Ä–æ–∫: ${jsonData.length}`]);
      
      setLoading(true);
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏
      setImportLog(prev => [...prev, '–ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤...']);
      const { data: unitsData } = await supabase.from('units').select('*');
      const { data: locationsData } = await supabase.from('location').select('*');
      const { data: costCategoriesData } = await supabase.from('cost_categories').select('*');
      const { data: detailCategoriesData } = await supabase.from('detail_cost_categories').select('*');
      
      const units = unitsData || [];
      const locations = locationsData || [];
      const costCategories = costCategoriesData || [];
      const detailCategories = detailCategoriesData || [];
      
      setImportLog(prev => [...prev, `–ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤: ${units.length} –µ–¥–∏–Ω–∏—Ü, ${locations.length} –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–π, ${costCategories.length} –∫–∞—Ç–µ–≥–æ—Ä–∏–π, ${detailCategories.length} –¥–µ—Ç–∞–ª—å–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π`]);
      
      const errors = [];
      let successCount = 0;
      let skipCount = 0;
      const totalRows = jsonData.length;
      
      for (let i = 0; i < totalRows; i++) {
        const row = jsonData[i];
        if (!row || row.length === 0) continue;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        const progress = Math.round((i / totalRows) * 100);
        setImportProgress(progress);
        
        const catOrder = row[0] ? Number(row[0]) : null;
        const catName = row[1] ? String(row[1]).trim() : null;  // -> cost_categories
        const catUnit = row[2] ? String(row[2]).trim() : null;
        const detName = row[3] ? String(row[3]).trim() : null;  // -> detail_cost_categories
        const detUnit = row[4] ? String(row[4]).trim() : null;
        const locName = row[5] ? String(row[5]).trim() : null;  // -> location
        
        console.log(`üîç –°—Ç—Ä–æ–∫–∞ ${i + 1}:`, { catOrder, catName, catUnit, detName, detUnit, locName });
        
        // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        if (i === 0 && catName === '–ö–∞—Ç–µ–≥–æ—Ä–∏—è') {
          console.log(`‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫`);
          continue;
        }
        
        // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
        if (!catName && !detName) {
          skipCount++;
          continue;
        }
        
        try {
          // 1. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∑–∞—Ç—Ä–∞—Ç (—Å—Ç–æ–ª–±–µ—Ü 2 -> cost_categories)
          let categoryId = null;
          if (catName) {
            // –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
            let existingCategory = costCategories.find(c => c.title === catName || c.name === catName);
            
            if (existingCategory) {
              categoryId = existingCategory.id;
              console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: ${catName}`);
            } else {
              // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
              const { data: newCategoryArray, error: catError } = await supabase
                .from('cost_categories')
                .insert({
                  title: catName,
                  name: catName,
                  order_num: catOrder || 100
                })
                .select();
              
              if (catError) {
                console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ${catName}:`, catError);
                errors.push(`–°—Ç—Ä–æ–∫–∞ ${i + 1}: –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "${catName}": ${catError.message}`);
                continue;
              }
              
              if (newCategoryArray && newCategoryArray.length > 0) {
                const newCategory = newCategoryArray[0];
                categoryId = newCategory.id;
                costCategories.push(newCategory);
                console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: ${catName}`);
              }
            }
          }
          
          // 2. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é (—Å—Ç–æ–ª–±–µ—Ü 4 -> detail_cost_categories)
          if (detName && categoryId) {
            // –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –¥–µ—Ç–∞–ª—å–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
            let existingDetail = detailCategories.find(d => 
              d.title === detName && d.cost_category_id === categoryId
            );
            
            if (!existingDetail) {
              // –ò—â–µ–º –µ–¥–∏–Ω–∏—Ü—É –∏–∑–º–µ—Ä–µ–Ω–∏—è –¥–ª—è –¥–µ—Ç–∞–ª–∏
              let detailUnitId = null;
              if (detUnit) {
                const unit = units.find(u => u.title === detUnit || u.code === detUnit);
                if (unit) {
                  detailUnitId = unit.id;
                }
              }
              
              // –ò—â–µ–º –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏—é
              let locationId = null;
              if (locName) {
                const location = locations.find(l => l.title === locName);
                if (location) {
                  locationId = location.id;
                }
              }
              
              // –°–æ–∑–¥–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
              const { data: newDetailArray, error: detError } = await supabase
                .from('detail_cost_categories')
                .insert({
                  cost_category_id: categoryId,
                  title: detName,
                  name: detName,
                  unit_id: detailUnitId,
                  location_id: locationId,
                  order_num: 100
                })
                .select();
              
              if (detError) {
                console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–µ—Ç–∞–ª–∏ ${detName}:`, detError);
                errors.push(`–°—Ç—Ä–æ–∫–∞ ${i + 1}: –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–µ—Ç–∞–ª–∏ "${detName}": ${detError.message}`);
                continue;
              }
              
              if (newDetailArray && newDetailArray.length > 0) {
                const newDetail = newDetailArray[0];
                detailCategories.push(newDetail);
                console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–∞ –¥–µ—Ç–∞–ª—å: ${detName}`);
              }
            } else {
              console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –¥–µ—Ç–∞–ª—å: ${detName}`);
            }
          }
          
          successCount++;
          if (totalRows <= 50 || successCount % 10 === 0 || successCount === 1) {
            setImportLog(prev => [...prev, `‚úÖ –°—Ç—Ä–æ–∫–∞ ${i + 1}: –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ`]);
          }
          
        } catch (err) {
          errors.push(`–°—Ç—Ä–æ–∫–∞ ${i + 1}: ${err.message}`);
          setImportLog(prev => [...prev, `‚ùå –°—Ç—Ä–æ–∫–∞ ${i + 1}: ${err.message}`]);
        }
      }
      
      setImportProgress(100);
      setImportLog(prev => [...prev, 
        '‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ',
        `üìä –ò—Ç–æ–≥–∏ –∏–º–ø–æ—Ä—Ç–∞:`,
        `‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${successCount} –∑–∞–ø–∏—Å–µ–π`,
        `‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ –ø—É—Å—Ç—ã—Ö —Å—Ç—Ä–æ–∫: ${skipCount}`,
        `‚ùå –û—à–∏–±–æ–∫: ${errors.length}`,
        '‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ'
      ]);
      
      if (errors.length > 0) {
        console.log('‚ùå Errors during import:', errors);
      }
      
      setImportStatus('completed');
      await loadData(); // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
      console.log('‚úÖ [ConstructionCostsPage] Import complete');
      
    } catch (err) {
      console.error('‚ùå [ConstructionCostsPage] Import error:', err);
      setImportLog(prev => [...prev, `‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${err.message}`]);
      setImportStatus('error');
    } finally {
      setLoading(false);
    }
  };
  
  reader.readAsArrayBuffer(file);
  return false;
};