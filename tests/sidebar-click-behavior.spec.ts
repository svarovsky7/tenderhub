import { test, expect } from '@playwright/test';

test.describe('Sidebar Menu Click Behavior', () => {
  test.beforeEach(async ({ page }) => {
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    await page.goto('/');
    // –ñ–¥–µ–º –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    await page.waitForLoadState('networkidle');
    await page.waitForTimeout(1000); // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
  });

  test('should navigate to Commerce page when clicking on text, and toggle submenu when clicking arrow', async ({ page }) => {
    console.log('üöÄ [Test] Starting Commerce menu click test');

    // –ù–∞—Ö–æ–¥–∏–º –ø—É–Ω–∫—Ç –º–µ–Ω—é "–ö–æ–º–º–µ—Ä—Ü–∏—è"
    const commerceMenu = page.locator('.ant-menu-submenu').filter({ hasText: '–ö–æ–º–º–µ—Ä—Ü–∏—è' });
    await expect(commerceMenu).toBeVisible({ timeout: 5000 });

    // –ü–æ–ª—É—á–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø–æ–¥–º–µ–Ω—é
    const commerceTitle = commerceMenu.locator('.ant-menu-submenu-title').first();

    // 1. –¢–µ—Å—Ç: –ö–ª–∏–∫ –ø–æ —Ç–µ–∫—Å—Ç—É –¥–æ–ª–∂–µ–Ω –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É /commerce
    console.log('üëÜ [Test] Clicking on Commerce text (left side)');

    // –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã —ç–ª–µ–º–µ–Ω—Ç–∞
    const box = await commerceTitle.boundingBox();
    if (!box) throw new Error('Commerce title not found');

    // –ö–ª–∏–∫–∞–µ–º –≤ –ª–µ–≤–æ–π —á–∞—Å—Ç–∏ (—Ç–µ–∫—Å—Ç), –Ω–µ –≤ –ø—Ä–∞–≤—ã—Ö 40px (—Å—Ç—Ä–µ–ª–∫–∞)
    const clickX = box.x + 30; // –ö–ª–∏–∫–∞–µ–º —Å–ª–µ–≤–∞
    const clickY = box.y + box.height / 2;

    await page.mouse.click(clickX, clickY);
    await page.waitForTimeout(500);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–µ—Ä–µ—à–ª–∏ –Ω–∞ /commerce
    await expect(page).toHaveURL(/\/commerce$/);
    console.log('‚úÖ [Test] Successfully navigated to /commerce');

    // –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç
    await page.screenshot({
      path: 'test-results/commerce-page-navigation.png',
      fullPage: true
    });

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é
    await page.goto('/');
    await page.waitForLoadState('networkidle');
    await page.waitForTimeout(1000);

    // 2. –¢–µ—Å—Ç: –ö–ª–∏–∫ –ø–æ —Å—Ç—Ä–µ–ª–∫–µ –¥–æ–ª–∂–µ–Ω —Ä–∞—Å–∫—Ä—ã—Ç—å –ø–æ–¥–º–µ–Ω—é
    console.log('üëÜ [Test] Clicking on Commerce arrow (right side)');

    const commerceMenuAgain = page.locator('.ant-menu-submenu').filter({ hasText: '–ö–æ–º–º–µ—Ä—Ü–∏—è' });
    const commerceTitleAgain = commerceMenuAgain.locator('.ant-menu-submenu-title').first();

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–¥–º–µ–Ω—é –∑–∞–∫—Ä—ã—Ç–æ
    const isOpenBefore = await commerceMenuAgain.evaluate((el) =>
      el.classList.contains('ant-menu-submenu-open')
    );
    console.log('üìã [Test] Submenu open before click:', isOpenBefore);

    const boxAgain = await commerceTitleAgain.boundingBox();
    if (!boxAgain) throw new Error('Commerce title not found');

    // –ö–ª–∏–∫–∞–µ–º –≤ –ø—Ä–∞–≤–æ–π —á–∞—Å—Ç–∏ (—Å—Ç—Ä–µ–ª–∫–∞) - –ø—Ä–∞–≤—ã–µ 40px
    const arrowClickX = boxAgain.x + boxAgain.width - 20; // –ö–ª–∏–∫–∞–µ–º –≤ –æ–±–ª–∞—Å—Ç–∏ —Å—Ç—Ä–µ–ª–∫–∏
    const arrowClickY = boxAgain.y + boxAgain.height / 2;

    await page.mouse.click(arrowClickX, arrowClickY);
    await page.waitForTimeout(500);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–¥–º–µ–Ω—é —Ä–∞—Å–∫—Ä—ã–ª–æ—Å—å
    const isOpenAfter = await commerceMenuAgain.evaluate((el) =>
      el.classList.contains('ant-menu-submenu-open')
    );
    console.log('üìã [Test] Submenu open after click:', isOpenAfter);
    expect(isOpenAfter).toBe(true);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ù–ï –ø–µ—Ä–µ—à–ª–∏ –Ω–∞ –¥—Ä—É–≥—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    await expect(page).toHaveURL(/\/$/);
    console.log('‚úÖ [Test] Submenu expanded without navigation');

    // –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç —Ä–∞—Å–∫—Ä—ã—Ç–æ–≥–æ –ø–æ–¥–º–µ–Ω—é
    await page.screenshot({
      path: 'test-results/commerce-submenu-expanded.png',
      fullPage: true
    });
  });

  test('should navigate to Libraries page when clicking on text, and toggle submenu when clicking arrow', async ({ page }) => {
    console.log('üöÄ [Test] Starting Libraries menu click test');

    // –ù–∞—Ö–æ–¥–∏–º –ø—É–Ω–∫—Ç –º–µ–Ω—é "–ë–∏–±–ª–∏–æ—Ç–µ–∫–∏"
    const librariesMenu = page.locator('.ant-menu-submenu').filter({ hasText: '–ë–∏–±–ª–∏–æ—Ç–µ–∫–∏' });
    await expect(librariesMenu).toBeVisible({ timeout: 5000 });

    const librariesTitle = librariesMenu.locator('.ant-menu-submenu-title').first();

    // 1. –ö–ª–∏–∫ –ø–æ —Ç–µ–∫—Å—Ç—É ‚Üí –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
    console.log('üëÜ [Test] Clicking on Libraries text');

    const box = await librariesTitle.boundingBox();
    if (!box) throw new Error('Libraries title not found');

    const clickX = box.x + 30;
    const clickY = box.y + box.height / 2;

    await page.mouse.click(clickX, clickY);
    await page.waitForTimeout(500);

    await expect(page).toHaveURL(/\/libraries$/);
    console.log('‚úÖ [Test] Successfully navigated to /libraries');

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é
    await page.goto('/');
    await page.waitForLoadState('networkidle');
    await page.waitForTimeout(1000);

    // 2. –ö–ª–∏–∫ –ø–æ —Å—Ç—Ä–µ–ª–∫–µ ‚Üí —Ä–∞—Å–∫—Ä—ã—Ç–∏–µ –ø–æ–¥–º–µ–Ω—é
    console.log('üëÜ [Test] Clicking on Libraries arrow');

    const librariesMenuAgain = page.locator('.ant-menu-submenu').filter({ hasText: '–ë–∏–±–ª–∏–æ—Ç–µ–∫–∏' });
    const librariesTitleAgain = librariesMenuAgain.locator('.ant-menu-submenu-title').first();

    const boxAgain = await librariesTitleAgain.boundingBox();
    if (!boxAgain) throw new Error('Libraries title not found');

    const arrowClickX = boxAgain.x + boxAgain.width - 20;
    const arrowClickY = boxAgain.y + boxAgain.height / 2;

    await page.mouse.click(arrowClickX, arrowClickY);
    await page.waitForTimeout(500);

    const isOpenAfter = await librariesMenuAgain.evaluate((el) =>
      el.classList.contains('ant-menu-submenu-open')
    );
    expect(isOpenAfter).toBe(true);
    await expect(page).toHaveURL(/\/$/);
    console.log('‚úÖ [Test] Libraries submenu expanded without navigation');
  });

  test('should navigate to Construction Costs page when clicking on text, and toggle submenu when clicking arrow', async ({ page }) => {
    console.log('üöÄ [Test] Starting Construction Costs menu click test');

    const constructionMenu = page.locator('.ant-menu-submenu').filter({ hasText: '–ó–∞—Ç—Ä–∞—Ç—ã –Ω–∞ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ' });
    await expect(constructionMenu).toBeVisible({ timeout: 5000 });

    const constructionTitle = constructionMenu.locator('.ant-menu-submenu-title').first();

    // 1. –ö–ª–∏–∫ –ø–æ —Ç–µ–∫—Å—Ç—É ‚Üí –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
    console.log('üëÜ [Test] Clicking on Construction Costs text');

    const box = await constructionTitle.boundingBox();
    if (!box) throw new Error('Construction Costs title not found');

    const clickX = box.x + 30;
    const clickY = box.y + box.height / 2;

    await page.mouse.click(clickX, clickY);
    await page.waitForTimeout(500);

    await expect(page).toHaveURL(/\/construction-costs$/);
    console.log('‚úÖ [Test] Successfully navigated to /construction-costs');

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é
    await page.goto('/');
    await page.waitForLoadState('networkidle');
    await page.waitForTimeout(1000);

    // 2. –ö–ª–∏–∫ –ø–æ —Å—Ç—Ä–µ–ª–∫–µ ‚Üí —Ä–∞—Å–∫—Ä—ã—Ç–∏–µ –ø–æ–¥–º–µ–Ω—é
    console.log('üëÜ [Test] Clicking on Construction Costs arrow');

    const constructionMenuAgain = page.locator('.ant-menu-submenu').filter({ hasText: '–ó–∞—Ç—Ä–∞—Ç—ã –Ω–∞ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ' });
    const constructionTitleAgain = constructionMenuAgain.locator('.ant-menu-submenu-title').first();

    const boxAgain = await constructionTitleAgain.boundingBox();
    if (!boxAgain) throw new Error('Construction Costs title not found');

    const arrowClickX = boxAgain.x + boxAgain.width - 20;
    const arrowClickY = boxAgain.y + boxAgain.height / 2;

    await page.mouse.click(arrowClickX, arrowClickY);
    await page.waitForTimeout(500);

    const isOpenAfter = await constructionMenuAgain.evaluate((el) =>
      el.classList.contains('ant-menu-submenu-open')
    );
    expect(isOpenAfter).toBe(true);
    await expect(page).toHaveURL(/\/$/);
    console.log('‚úÖ [Test] Construction Costs submenu expanded without navigation');
  });

  test('should navigate to Admin page when clicking on text, and toggle submenu when clicking arrow', async ({ page }) => {
    console.log('üöÄ [Test] Starting Admin menu click test');

    const adminMenu = page.locator('.ant-menu-submenu').filter({ hasText: '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ' });
    await expect(adminMenu).toBeVisible({ timeout: 5000 });

    const adminTitle = adminMenu.locator('.ant-menu-submenu-title').first();

    // 1. –ö–ª–∏–∫ –ø–æ —Ç–µ–∫—Å—Ç—É ‚Üí –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
    console.log('üëÜ [Test] Clicking on Admin text');

    const box = await adminTitle.boundingBox();
    if (!box) throw new Error('Admin title not found');

    const clickX = box.x + 30;
    const clickY = box.y + box.height / 2;

    await page.mouse.click(clickX, clickY);
    await page.waitForTimeout(500);

    await expect(page).toHaveURL(/\/admin$/);
    console.log('‚úÖ [Test] Successfully navigated to /admin');

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é
    await page.goto('/');
    await page.waitForLoadState('networkidle');
    await page.waitForTimeout(1000);

    // 2. –ö–ª–∏–∫ –ø–æ —Å—Ç—Ä–µ–ª–∫–µ ‚Üí —Ä–∞—Å–∫—Ä—ã—Ç–∏–µ –ø–æ–¥–º–µ–Ω—é
    console.log('üëÜ [Test] Clicking on Admin arrow');

    const adminMenuAgain = page.locator('.ant-menu-submenu').filter({ hasText: '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ' });
    const adminTitleAgain = adminMenuAgain.locator('.ant-menu-submenu-title').first();

    const boxAgain = await adminTitleAgain.boundingBox();
    if (!boxAgain) throw new Error('Admin title not found');

    const arrowClickX = boxAgain.x + boxAgain.width - 20;
    const arrowClickY = boxAgain.y + boxAgain.height / 2;

    await page.mouse.click(arrowClickX, arrowClickY);
    await page.waitForTimeout(500);

    const isOpenAfter = await adminMenuAgain.evaluate((el) =>
      el.classList.contains('ant-menu-submenu-open')
    );
    expect(isOpenAfter).toBe(true);
    await expect(page).toHaveURL(/\/$/);
    console.log('‚úÖ [Test] Admin submenu expanded without navigation');
  });

  test('should verify all parent menu items remain unhighlighted when on child pages', async ({ page }) => {
    console.log('üöÄ [Test] Starting parent highlighting test');

    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –¥–æ—á–µ—Ä–Ω—é—é —Å—Ç—Ä–∞–Ω–∏—Ü—É Commercial Costs
    await page.goto('/commercial-costs');
    await page.waitForLoadState('networkidle');
    await page.waitForTimeout(1000);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–µ –º–µ–Ω—é –æ—Ç–∫—Ä—ã—Ç–æ
    const commerceMenu = page.locator('.ant-menu-submenu').filter({ hasText: '–ö–æ–º–º–µ—Ä—Ü–∏—è' });
    const isOpen = await commerceMenu.evaluate((el) =>
      el.classList.contains('ant-menu-submenu-open')
    );
    console.log('üìã [Test] Commerce submenu open on child page:', isOpen);
    expect(isOpen).toBe(true);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–æ—á–µ—Ä–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç –≤—ã–±—Ä–∞–Ω
    const childItem = page.locator('.ant-menu-item').filter({ hasText: '–ö–æ–º–º–µ—Ä—á–µ—Å–∫–∏–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏' });
    const childSelected = await childItem.evaluate((el) =>
      el.classList.contains('ant-menu-item-selected')
    );
    console.log('üìã [Test] Child item selected:', childSelected);
    expect(childSelected).toBe(true);

    console.log('‚úÖ [Test] Parent menu open with selected child (not visually highlighted)');

    // –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç
    await page.screenshot({
      path: 'test-results/parent-not-highlighted-on-child.png',
      fullPage: true
    });
  });
});
