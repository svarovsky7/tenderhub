import { test, expect } from '@playwright/test';

test.describe('Sidebar Menu Toggle', () => {
  test.beforeEach(async ({ page }) => {
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    await page.goto('/');
    // –ñ–¥–µ–º –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    await page.waitForLoadState('networkidle');
  });

  test('should toggle sidebar menu and check for phantom letters bug', async ({ page }) => {
    console.log('üöÄ [Test] Starting sidebar toggle test');

    // –ù–∞—Ö–æ–¥–∏–º –∫–Ω–æ–ø–∫—É –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –º–µ–Ω—é –ø–æ –∏–∫–æ–Ω–∫–µ (MenuFoldOutlined/MenuUnfoldOutlined)
    const menuButton = page.locator('.page__header button').first();

    console.log('üîç [Test] Looking for toggle button');
    await expect(menuButton).toBeVisible({ timeout: 10000 });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ (–º–µ–Ω—é —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ)
    const sidebar = page.locator('.ant-layout-sider');
    await expect(sidebar).toBeVisible();

    // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é —à–∏—Ä–∏–Ω—É
    const initialWidth = await sidebar.evaluate((el) => el.clientWidth);
    console.log('üìè [Test] Initial sidebar width:', initialWidth);

    // –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await page.screenshot({
      path: 'test-results/sidebar-expanded.png',
      fullPage: true
    });

    // –®–ê–ì–ò –î–õ–Ø –í–û–°–ü–†–û–ò–ó–í–ï–î–ï–ù–ò–Ø –ë–ê–ì–ê:

    // 1. –ö–ª–∏–∫–∞–µ–º –¥–ª—è —Å–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è –º–µ–Ω—é
    console.log('üëÜ [Test] Clicking to collapse sidebar');
    await menuButton.click();

    // –ñ–¥–µ–º –Ω–∞—á–∞–ª–∞ –∞–Ω–∏–º–∞—Ü–∏–∏ (–Ω–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞)
    await page.waitForTimeout(50);

    // –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç—ã –≤–æ –≤—Ä–µ–º—è –∞–Ω–∏–º–∞—Ü–∏–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ñ–∞–Ω—Ç–æ–º–Ω—ã—Ö –±—É–∫–≤
    console.log('üì∏ [Test] Taking screenshots during animation');
    for (let i = 0; i < 5; i++) {
      await page.screenshot({
        path: `test-results/sidebar-collapsing-frame-${i}.png`,
        fullPage: true
      });
      await page.waitForTimeout(50); // 50ms –º–µ–∂–¥—É –∫–∞–¥—Ä–∞–º–∏
    }

    // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏
    await page.waitForTimeout(500);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–µ–Ω—é —Å–≤–µ—Ä–Ω—É—Ç–æ
    const collapsedWidth = await sidebar.evaluate((el) => el.clientWidth);
    console.log('üìè [Test] Collapsed sidebar width:', collapsedWidth);
    expect(collapsedWidth).toBeLessThan(initialWidth);

    // –°–∫—Ä–∏–Ω—à–æ—Ç —Å–≤–µ—Ä–Ω—É—Ç–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await page.screenshot({
      path: 'test-results/sidebar-collapsed.png',
      fullPage: true
    });

    // 2. –ö–ª–∏–∫–∞–µ–º –¥–ª—è —Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è –º–µ–Ω—é (–∑–¥–µ—Å—å –æ–±—ã—á–Ω–æ –ø–æ—è–≤–ª—è–µ—Ç—Å—è –±–∞–≥)
    console.log('üëÜ [Test] Clicking to expand sidebar');
    await menuButton.click();

    // –ñ–¥–µ–º –Ω–∞—á–∞–ª–∞ –∞–Ω–∏–º–∞—Ü–∏–∏
    await page.waitForTimeout(50);

    // –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç—ã –≤–æ –≤—Ä–µ–º—è –∞–Ω–∏–º–∞—Ü–∏–∏ —Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è
    console.log('üì∏ [Test] Taking screenshots during expansion animation');
    for (let i = 0; i < 5; i++) {
      await page.screenshot({
        path: `test-results/sidebar-expanding-frame-${i}.png`,
        fullPage: true
      });
      await page.waitForTimeout(50);
    }

    // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏
    await page.waitForTimeout(500);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–µ–Ω—é —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ –æ–±—Ä–∞—Ç–Ω–æ
    const expandedWidth = await sidebar.evaluate((el) => el.clientWidth);
    console.log('üìè [Test] Expanded sidebar width:', expandedWidth);
    expect(expandedWidth).toBeGreaterThan(collapsedWidth);

    // –§–∏–Ω–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç
    await page.screenshot({
      path: 'test-results/sidebar-expanded-final.png',
      fullPage: true
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–µ—Ç –≤–∏–∑—É–∞–ª—å–Ω—ã—Ö –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤ –ø–æ—Å–ª–µ –∞–Ω–∏–º–∞—Ü–∏–∏
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–Ω—Ç–æ–º–Ω—ã—Ö popup –º–µ–Ω—é
    const popupMenus = await page.locator('.ant-menu-submenu-popup').all();
    console.log('üîç [Test] Found popup menus:', popupMenus.length);

    for (const popup of popupMenus) {
      const isVisible = await popup.isVisible();
      const display = await popup.evaluate((el) => window.getComputedStyle(el).display);
      const visibility = await popup.evaluate((el) => window.getComputedStyle(el).visibility);

      console.log('üìã [Test] Popup menu state:', { isVisible, display, visibility });

      // –§–∞–Ω—Ç–æ–º–Ω—ã–µ –º–µ–Ω—é –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å–∫—Ä—ã—Ç—ã
      if (display !== 'none' && visibility !== 'hidden') {
        console.warn('‚ö†Ô∏è [Test] Found visible popup menu that might be a phantom!');
        await page.screenshot({
          path: 'test-results/phantom-menu-detected.png',
          fullPage: true
        });
      }
    }

    console.log('‚úÖ [Test] Sidebar toggle test completed');
  });

  test('should verify no text overflow during animation', async ({ page }) => {
    console.log('üöÄ [Test] Starting text overflow test');

    const menuButton = page.locator('.page__header button').first();
    await expect(menuButton).toBeVisible();

    // –°–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –º–µ–Ω—é
    await menuButton.click();
    await page.waitForTimeout(100);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–∫—Å—Ç –≤ –º–µ–Ω—é –Ω–µ –≤–∏–¥–µ–Ω –≤–æ –≤—Ä–µ–º—è —Å–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è
    const menuItems = page.locator('.ant-menu-item, .ant-menu-submenu-title');
    const itemCount = await menuItems.count();
    console.log('üìã [Test] Menu items count:', itemCount);

    for (let i = 0; i < itemCount; i++) {
      const item = menuItems.nth(i);
      const text = await item.locator('a, span').first().textContent();

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–∫—Å—Ç –ª–∏–±–æ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–∫—Ä—ã—Ç, –ª–∏–±–æ –ø–æ–ª–Ω–æ—Å—Ç—å—é –≤–∏–¥–µ–Ω
      // (–Ω–µ –æ–±—Ä–µ–∑–∞–Ω —á–∞—Å—Ç–∏—á–Ω–æ, —á—Ç–æ –º–æ–∂–µ—Ç –≤—ã–∑–≤–∞—Ç—å —Ñ–∞–Ω—Ç–æ–º–Ω—ã–µ –±—É–∫–≤—ã)
      const overflow = await item.evaluate((el) => {
        const style = window.getComputedStyle(el);
        return {
          overflow: style.overflow,
          textOverflow: style.textOverflow,
          whiteSpace: style.whiteSpace,
        };
      });

      console.log(`üìù [Test] Item ${i} text: "${text}", overflow:`, overflow);
    }

    console.log('‚úÖ [Test] Text overflow test completed');
  });

  test('should cleanup popup menus after collapse/expand cycle', async ({ page }) => {
    console.log('üöÄ [Test] Starting popup cleanup test');

    const menuButton = page.locator('.page__header button').first();
    await expect(menuButton).toBeVisible();

    // –í—ã–ø–æ–ª–Ω—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ü–∏–∫–ª–æ–≤ —Å–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è/—Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è
    for (let cycle = 0; cycle < 3; cycle++) {
      console.log(`üîÑ [Test] Cycle ${cycle + 1}/3`);

      // –°–≤–æ—Ä–∞—á–∏–≤–∞–µ–º
      await menuButton.click();
      await page.waitForTimeout(300);

      // –†–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ–º
      await menuButton.click();
      await page.waitForTimeout(300);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ popup –º–µ–Ω—é
      const popups = await page.locator('.ant-menu-submenu-popup').all();
      console.log(`üìä [Test] Cycle ${cycle + 1}: Found ${popups.length} popup menus`);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ popup —Å–∫—Ä—ã—Ç—ã
      for (const popup of popups) {
        const isVisible = await popup.isVisible();
        if (isVisible) {
          console.warn(`‚ö†Ô∏è [Test] Cycle ${cycle + 1}: Found visible popup!`);
          await page.screenshot({
            path: `test-results/visible-popup-cycle-${cycle}.png`,
            fullPage: true
          });
        }
      }
    }

    console.log('‚úÖ [Test] Popup cleanup test completed');
  });
});
