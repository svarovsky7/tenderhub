import { test, expect } from '@playwright/test';

test.describe('Console Logging Monitor', () => {
  test('should track console messages when loading tender BOQ page', async ({ page }) => {
    const consoleMessages: string[] = [];
    const messageTypes = {
      log: 0,
      warn: 0,
      error: 0,
      info: 0,
      debug: 0
    };

    // –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ console —Å–æ–æ–±—â–µ–Ω–∏—è
    page.on('console', (msg) => {
      const type = msg.type();
      const text = msg.text();

      // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ —Ç–∏–ø–∞–º
      if (messageTypes.hasOwnProperty(type)) {
        messageTypes[type as keyof typeof messageTypes]++;
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
      consoleMessages.push(`[${type.toUpperCase()}] ${text}`);

      // –í—ã–≤–æ–¥–∏–º –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ (–ø–µ—Ä–≤—ã–µ 100 —Å–æ–æ–±—â–µ–Ω–∏–π)
      if (consoleMessages.length <= 100) {
        console.log(`Console ${type}: ${text}`);
      }
    });

    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ç–µ–Ω–¥–µ—Ä–∞
    await page.goto('http://localhost:5173');

    // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Å–Ω–æ–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã - –∏—â–µ–º —Ç–∞–±–ª–∏—Ü—É —Ç–µ–Ω–¥–µ—Ä–æ–≤ –∏–ª–∏ –∫–Ω–æ–ø–∫—É "–ü–æ–∑–∏—Ü–∏–∏ –∑–∞–∫–∞–∑—á–∏–∫–∞"
    await page.waitForSelector('table, [href="/boq"]', { timeout: 10000 });

    console.log('üìä Main page loaded, console messages so far:', consoleMessages.length);

    // –û—á–∏—â–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ—Ö–æ–¥–æ–º –∫ BOQ
    const messagesBeforeBOQ = consoleMessages.length;
    console.log('üìä Messages before navigating to BOQ:', messagesBeforeBOQ);

    // –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ø–æ—Å–æ–±–æ–≤ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ BOQ
    const boqMenuLink = page.locator('[href="/boq"]').first();
    const eyeButton = page.locator('button[aria-label*="eye"], button:has(img[alt*="eye"])').first();
    const tenderRow = page.locator('table tbody tr').first();

    if (await boqMenuLink.isVisible()) {
      console.log('üìä Using menu link to BOQ page');
      await boqMenuLink.click();
      await page.waitForURL(/.*\/boq/, { timeout: 15000 });
    } else if (await eyeButton.isVisible()) {
      console.log('üìä Using eye button to view tender BOQ');
      await eyeButton.click();
      await page.waitForURL(/.*\/tender\/.*\/boq/, { timeout: 15000 });
    } else if (await tenderRow.isVisible()) {
      console.log('üìä Clicking on tender row');
      await tenderRow.click();
      await page.waitForURL(/.*\/tender\/.*\/boq/, { timeout: 15000 });
    } else {
      console.log('üìä Navigating directly to BOQ page');
      await page.goto('http://localhost:5173/boq');
    }

    // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã BOQ
    await page.waitForSelector('.ant-select', { timeout: 15000 });

    // –í—ã–±–∏—Ä–∞–µ–º —Ç–µ–Ω–¥–µ—Ä –∏–∑ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞
    console.log('üìä Selecting tender from dropdown');
    const tenderSelector = page.locator('.ant-select').first();
    await tenderSelector.click();

    // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –æ–ø—Ü–∏–π –∏ –≤—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π —Ç–µ–Ω–¥–µ—Ä
    await page.waitForSelector('.ant-select-item', { timeout: 10000 });
    const firstTenderOption = page.locator('.ant-select-item').first();
    await firstTenderOption.click();

    // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–∑–∏—Ü–∏–π –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —Ç–µ–Ω–¥–µ—Ä–∞
    await page.waitForSelector('[class*="grid"], [class*="position"], .ant-card', { timeout: 15000 });

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ –¥–ª—è –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
    await page.waitForTimeout(5000);

    const totalMessages = consoleMessages.length;
    const boqMessages = totalMessages - messagesBeforeBOQ;

    console.log('\nüìä === CONSOLE LOGGING REPORT ===');
    console.log(`Total console messages: ${totalMessages}`);
    console.log(`Messages during BOQ loading: ${boqMessages}`);
    console.log('\nBreakdown by type:');
    console.log(`- Log messages: ${messageTypes.log}`);
    console.log(`- Warning messages: ${messageTypes.warn}`);
    console.log(`- Error messages: ${messageTypes.error}`);
    console.log(`- Info messages: ${messageTypes.info}`);
    console.log(`- Debug messages: ${messageTypes.debug}`);

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞–∏–±–æ–ª–µ–µ —á–∞—Å—Ç—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    const messageFrequency = new Map<string, number>();
    consoleMessages.forEach(msg => {
      // –£–±–∏—Ä–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏ –∏ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ ID –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏
      const normalized = msg
        .replace(/\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d{3}Z/g, '[TIMESTAMP]')
        .replace(/[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}/gi, '[UUID]')
        .replace(/temp-\d+/g, '[TEMP-ID]')
        .replace(/\d+ms/g, '[TIME]');

      messageFrequency.set(normalized, (messageFrequency.get(normalized) || 0) + 1);
    });

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —á–∞—Å—Ç–æ—Ç–µ
    const sortedMessages = Array.from(messageFrequency.entries())
      .sort((a, b) => b[1] - a[1])
      .slice(0, 10);

    console.log('\nüîç Top 10 most frequent messages:');
    sortedMessages.forEach(([msg, count], index) => {
      console.log(`${index + 1}. (${count}x) ${msg.substring(0, 100)}${msg.length > 100 ? '...' : ''}`);
    });

    // –ò—â–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã BOQ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    const boqPatterns = [
      'üöÄ', '‚úÖ', 'üìã', 'üí∞', 'üéØ', 'üîç', 'üìù', '‚ûï', 'üóëÔ∏è', '‚úèÔ∏è', 'üéÜ', 'üìä', 'üì•'
    ];

    let boqSpecificMessages = 0;
    consoleMessages.forEach(msg => {
      if (boqPatterns.some(pattern => msg.includes(pattern))) {
        boqSpecificMessages++;
      }
    });

    console.log(`\nüéØ BOQ-specific emoji messages: ${boqSpecificMessages}`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —É–º–µ–Ω—å—à–∏–ª–æ—Å—å
    console.log('\nüìà Performance Analysis:');
    if (totalMessages > 5000) {
      console.log('‚ùå EXCESSIVE LOGGING: More than 5000 messages detected');
      console.log('üí° Consider further optimization of console.log statements');
    } else if (totalMessages > 1000) {
      console.log('‚ö†Ô∏è  HIGH LOGGING: 1000-5000 messages detected');
      console.log('üí° Some optimization may still be needed');
    } else {
      console.log('‚úÖ ACCEPTABLE LOGGING: Less than 1000 messages');
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
    const report = {
      timestamp: new Date().toISOString(),
      totalMessages,
      boqMessages,
      messageTypes,
      topFrequentMessages: sortedMessages.slice(0, 5),
      boqSpecificMessages,
      url: page.url()
    };

    console.log('\nüìÑ Detailed report:', JSON.stringify(report, null, 2));

    // –¢–µ—Å—Ç –ø—Ä–æ—Ö–æ–¥–∏—Ç, –Ω–æ –≤—ã–≤–æ–¥–∏–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ª–æ–≥–æ–≤
    expect(totalMessages).toBeLessThan(10000); // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥

    if (totalMessages > 2000) {
      console.log('\n‚ö†Ô∏è  WARNING: Console logging is still high. Consider further optimization.');
    }
  });

  test('should identify specific functions generating most logs', async ({ page }) => {
    const functionLogs = new Map<string, number>();

    page.on('console', (msg) => {
      const text = msg.text();

      // –ò—â–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π –≤ –ª–æ–≥–∞—Ö
      const functionPatterns = [
        'calculatePositionTotalCost',
        'loadBOQItemsForPosition',
        'loadLinksForPosition',
        'handleDragEnd',
        'handleMaterialTransferBetweenWorks',
        'addItem',
        'updateSubItem',
        'removeSubItem',
        'handleManualVolumeChange',
        'openModal',
        'closeModal'
      ];

      functionPatterns.forEach(funcName => {
        if (text.includes(funcName)) {
          functionLogs.set(funcName, (functionLogs.get(funcName) || 0) + 1);
        }
      });
    });

    await page.goto('http://localhost:5173');
    await page.waitForSelector('table, [href="/boq"]', { timeout: 10000 });

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ –∂–µ —Å–∞–º–æ–µ –ø–µ—Ä–µ—Ö–æ–¥ –∫ BOQ –∫–∞–∫ –≤ –ø–µ—Ä–≤–æ–º —Ç–µ—Å—Ç–µ
    const boqMenuLink = page.locator('[href="/boq"]').first();
    if (await boqMenuLink.isVisible()) {
      await boqMenuLink.click();
      await page.waitForURL(/.*\/boq/, { timeout: 15000 });
    } else {
      await page.goto('http://localhost:5173/boq');
    }

    // –í—ã–±–∏—Ä–∞–µ–º —Ç–µ–Ω–¥–µ—Ä –∏–∑ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞
    await page.waitForSelector('.ant-select', { timeout: 15000 });
    const tenderSelector = page.locator('.ant-select').first();
    await tenderSelector.click();
    await page.waitForSelector('.ant-select-item', { timeout: 10000 });
    const firstTenderOption = page.locator('.ant-select-item').first();
    await firstTenderOption.click();

    await page.waitForSelector('[class*="grid"], [class*="position"], .ant-card', { timeout: 15000 });
    await page.waitForTimeout(5000);

    console.log('\nüîç Function-specific logging analysis:');
    const sortedFunctions = Array.from(functionLogs.entries())
      .sort((a, b) => b[1] - a[1]);

    if (sortedFunctions.length > 0) {
      sortedFunctions.forEach(([func, count]) => {
        console.log(`${func}: ${count} messages`);
      });
    } else {
      console.log('‚úÖ No function-specific patterns detected in current logs');
    }
  });
});