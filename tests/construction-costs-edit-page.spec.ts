import { test, expect } from '@playwright/test';

test.describe.configure({ mode: 'serial' }); // Run tests sequentially

test.describe('Construction Costs Edit Page - Button Styles', () => {
  test.beforeEach(async ({ page }) => {
    await page.goto('http://localhost:5173/construction-costs/edit');
    await page.waitForLoadState('networkidle');
  });

  test('should verify button order in header', async ({ page }) => {
    console.log('üîç Checking button order...');

    const buttons = page.locator('.action-buttons button');
    const buttonCount = await buttons.count();

    console.log(`Found ${buttonCount} buttons`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ä—è–¥–æ–∫ –∫–Ω–æ–ø–æ–∫
    const buttonTexts = [];
    for (let i = 0; i < buttonCount; i++) {
      const text = await buttons.nth(i).textContent();
      buttonTexts.push(text?.trim());
    }

    console.log('Button order:', buttonTexts);

    expect(buttonTexts).toEqual([
      '–ö —Å—Ç—Ä—É–∫—Ç—É—Ä–µ',
      '–≠–∫—Å–ø–æ—Ä—Ç',
      '–ò–º–ø–æ—Ä—Ç',
      '–û–±–Ω–æ–≤–∏—Ç—å',
      '–û—á–∏—Å—Ç–∏—Ç—å'
    ]);
  });

  test('should verify button styles in light theme', async ({ page }) => {
    console.log('üåû Testing light theme button styles...');

    // –ö —Å—Ç—Ä—É–∫—Ç—É—Ä–µ - –ø—Ä–æ–∑—Ä–∞—á–Ω–∞—è –∑–∞–ª–∏–≤–∫–∞, –±–µ–ª—ã–π —Ç–µ–∫—Å—Ç
    const backButton = page.locator('button:has-text("–ö —Å—Ç—Ä—É–∫—Ç—É—Ä–µ")');
    const backStyle = await backButton.evaluate((el) => {
      const style = window.getComputedStyle(el);
      return {
        color: style.color,
        backgroundColor: style.backgroundColor,
      };
    });
    console.log('–ö —Å—Ç—Ä—É–∫—Ç—É—Ä–µ button style:', backStyle);
    expect(backStyle.color).toBe('rgb(255, 255, 255)'); // white

    // –≠–∫—Å–ø–æ—Ä—Ç - –∂–µ–ª—Ç–∞—è –æ–∫–∞–Ω—Ç–æ–≤–∫–∞, –±–µ–ª—ã–π —Ç–µ–∫—Å—Ç
    const exportButton = page.locator('button:has-text("–≠–∫—Å–ø–æ—Ä—Ç")');
    const exportStyle = await exportButton.evaluate((el) => {
      const style = window.getComputedStyle(el);
      return {
        color: style.color,
        borderColor: style.borderColor,
        borderWidth: style.borderWidth,
      };
    });
    console.log('–≠–∫—Å–ø–æ—Ä—Ç button style:', exportStyle);
    expect(exportStyle.color).toBe('rgb(255, 255, 255)'); // white
    expect(exportStyle.borderWidth).toBe('2px');

    // –ò–º–ø–æ—Ä—Ç - —Å–∏–Ω—è—è –æ–∫–∞–Ω—Ç–æ–≤–∫–∞, –±–µ–ª—ã–π —Ç–µ–∫—Å—Ç
    const importButton = page.locator('button:has-text("–ò–º–ø–æ—Ä—Ç")');
    const importStyle = await importButton.evaluate((el) => {
      const style = window.getComputedStyle(el);
      return {
        color: style.color,
        borderWidth: style.borderWidth,
      };
    });
    console.log('–ò–º–ø–æ—Ä—Ç button style:', importStyle);
    expect(importStyle.color).toBe('rgb(255, 255, 255)'); // white
    expect(importStyle.borderWidth).toBe('2px');

    // –û–±–Ω–æ–≤–∏—Ç—å - –±–µ–ª—ã–π —Ç–µ–∫—Å—Ç
    const refreshButton = page.locator('button:has-text("–û–±–Ω–æ–≤–∏—Ç—å")');
    const refreshStyle = await refreshButton.evaluate((el) => {
      const style = window.getComputedStyle(el);
      return {
        color: style.color,
      };
    });
    console.log('–û–±–Ω–æ–≤–∏—Ç—å button style:', refreshStyle);
    expect(refreshStyle.color).toBe('rgb(255, 255, 255)'); // white

    // –û—á–∏—Å—Ç–∏—Ç—å - –±–µ–ª—ã–π —Ç–µ–∫—Å—Ç, –∫—Ä–∞—Å–Ω–∞—è –∏–∫–æ–Ω–∫–∞, –∫—Ä–∞—Å–Ω–∞—è –æ–∫–∞–Ω—Ç–æ–≤–∫–∞ 3px –≤ —Å–≤–µ—Ç–ª–æ–π —Ç–µ–º–µ
    const clearButton = page.locator('button:has-text("–û—á–∏—Å—Ç–∏—Ç—å")');
    const clearStyle = await clearButton.evaluate((el) => {
      const style = window.getComputedStyle(el);
      const icon = el.querySelector('.anticon');
      const iconStyle = icon ? window.getComputedStyle(icon) : null;
      return {
        color: style.color,
        borderWidth: style.borderWidth,
        iconColor: iconStyle?.color || 'not found',
      };
    });
    console.log('–û—á–∏—Å—Ç–∏—Ç—å button style:', clearStyle);
    expect(clearStyle.color).toBe('rgb(255, 255, 255)'); // white text
    expect(clearStyle.borderWidth).toBe('3px'); // 3px border
    expect(clearStyle.iconColor).toBe('rgb(239, 68, 68)'); // red icon #ef4444
  });

  test('should verify button styles in dark theme', async ({ page }) => {
    console.log('üåô Testing dark theme button styles...');

    // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –Ω–∞ —Ç–µ–º–Ω—É—é —Ç–µ–º—É —á–µ—Ä–µ–∑ Switch –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
    const themeToggle = page.locator('.ant-switch').first();
    await themeToggle.click();
    await page.waitForTimeout(1500); // –ñ–¥–µ–º –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ç–µ–º—ã –∏ —Ä–µ-—Ä–µ–Ω–¥–µ—Ä–∞

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–º–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–∫–ª—é—á–∏–ª–∞—Å—å
    const headerClass = await page.locator('.edit-page-header').getAttribute('class');
    console.log('Header classes after toggle:', headerClass);
    expect(headerClass).toContain('dark');

    // –ö —Å—Ç—Ä—É–∫—Ç—É—Ä–µ - –ø—Ä–æ–∑—Ä–∞—á–Ω–∞—è –∑–∞–ª–∏–≤–∫–∞, –±–µ–ª—ã–π —Ç–µ–∫—Å—Ç
    const backButton = page.locator('button:has-text("–ö —Å—Ç—Ä—É–∫—Ç—É—Ä–µ")');
    const backStyle = await backButton.evaluate((el) => {
      const style = window.getComputedStyle(el);
      return {
        color: style.color,
      };
    });
    console.log('–ö —Å—Ç—Ä—É–∫—Ç—É—Ä–µ button style (dark):', backStyle);
    expect(backStyle.color).toMatch(/rgb(a)?\(255,\s*255,\s*255/); // white (with or without alpha)

    // –≠–∫—Å–ø–æ—Ä—Ç - –∂–µ–ª—Ç–∞—è –∏–∫–æ–Ω–∫–∞, –±–µ–ª—ã–π —Ç–µ–∫—Å—Ç
    const exportButton = page.locator('button:has-text("–≠–∫—Å–ø–æ—Ä—Ç")');
    const exportStyle = await exportButton.evaluate((el) => {
      const style = window.getComputedStyle(el);
      const icon = el.querySelector('.anticon');
      const iconStyle = icon ? window.getComputedStyle(icon) : null;
      return {
        color: style.color,
        borderWidth: style.borderWidth,
        iconColor: iconStyle?.color || 'not found',
      };
    });
    console.log('–≠–∫—Å–ø–æ—Ä—Ç button style (dark):', exportStyle);
    expect(exportStyle.color).toMatch(/rgb(a)?\(255,\s*255,\s*255/); // white (with or without alpha)
    expect(exportStyle.borderWidth).toBe('2px');
    // –ò–∫–æ–Ω–∫–∞ –∂–µ–ª—Ç–∞—è - –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ–Ω–∞ –Ω–µ –±–µ–ª–∞—è
    expect(exportStyle.iconColor).not.toMatch(/rgb(a)?\(255,\s*255,\s*255/); // not white (should be yellow)

    // –ò–º–ø–æ—Ä—Ç - —Å–∏–Ω—è—è –∏–∫–æ–Ω–∫–∞ –≤ —Ç–µ–º–Ω–æ–π —Ç–µ–º–µ, –±–µ–ª—ã–π —Ç–µ–∫—Å—Ç
    const importButton = page.locator('button:has-text("–ò–º–ø–æ—Ä—Ç")');
    const importStyle = await importButton.evaluate((el) => {
      const style = window.getComputedStyle(el);
      const icon = el.querySelector('.anticon svg');
      const iconStyle = icon ? window.getComputedStyle(icon) : null;
      return {
        color: style.color,
        borderWidth: style.borderWidth,
        iconColor: iconStyle?.color || (icon as any)?.style?.color || 'not found',
      };
    });
    console.log('–ò–º–ø–æ—Ä—Ç button style (dark):', importStyle);
    expect(importStyle.color).toMatch(/rgb(a)?\(255,\s*255,\s*255/); // white (with or without alpha)
    expect(importStyle.borderWidth).toBe('2px');
    // –ò–∫–æ–Ω–∫–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–¥–∞–Ω–∞ —á–µ—Ä–µ–∑ inline style, –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ–Ω–∞ –Ω–µ –±–µ–ª–∞—è
    expect(importStyle.iconColor).not.toMatch(/rgb(a)?\(255,\s*255,\s*255,\s*1\)/); // not white (should be blue)

    // –û–±–Ω–æ–≤–∏—Ç—å - —á–µ—Ä–Ω–∞—è –∑–∞–ª–∏–≤–∫–∞, –∑–µ–ª–µ–Ω–∞—è –∏–∫–æ–Ω–∫–∞, –±–µ–ª—ã–π —Ç–µ–∫—Å—Ç
    const refreshButton = page.locator('button:has-text("–û–±–Ω–æ–≤–∏—Ç—å")');
    const refreshStyle = await refreshButton.evaluate((el) => {
      const style = window.getComputedStyle(el);
      const icon = el.querySelector('.anticon');
      const iconStyle = icon ? window.getComputedStyle(icon) : null;
      return {
        color: style.color,
        backgroundColor: style.backgroundColor,
        iconColor: iconStyle?.color || 'not found',
      };
    });
    console.log('–û–±–Ω–æ–≤–∏—Ç—å button style (dark):', refreshStyle);
    expect(refreshStyle.color).toMatch(/rgb(a)?\(255,\s*255,\s*255/); // white (with or without alpha)
    // –ß–µ—Ä–Ω–∞—è –∑–∞–ª–∏–≤–∫–∞
    expect(refreshStyle.backgroundColor).toMatch(/rgba?\(0,\s*0,\s*0/); // black background
    // –ò–∫–æ–Ω–∫–∞ –∑–µ–ª–µ–Ω–∞—è - –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ–Ω–∞ –Ω–µ –±–µ–ª–∞—è
    expect(refreshStyle.iconColor).not.toMatch(/rgb(a)?\(255,\s*255,\s*255/); // not white (should be green)

    // –û—á–∏—Å—Ç–∏—Ç—å - –∫—Ä–∞—Å–Ω—ã–π —Ç–µ–∫—Å—Ç, –∫—Ä–∞—Å–Ω–∞—è –æ–∫–∞–Ω—Ç–æ–≤–∫–∞ 3px
    const clearButton = page.locator('button:has-text("–û—á–∏—Å—Ç–∏—Ç—å")');
    const clearStyle = await clearButton.evaluate((el) => {
      const style = window.getComputedStyle(el);
      return {
        color: style.color,
        borderWidth: style.borderWidth,
      };
    });
    console.log('–û—á–∏—Å—Ç–∏—Ç—å button style (dark):', clearStyle);
    expect(clearStyle.color).toBe('rgb(239, 68, 68)'); // red #ef4444
    expect(clearStyle.borderWidth).toBe('3px'); // 3px border
  });

  test.skip('should verify table text colors', async ({ page }) => {
    console.log('üî§ Testing table text colors...');

    // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
    await page.waitForSelector('.ant-table', { timeout: 10000 });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞ –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ (—Å–≤–µ—Ç–ª–∞—è —Ç–µ–º–∞)
    const firstRowText = page.locator('.ant-table-tbody tr').first().locator('td').first().locator('span');
    if (await firstRowText.count() > 0) {
      const textColor = await firstRowText.evaluate((el) => {
        const style = window.getComputedStyle(el);
        return style.color;
      });
      console.log('Table text color (light theme):', textColor);
      expect(textColor).toBe('rgb(0, 0, 0)'); // black
    }

    // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –Ω–∞ —Ç–µ–º–Ω—É—é —Ç–µ–º—É
    const themeToggle = page.locator('button[aria-label="–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Ç–µ–º—É"], button:has(svg)').first();
    await themeToggle.click();
    await page.waitForTimeout(500);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞ –≤ —Ç–µ–º–Ω–æ–π —Ç–µ–º–µ
    if (await firstRowText.count() > 0) {
      const textColorDark = await firstRowText.evaluate((el) => {
        const style = window.getComputedStyle(el);
        return style.color;
      });
      console.log('Table text color (dark theme):', textColorDark);
      expect(textColorDark).toBe('rgb(255, 255, 255)'); // white
    }
  });

  test.skip('should verify management panel background in dark theme', async ({ page }) => {
    console.log('üé® Testing management panel background...');

    // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –Ω–∞ —Ç–µ–º–Ω—É—é —Ç–µ–º—É
    const themeToggle = page.locator('button[aria-label="–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Ç–µ–º—É"], button:has(svg)').first();
    await themeToggle.click();
    await page.waitForTimeout(500);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ–Ω –ø–∞–Ω–µ–ª–∏ "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–æ–π"
    const managementPanel = page.locator('div:has-text("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–æ–π")').first();
    if (await managementPanel.count() > 0) {
      const panelStyle = await managementPanel.evaluate((el) => {
        const style = window.getComputedStyle(el);
        return {
          backgroundColor: style.backgroundColor,
          color: style.color,
        };
      });
      console.log('Management panel style (dark):', panelStyle);
      expect(panelStyle.backgroundColor).toBe('rgb(20, 20, 20)'); // #141414
    }
  });

  test.skip('should take screenshots for visual verification', async ({ page }) => {
    console.log('üì∏ Taking screenshots...');

    // –°–≤–µ—Ç–ª–∞—è —Ç–µ–º–∞
    await page.screenshot({
      path: 'tests/screenshots/construction-costs-edit-light.png',
      fullPage: true
    });
    console.log('‚úÖ Light theme screenshot saved');

    // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –Ω–∞ —Ç–µ–º–Ω—É—é —Ç–µ–º—É
    const themeToggle = page.locator('button[aria-label="–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Ç–µ–º—É"], button:has(svg)').first();
    await themeToggle.click();
    await page.waitForTimeout(500);

    await page.screenshot({
      path: 'tests/screenshots/construction-costs-edit-dark.png',
      fullPage: true
    });
    console.log('‚úÖ Dark theme screenshot saved');
  });
});
