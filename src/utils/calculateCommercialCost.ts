import type { TenderMarkupPercentages } from '../lib/supabase/types/tender-markup';

/**
 * –†–∞—Å—á–µ—Ç –∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Ä–∞–±–æ—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ –Ω–∞–∫—Ä—É—Ç–æ–∫
 * 
 * @param baseCost - –ë–∞–∑–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ä–∞–±–æ—Ç—ã (–†–∞–±–æ—Ç–∞ –ü–ó = unit_rate * quantity)
 * @param markups - –ü—Ä–æ—Ü–µ–Ω—Ç—ã –Ω–∞–∫—Ä—É—Ç–æ–∫ –∏–∑ –ë–î
 * @returns –ö–æ–º–º–µ—Ä—á–µ—Å–∫–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ä–∞–±–æ—Ç—ã
 */
export function calculateWorkCommercialCost(
  baseCost: number,
  markups: TenderMarkupPercentages
): number {
  console.log('üöÄ –†–∞—Å—á–µ—Ç –∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Ä–∞–±–æ—Ç—ã');
  console.log('üìä –ë–∞–∑–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å (–†–∞–±–æ—Ç–∞ –ü–ó):', baseCost);
  console.log('üìä –ü—Ä–æ—Ü–µ–Ω—Ç—ã –Ω–∞–∫—Ä—É—Ç–æ–∫:', markups);

  // 1. –°–ª—É–∂–±–∞ –º–µ—Ö–∞–Ω–∏–∑–∞—Ü–∏–∏ (–°–ú)
  const mechanizationCost = baseCost * (markups.mechanization_service / 100);
  console.log('1Ô∏è‚É£ –°–ª—É–∂–±–∞ –º–µ—Ö–∞–Ω–∏–∑–∞—Ü–∏–∏:', mechanizationCost, `(${markups.mechanization_service}%)`);

  // 2. –ú–ë–ü+–ì–°–ú
  const mbpGsmCost = baseCost * (markups.mbp_gsm / 100);
  console.log('2Ô∏è‚É£ –ú–ë–ü+–ì–°–ú:', mbpGsmCost, `(${markups.mbp_gsm}%)`);

  // 3. –ì–∞—Ä–∞–Ω—Ç–∏–π–Ω—ã–π –ø–µ—Ä–∏–æ–¥
  const warrantyCost = baseCost * (markups.warranty_period / 100);
  console.log('3Ô∏è‚É£ –ì–∞—Ä–∞–Ω—Ç–∏–π–Ω—ã–π –ø–µ—Ä–∏–æ–¥:', warrantyCost, `(${markups.warranty_period}%)`);

  // 4. –†–∞–±–æ—Ç–∞ 1,6 = (–†–∞–±–æ—Ç–∞ –ü–ó + –†–∞–±–æ—Ç–∞ –°–ú) * (1 + –ø—Ä–æ—Ü–µ–Ω—Ç)
  // –í–Ω–∏–º–∞–Ω–∏–µ: works_16_markup —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç 160%, –∑–Ω–∞—á–∏—Ç –Ω—É–∂–Ω–æ –¥–µ–ª–∏—Ç—å –Ω–∞ 100
  const work16 = (baseCost + mechanizationCost) * (markups.works_16_markup / 100);
  console.log('4Ô∏è‚É£ –†–∞–±–æ—Ç–∞ 1,6:', work16, `(–∫–æ—ç—Ñ ${markups.works_16_markup / 100})`);

  // 5. –†–∞–±–æ—Ç—ã –†–æ—Å—Ç = (–†–∞–±–æ—Ç–∞ 1,6 + –ú–ë–ü+–ì–°–ú) * (1 + –ø—Ä–æ—Ü–µ–Ω—Ç)
  const worksCostGrowth = (work16 + mbpGsmCost) * (1 + markups.works_cost_growth / 100);
  console.log('5Ô∏è‚É£ –†–∞–±–æ—Ç—ã –†–æ—Å—Ç:', worksCostGrowth, `(+${markups.works_cost_growth}%)`);

  // 6. –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω—ã–µ = (–†–∞–±–æ—Ç–∞ 1,6 + –ú–ë–ü) * (1 + –ø—Ä–æ—Ü–µ–Ω—Ç)
  const contingencyCosts = (work16 + mbpGsmCost) * (1 + markups.contingency_costs / 100);
  console.log('6Ô∏è‚É£ –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω—ã–µ –∑–∞—Ç—Ä–∞—Ç—ã:', contingencyCosts, `(+${markups.contingency_costs}%)`);

  // 7. –û–û–ó = (–†–∞–±–æ—Ç—ã –†–æ—Å—Ç + –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω—ã–µ - –†–∞–±–æ—Ç–∞ 1,6 - –ú–ë–ü) * (1 + –ø—Ä–æ—Ü–µ–Ω—Ç)
  const ooz = (worksCostGrowth + contingencyCosts - work16 - mbpGsmCost) * 
              (1 + markups.overhead_own_forces / 100);
  console.log('7Ô∏è‚É£ –û–û–ó —Å–æ–±—Å—Ç–≤. —Å–∏–ª—ã:', ooz, `(+${markups.overhead_own_forces}%)`);

  // 8. –û–§–ó = –û–û–ó * (1 + –ø—Ä–æ—Ü–µ–Ω—Ç)
  const ofz = ooz * (1 + markups.general_costs_without_subcontract / 100);
  console.log('8Ô∏è‚É£ –û–§–ó (–±–µ–∑ —Å—É–±–ø–æ–¥—Ä—è–¥–∞):', ofz, `(+${markups.general_costs_without_subcontract}%)`);

  // 9. –ü—Ä–∏–±—ã–ª—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–∏–ª—ã = –û–§–ó * (1 + –ø—Ä–æ—Ü–µ–Ω—Ç)
  const profit = ofz * (1 + markups.profit_own_forces / 100);
  console.log('9Ô∏è‚É£ –ü—Ä–∏–±—ã–ª—å —Å–æ–±—Å—Ç–≤. —Å–∏–ª—ã:', profit, `(+${markups.profit_own_forces}%)`);

  // –î–æ–±–∞–≤–ª—è–µ–º –≥–∞—Ä–∞–Ω—Ç–∏–π–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∫ –∏—Ç–æ–≥–æ–≤–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏
  const totalCommercialCost = profit + warrantyCost;
  
  console.log('‚úÖ –ò–¢–û–ì–û –∫–æ–º–º–µ—Ä—á–µ—Å–∫–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:', totalCommercialCost);
  console.log('üìà –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —É–≤–µ–ª–∏—á–µ–Ω–∏—è:', (totalCommercialCost / baseCost).toFixed(2));
  
  return totalCommercialCost;
}

/**
 * –†–∞—Å—á–µ—Ç –∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ –Ω–∞–∫—Ä—É—Ç–æ–∫
 * 
 * @param baseCost - –ë–∞–∑–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª–∞ (unit_rate * quantity + delivery)
 * @param markups - –ü—Ä–æ—Ü–µ–Ω—Ç—ã –Ω–∞–∫—Ä—É—Ç–æ–∫ –∏–∑ –ë–î
 * @returns –ö–æ–º–º–µ—Ä—á–µ—Å–∫–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª–∞
 */
export function calculateMaterialCommercialCost(
  baseCost: number,
  markups: TenderMarkupPercentages
): number {
  console.log('üöÄ –†–∞—Å—á–µ—Ç –∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∞');
  console.log('üìä –ë–∞–∑–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:', baseCost);

  // –î–ª—è –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ä–æ—Å—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
  const commercialCost = baseCost * (1 + markups.materials_cost_growth / 100);
  
  console.log('‚úÖ –ö–æ–º–º–µ—Ä—á–µ—Å–∫–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª–∞:', commercialCost, 
              `(+${markups.materials_cost_growth}%)`);
  
  return commercialCost;
}

/**
 * –†–∞—Å—á–µ—Ç –∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Å—É–±–ø–æ–¥—Ä—è–¥–Ω–æ–π —Ä–∞–±–æ—Ç—ã
 * 
 * @param baseCost - –ë–∞–∑–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å —Å—É–±–ø–æ–¥—Ä—è–¥–Ω–æ–π —Ä–∞–±–æ—Ç—ã
 * @param markups - –ü—Ä–æ—Ü–µ–Ω—Ç—ã –Ω–∞–∫—Ä—É—Ç–æ–∫ –∏–∑ –ë–î
 * @returns –ö–æ–º–º–µ—Ä—á–µ—Å–∫–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å —Å—É–±–ø–æ–¥—Ä—è–¥–Ω–æ–π —Ä–∞–±–æ—Ç—ã
 */
export function calculateSubcontractWorkCommercialCost(
  baseCost: number,
  markups: TenderMarkupPercentages
): number {
  console.log('üöÄ –†–∞—Å—á–µ—Ç –∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Å—É–±–ø–æ–¥—Ä—è–¥–Ω–æ–π —Ä–∞–±–æ—Ç—ã');
  console.log('üìä –ë–∞–∑–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:', baseCost);

  // –î–ª—è —Å—É–±–ø–æ–¥—Ä—è–¥–∞ –ø—Ä–∏–º–µ–Ω—è—é—Ç—Å—è —Å–≤–æ–∏ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã
  const costGrowth = baseCost * (1 + markups.subcontract_works_cost_growth / 100);
  const overhead = costGrowth * (1 + markups.overhead_subcontract / 100);
  const profit = overhead * (1 + markups.profit_subcontract / 100);
  
  console.log('‚úÖ –ö–æ–º–º–µ—Ä—á–µ—Å–∫–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å —Å—É–±–ø–æ–¥—Ä—è–¥–∞:', profit);
  
  return profit;
}

/**
 * –†–∞—Å—á–µ—Ç –∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Å—É–±–ø–æ–¥—Ä—è–¥–Ω–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞
 * 
 * @param baseCost - –ë–∞–∑–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å —Å—É–±–ø–æ–¥—Ä—è–¥–Ω–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞
 * @param markups - –ü—Ä–æ—Ü–µ–Ω—Ç—ã –Ω–∞–∫—Ä—É—Ç–æ–∫ –∏–∑ –ë–î
 * @returns –ö–æ–º–º–µ—Ä—á–µ—Å–∫–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å —Å—É–±–ø–æ–¥—Ä—è–¥–Ω–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞
 */
export function calculateSubcontractMaterialCommercialCost(
  baseCost: number,
  markups: TenderMarkupPercentages
): number {
  console.log('üöÄ –†–∞—Å—á–µ—Ç –∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Å—É–±–ø–æ–¥—Ä—è–¥–Ω–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞');
  console.log('üìä –ë–∞–∑–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:', baseCost);

  // –î–ª—è —Å—É–±–ø–æ–¥—Ä—è–¥–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è —Ä–æ—Å—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ —Å—É–±–ø–æ–¥—Ä—è–¥–∞
  const commercialCost = baseCost * (1 + markups.subcontract_materials_cost_growth / 100);
  
  console.log('‚úÖ –ö–æ–º–º–µ—Ä—á–µ—Å–∫–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å —Å—É–±–ø–æ–¥—Ä—è–¥–Ω–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞:', commercialCost,
              `(+${markups.subcontract_materials_cost_growth}%)`);
  
  return commercialCost;
}

/**
 * –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–æ–º–º–µ—Ä—á–µ—Å–∫—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å BOQ item –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –µ–≥–æ —Ç–∏–ø–∞
 * 
 * @param itemType - –¢–∏–ø —ç–ª–µ–º–µ–Ω—Ç–∞ (work, material, sub_work, sub_material)
 * @param baseCost - –ë–∞–∑–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å —ç–ª–µ–º–µ–Ω—Ç–∞
 * @param markups - –ü—Ä–æ—Ü–µ–Ω—Ç—ã –Ω–∞–∫—Ä—É—Ç–æ–∫ –∏–∑ –ë–î
 * @returns –ö–æ–º–º–µ—Ä—á–µ—Å–∫–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å —ç–ª–µ–º–µ–Ω—Ç–∞
 */
export function calculateBOQItemCommercialCost(
  itemType: 'work' | 'material' | 'sub_work' | 'sub_material',
  baseCost: number,
  markups: TenderMarkupPercentages
): number {
  switch (itemType) {
    case 'work':
      return calculateWorkCommercialCost(baseCost, markups);
    case 'material':
      return calculateMaterialCommercialCost(baseCost, markups);
    case 'sub_work':
      return calculateSubcontractWorkCommercialCost(baseCost, markups);
    case 'sub_material':
      return calculateSubcontractMaterialCommercialCost(baseCost, markups);
    default:
      console.warn('‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —ç–ª–µ–º–µ–Ω—Ç–∞:', itemType);
      return baseCost;
  }
}