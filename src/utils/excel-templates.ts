import * as XLSX from 'xlsx-js-style';
import { workMaterialLinksApi } from '../lib/supabase/api/work-material-links';
import { boqBatchApi } from '../lib/supabase/api/boq/batch';
import { getAllCategoriesAndLocations } from '../lib/supabase/api/cost-categories';

/**
 * Generate Excel template for construction costs import
 */
export const generateConstructionCostsTemplate = () => {
  console.log('üöÄ [generateConstructionCostsTemplate] Creating template');

  // Sample data for template
  const sampleData = [
    {
      '–ö–æ–¥': 'MAT-001',
      '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ': '–ë–µ—Ç–æ–Ω –ú300',
      '–ï–¥–∏–Ω–∏—Ü–∞': '–º¬≥',
      '–ë–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞': 4500,
      '–†—ã–Ω–æ—á–Ω–∞—è —Ü–µ–Ω–∞': 4800,
      '–ö–∞—Ç–µ–≥–æ—Ä–∏—è': '–ú–∞—Ç–µ—Ä–∏–∞–ª—ã',
      '–ü–æ—Å—Ç–∞–≤—â–∏–∫': '–û–û–û "–°—Ç—Ä–æ–π–ü–æ—Å—Ç–∞–≤–∫–∞"',
      '–û–ø–∏—Å–∞–Ω–∏–µ': '–ë–µ—Ç–æ–Ω –º–∞—Ä–∫–∏ –ú300 –¥–ª—è —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–∞',
      '–¢–µ–≥–∏': '–±–µ—Ç–æ–Ω, —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç, –º300'
    },
    {
      '–ö–æ–¥': 'MAT-002',
      '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ': '–ê—Ä–º–∞—Ç—É—Ä–∞ –ê500–° d12',
      '–ï–¥–∏–Ω–∏—Ü–∞': '—Ç–Ω',
      '–ë–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞': 85000,
      '–†—ã–Ω–æ—á–Ω–∞—è —Ü–µ–Ω–∞': 87000,
      '–ö–∞—Ç–µ–≥–æ—Ä–∏—è': '–ú–∞—Ç–µ—Ä–∏–∞–ª—ã',
      '–ü–æ—Å—Ç–∞–≤—â–∏–∫': '–û–û–û "–ú–µ—Ç–∞–ª–ª–¢—Ä–µ–π–¥"',
      '–û–ø–∏—Å–∞–Ω–∏–µ': '–ê—Ä–º–∞—Ç—É—Ä–∞ –∫–ª–∞—Å—Å–∞ –ê500–° –¥–∏–∞–º–µ—Ç—Ä 12–º–º',
      '–¢–µ–≥–∏': '–∞—Ä–º–∞—Ç—É—Ä–∞, –º–µ—Ç–∞–ª–ª, –∞500—Å'
    },
    {
      '–ö–æ–¥': 'WORK-001',
      '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ': '–ú–æ–Ω—Ç–∞–∂ –æ–ø–∞–ª—É–±–∫–∏',
      '–ï–¥–∏–Ω–∏—Ü–∞': '–º¬≤',
      '–ë–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞': 800,
      '–†—ã–Ω–æ—á–Ω–∞—è —Ü–µ–Ω–∞': null,
      '–ö–∞—Ç–µ–≥–æ—Ä–∏—è': '–†–∞–±–æ—Ç—ã',
      '–ü–æ—Å—Ç–∞–≤—â–∏–∫': null,
      '–û–ø–∏—Å–∞–Ω–∏–µ': '–ú–æ–Ω—Ç–∞–∂ —â–∏—Ç–æ–≤–æ–π –æ–ø–∞–ª—É–±–∫–∏ –¥–ª—è —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–∞',
      '–¢–µ–≥–∏': '–æ–ø–∞–ª—É–±–∫–∞, –º–æ–Ω—Ç–∞–∂, —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç'
    },
    {
      '–ö–æ–¥': 'WORK-002',
      '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ': '–£–∫–ª–∞–¥–∫–∞ –±–µ—Ç–æ–Ω–∞',
      '–ï–¥–∏–Ω–∏—Ü–∞': '–º¬≥',
      '–ë–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞': 1200,
      '–†—ã–Ω–æ—á–Ω–∞—è —Ü–µ–Ω–∞': null,
      '–ö–∞—Ç–µ–≥–æ—Ä–∏—è': '–†–∞–±–æ—Ç—ã',
      '–ü–æ—Å—Ç–∞–≤—â–∏–∫': null,
      '–û–ø–∏—Å–∞–Ω–∏–µ': '–£–∫–ª–∞–¥–∫–∞ –±–µ—Ç–æ–Ω–∞ —Å –≤–∏–±—Ä–æ—É–ø–ª–æ—Ç–Ω–µ–Ω–∏–µ–º',
      '–¢–µ–≥–∏': '–±–µ—Ç–æ–Ω, —É–∫–ª–∞–¥–∫–∞, –≤–∏–±—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ'
    },
    {
      '–ö–æ–¥': 'TECH-001',
      '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ': '–ê—Ä–µ–Ω–¥–∞ –∫—Ä–∞–Ω–∞ 25—Ç',
      '–ï–¥–∏–Ω–∏—Ü–∞': '—Å–º–µ–Ω–∞',
      '–ë–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞': 45000,
      '–†—ã–Ω–æ—á–Ω–∞—è —Ü–µ–Ω–∞': 48000,
      '–ö–∞—Ç–µ–≥–æ—Ä–∏—è': '–¢–µ—Ö–Ω–∏–∫–∞ –∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ',
      '–ü–æ—Å—Ç–∞–≤—â–∏–∫': '–û–û–û "–°–ø–µ—Ü–¢–µ—Ö–Ω–∏–∫–∞"',
      '–û–ø–∏—Å–∞–Ω–∏–µ': '–ê—Ä–µ–Ω–¥–∞ –∞–≤—Ç–æ–∫—Ä–∞–Ω–∞ –≥—Ä—É–∑–æ–ø–æ–¥—ä–µ–º–Ω–æ—Å—Ç—å—é 25 —Ç–æ–Ω–Ω',
      '–¢–µ–≥–∏': '–∫—Ä–∞–Ω, –∞—Ä–µ–Ω–¥–∞, —Ç–µ—Ö–Ω–∏–∫–∞'
    }
  ];

  // Create workbook and worksheet
  const wb = XLSX.utils.book_new();
  const ws = XLSX.utils.json_to_sheet(sampleData);

  // Set column widths
  const colWidths = [
    { wch: 12 }, // –ö–æ–¥
    { wch: 30 }, // –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ
    { wch: 10 }, // –ï–¥–∏–Ω–∏—Ü–∞
    { wch: 15 }, // –ë–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞
    { wch: 15 }, // –†—ã–Ω–æ—á–Ω–∞—è —Ü–µ–Ω–∞
    { wch: 20 }, // –ö–∞—Ç–µ–≥–æ—Ä–∏—è
    { wch: 25 }, // –ü–æ—Å—Ç–∞–≤—â–∏–∫
    { wch: 40 }, // –û–ø–∏—Å–∞–Ω–∏–µ
    { wch: 30 }  // –¢–µ–≥–∏
  ];
  ws['!cols'] = colWidths;

  // Add worksheet to workbook
  XLSX.utils.book_append_sheet(wb, ws, '–ó–∞—Ç—Ä–∞—Ç—ã –Ω–∞ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ');

  // Create instructions sheet
  const instructions = [
    ['–ò–ù–°–¢–†–£–ö–¶–ò–Ø –ü–û –ó–ê–ü–û–õ–ù–ï–ù–ò–Æ'],
    [''],
    ['–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è:'],
    ['‚Ä¢ –ö–æ–¥ - —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥ –∑–∞—Ç—Ä–∞—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä: MAT-001, WORK-002)'],
    ['‚Ä¢ –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ - –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞—Ç—Ä–∞—Ç'],
    ['‚Ä¢ –ï–¥–∏–Ω–∏—Ü–∞ - –µ–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è (—à—Ç, –º¬≤, –º¬≥, –∫–≥, —Ç–Ω, —á–∞—Å, —Å–º–µ–Ω–∞)'],
    ['‚Ä¢ –ë–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞ - –æ—Å–Ω–æ–≤–Ω–∞—è —Ü–µ–Ω–∞ –∑–∞ –µ–¥–∏–Ω–∏—Ü—É (—á–∏—Å–ª–æ)'],
    [''],
    ['–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–æ–ª—è:'],
    ['‚Ä¢ –†—ã–Ω–æ—á–Ω–∞—è —Ü–µ–Ω–∞ - —Ç–µ–∫—É—â–∞—è —Ä—ã–Ω–æ—á–Ω–∞—è —Ü–µ–Ω–∞ (—á–∏—Å–ª–æ)'],
    ['‚Ä¢ –ö–∞—Ç–µ–≥–æ—Ä–∏—è - –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞'],
    ['‚Ä¢ –ü–æ—Å—Ç–∞–≤—â–∏–∫ - –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞'],
    ['‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ - –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞—Ç—Ä–∞—Ç'],
    ['‚Ä¢ –¢–µ–≥–∏ - –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –¥–ª—è –ø–æ–∏—Å–∫–∞'],
    [''],
    ['–ü—Ä–∏–º–µ—á–∞–Ω–∏—è:'],
    ['1. –ù–µ –∏–∑–º–µ–Ω—è–π—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫'],
    ['2. –¶–µ–Ω—ã —É–∫–∞–∑—ã–≤–∞–π—Ç–µ —á–∏—Å–ª–∞–º–∏ –±–µ–∑ —Å–∏–º–≤–æ–ª–∞ –≤–∞–ª—é—Ç—ã'],
    ['3. –î–ª—è –ø—É—Å—Ç—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –æ—Å—Ç–∞–≤—å—Ç–µ —è—á–µ–π–∫—É –ø—É—Å—Ç–æ–π'],
    ['4. –¢–µ–≥–∏ —Ä–∞–∑–¥–µ–ª—è–π—Ç–µ –∑–∞–ø—è—Ç—ã–º–∏'],
    ['5. –£–¥–∞–ª–∏—Ç–µ –ø—Ä–∏–º–µ—Ä—ã –ø–µ—Ä–µ–¥ –∏–º–ø–æ—Ä—Ç–æ–º –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ –Ω–∏–∂–µ']
  ];

  const wsInstructions = XLSX.utils.aoa_to_sheet(instructions);
  wsInstructions['!cols'] = [{ wch: 80 }];
  XLSX.utils.book_append_sheet(wb, wsInstructions, '–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è');

  // Write file
  XLSX.writeFile(wb, '–®–∞–±–ª–æ–Ω_–∑–∞—Ç—Ä–∞—Ç—ã_–Ω–∞_—Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ.xlsx');
  
  console.log('‚úÖ [generateConstructionCostsTemplate] Template created');
};

/**
 * Export client positions with commercial costs to Excel
 */
export const exportCommercialCostsToExcel = (positions: any[], tenderName = '', fileName = 'commercial_costs.xlsx') => {
  console.log('üöÄ [exportCommercialCostsToExcel] Exporting positions:', positions.length);

  // Helper function to translate position types
  const translatePositionType = (type: string): string => {
    const translations: Record<string, string> = {
      'executable': '–ò—Å–ø–æ–ª–Ω—è–µ–º–∞—è',
      'section': '–†–∞–∑–¥–µ–ª',
      'subsection': '–ü–æ–¥—Ä–∞–∑–¥–µ–ª',
      'not_executable': '–ù–µ–∏—Å–ø–æ–ª–Ω—è–µ–º–∞—è',
      'with_materials': '–° –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏',
      'materials_only': '–¢–æ–ª—å–∫–æ –º–∞—Ç–µ—Ä–∏–∞–ª—ã',
      'works_only': '–¢–æ–ª—å–∫–æ —Ä–∞–±–æ—Ç—ã',
      'header': '–ó–∞–≥–æ–ª–æ–≤–æ–∫',
      'subheader': '–ü–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫'
    };
    return translations[type] || type;
  };

  // Helper function to format numbers with thousand separators
  const formatNumber = (value: number | undefined, decimals: number = 2): string => {
    if (!value && value !== 0) return '';
    return value.toLocaleString('ru-RU', {
      minimumFractionDigits: decimals,
      maximumFractionDigits: decimals
    });
  };

  const exportData = positions.map(position => ({
    '–ù–æ–º–µ—Ä —Ä–∞–∑–¥–µ–ª–∞': position.item_no || '',
    '‚Ññ –ø/–ø': position.position_number || '',
    '–¢–∏–ø –ø–æ–∑–∏—Ü–∏–∏': translatePositionType(position.position_type || 'executable'),
    '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç': position.work_name || '',
    '–ï–¥. –∏–∑–º.': position.unit || '',
    '–ö–æ–ª-–≤–æ –ó–∞–∫–∞–∑—á–∏–∫–∞': position.client_quantity || position.volume || '',
    '–ö–æ–ª-–≤–æ –ì–ü': position.gp_quantity || position.manual_volume || '',
    '–¶–µ–Ω–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –∑–∞ –µ–¥–∏–Ω–∏—Ü—É': formatNumber(position.materials_unit_price, 2),
    '–¶–µ–Ω–∞ —Ä–∞–±–æ—Ç—ã –∑–∞ –µ–¥–∏–Ω–∏—Ü—É': formatNumber(position.works_unit_price, 2),
    '–ò—Ç–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª': position.materials_total_cost ? Math.round(position.materials_total_cost) : '',
    '–ò—Ç–æ–≥–æ —Ä–∞–±–æ—Ç–∞': position.works_total_cost ? Math.round(position.works_total_cost) : '',
    '–°—É–º–º–∞ (–∫–æ–º–º–µ—Ä—á–µ—Å–∫–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å)': position.commercial_total_cost ? Math.round(position.commercial_total_cost) : '',
    '–°—É–º–º–∞ (–±–∞–∑–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å)': position.base_total_cost ? Math.round(position.base_total_cost) : '',
    '–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ –ì–ü': position.manual_note || '',  // –ò–∑ –ø–æ–ª—è manual_note —Ç–∞–±–ª–∏—Ü—ã client_positions
    '–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ –∑–∞–∫–∞–∑—á–∏–∫–∞': position.client_note || '', // –ò–∑ –ø–æ–ª—è client_note —Ç–∞–±–ª–∏—Ü—ã client_positions
  }));

  const wb = XLSX.utils.book_new();
  const ws = XLSX.utils.json_to_sheet(exportData);

  // Get worksheet range
  const range = XLSX.utils.decode_range(ws['!ref'] || 'A1');

  // Define styles
  const borderStyle = {
    top: { style: "thin", color: { rgb: "000000" } },
    bottom: { style: "thin", color: { rgb: "000000" } },
    left: { style: "thin", color: { rgb: "000000" } },
    right: { style: "thin", color: { rgb: "000000" } }
  };

  const centerAlignment = {
    horizontal: "center",
    vertical: "center",
    wrapText: true
  };

  const leftAlignment = {
    horizontal: "left",
    vertical: "center",
    wrapText: true
  };

  const lightRedColor = 'FFCCCC'; // Light red for zero cost rows

  // Define number formats
  const integerFormat = '#,##0'; // Format with thousand separators for integers
  const decimalFormat = '#,##0.00'; // Format with 2 decimal places

  // Updated column indices due to new first column "–ù–æ–º–µ—Ä —Ä–∞–∑–¥–µ–ª–∞"
  const integerColumns = [9, 10, 11, 12]; // –ò—Ç–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª, –ò—Ç–æ–≥–æ —Ä–∞–±–æ—Ç–∞, –°—É–º–º–∞ (–∫–æ–º–º–µ—Ä—á–µ—Å–∫–∞—è), –°—É–º–º–∞ (–±–∞–∑–æ–≤–∞—è)
  const decimalColumns = [7, 8]; // –¶–µ–Ω–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –∑–∞ –µ–¥–∏–Ω–∏—Ü—É, –¶–µ–Ω–∞ —Ä–∞–±–æ—Ç—ã –∑–∞ –µ–¥–∏–Ω–∏—Ü—É

  // Apply styles to all cells
  for (let row = 0; row <= range.e.r; row++) {
    // Check if this row has zero commercial cost AND is executable type (row > 0 to skip header)
    const position = row > 0 ? positions[row - 1] : null;
    const hasZeroCost = position &&
      position.position_type === 'executable' &&
      (!position.commercial_total_cost || position.commercial_total_cost === 0);

    for (let col = 0; col <= range.e.c; col++) {
      const cellAddress = XLSX.utils.encode_cell({ r: row, c: col });
      const cell = ws[cellAddress];

      if (cell) {
        if (!cell.s) cell.s = {};

        // Add borders to all cells
        cell.s.border = borderStyle;

        // Add alignment (column 3 is now "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç")
        if (col === 3) {
          cell.s.alignment = leftAlignment;
        } else {
          cell.s.alignment = centerAlignment;
        }

        // Add number format for numeric columns (skip header row)
        if (row > 0) {
          if (integerColumns.includes(col)) {
            cell.s.numFmt = integerFormat;
          } else if (decimalColumns.includes(col)) {
            cell.s.numFmt = decimalFormat;
          }
        }

        // Add light red background for executable rows with zero cost
        if (hasZeroCost && row > 0) {
          cell.s.fill = {
            patternType: "solid",
            fgColor: { rgb: lightRedColor }
          };
        }

        // Bold header row
        if (row === 0) {
          cell.s.font = { bold: true };
        }
      }
    }
  }

  // Set column widths
  const colWidths = [
    { wch: 15 }, // –ù–æ–º–µ—Ä —Ä–∞–∑–¥–µ–ª–∞
    { wch: 8 },  // ‚Ññ –ø/–ø
    { wch: 15 }, // –¢–∏–ø –ø–æ–∑–∏—Ü–∏–∏
    { wch: 40 }, // –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç
    { wch: 10 }, // –ï–¥. –∏–∑–º.
    { wch: 15 }, // –ö–æ–ª-–≤–æ –ó–∞–∫–∞–∑—á–∏–∫–∞
    { wch: 12 }, // –ö–æ–ª-–≤–æ –ì–ü
    { wch: 20 }, // –¶–µ–Ω–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –∑–∞ –µ–¥–∏–Ω–∏—Ü—É
    { wch: 20 }, // –¶–µ–Ω–∞ —Ä–∞–±–æ—Ç—ã –∑–∞ –µ–¥–∏–Ω–∏—Ü—É
    { wch: 15 }, // –ò—Ç–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª
    { wch: 15 }, // –ò—Ç–æ–≥–æ —Ä–∞–±–æ—Ç–∞
    { wch: 25 }, // –°—É–º–º–∞ (–∫–æ–º–º–µ—Ä—á–µ—Å–∫–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å)
    { wch: 25 }, // –°—É–º–º–∞ (–±–∞–∑–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å)
    { wch: 20 }, // –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ –ì–ü
    { wch: 30 }, // –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ –∑–∞–∫–∞–∑—á–∏–∫–∞
  ];
  ws['!cols'] = colWidths;

  // Freeze the first row (header)
  ws['!freeze'] = { xSplit: 0, ySplit: 1, topLeftCell: "A2", activePane: "bottomLeft" };

  // Add title and tender info
  const sheetName = tenderName ? `–ö–æ–º–º–µ—Ä—á–µ—Å–∫–∏–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ - ${tenderName}` : '–ö–æ–º–º–µ—Ä—á–µ—Å–∫–∏–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏';
  XLSX.utils.book_append_sheet(wb, ws, sheetName.slice(0, 31)); // Excel sheet name limit

  XLSX.writeFile(wb, fileName);

  console.log('‚úÖ [exportCommercialCostsToExcel] Export completed');
};

/**
 * Export construction costs to Excel
 */
export const exportConstructionCostsToExcel = (costs: any[], fileName = 'construction_costs.xlsx') => {
  console.log('üöÄ [exportConstructionCostsToExcel] Exporting costs:', costs.length);

  const exportData = costs.map(cost => ({
    '–ö–æ–¥': cost.code,
    '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ': cost.name,
    '–ö–∞—Ç–µ–≥–æ—Ä–∏—è': cost.category?.name || '',
    '–ï–¥–∏–Ω–∏—Ü–∞': cost.unit,
    '–ë–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞': cost.base_price,
    '–†—ã–Ω–æ—á–Ω–∞—è —Ü–µ–Ω–∞': cost.market_price || '',
    '–ü–æ—Å—Ç–∞–≤—â–∏–∫': cost.supplier || '',
    '–û–ø–∏—Å–∞–Ω–∏–µ': cost.description || '',
    '–¢–µ–≥–∏': cost.tags?.join(', ') || '',
    '–°—Ç–∞—Ç—É—Å': cost.is_active ? '–ê–∫—Ç–∏–≤–Ω–æ' : '–ù–µ–∞–∫—Ç–∏–≤–Ω–æ',
    '–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è': new Date(cost.created_at).toLocaleDateString('ru-RU'),
    '–î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è': new Date(cost.updated_at).toLocaleDateString('ru-RU')
  }));

  const wb = XLSX.utils.book_new();
  const ws = XLSX.utils.json_to_sheet(exportData);

  // Set column widths
  const colWidths = [
    { wch: 12 }, // –ö–æ–¥
    { wch: 30 }, // –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ
    { wch: 20 }, // –ö–∞—Ç–µ–≥–æ—Ä–∏—è
    { wch: 10 }, // –ï–¥–∏–Ω–∏—Ü–∞
    { wch: 15 }, // –ë–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞
    { wch: 15 }, // –†—ã–Ω–æ—á–Ω–∞—è —Ü–µ–Ω–∞
    { wch: 25 }, // –ü–æ—Å—Ç–∞–≤—â–∏–∫
    { wch: 40 }, // –û–ø–∏—Å–∞–Ω–∏–µ
    { wch: 30 }, // –¢–µ–≥–∏
    { wch: 12 }, // –°—Ç–∞—Ç—É—Å
    { wch: 15 }, // –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è
    { wch: 15 }  // –î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
  ];
  ws['!cols'] = colWidths;

  XLSX.utils.book_append_sheet(wb, ws, '–ó–∞—Ç—Ä–∞—Ç—ã');
  XLSX.writeFile(wb, fileName);

  console.log('‚úÖ [exportConstructionCostsToExcel] Export completed');
};

/**
 * Export all tenders to Excel with comprehensive information
 */
export const exportTendersToExcel = (tenders: any[], fileName = 'all_tenders.xlsx') => {
  console.log('üöÄ [exportTendersToExcel] Exporting tenders:', tenders.length);

  const exportData = tenders.map((tender, index) => {
    // Format submission deadline
    const submissionDeadline = tender.submission_deadline
      ? new Date(tender.submission_deadline).toLocaleDateString('ru-RU', {
          year: 'numeric',
          month: '2-digit',
          day: '2-digit',
          hour: '2-digit',
          minute: '2-digit'
        })
      : '';

    // Format creation date
    const createdAt = new Date(tender.created_at).toLocaleDateString('ru-RU', {
      year: 'numeric',
      month: '2-digit',
      day: '2-digit'
    });

    // Calculate deadline status
    const getDeadlineStatus = () => {
      if (!tender.submission_deadline) return '–ù–µ —É–∫–∞–∑–∞–Ω';

      const now = new Date();
      const deadline = new Date(tender.submission_deadline);
      const diffTime = deadline.getTime() - now.getTime();
      const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));

      if (diffDays < 0) return '–ó–∞–≤–µ—Ä—à–µ–Ω';
      if (diffDays === 0) return '–°–µ–≥–æ–¥–Ω—è';
      if (diffDays <= 3) return `${diffDays} –¥–Ω. (–∫—Ä–∏—Ç–∏—á–Ω–æ)`;
      if (diffDays <= 7) return `${diffDays} –¥–Ω. (–±–ª–∏–∑–∫–æ)`;
      return `${diffDays} –¥–Ω.`;
    };

    return {
      '‚Ññ': index + 1,
      'ID': tender.id || '',
      '–ù–æ–º–µ—Ä —Ç–µ–Ω–¥–µ—Ä–∞': tender.tender_number || '',
      '–ù–∞–∑–≤–∞–Ω–∏–µ': tender.title || '',
      '–ó–∞–∫–∞–∑—á–∏–∫': tender.client_name || '',
      '–í–µ—Ä—Å–∏—è': tender.version || 1,
      '–û–ø–∏—Å–∞–Ω–∏–µ': tender.description || '',
      '–î–µ–¥–ª–∞–π–Ω –ø–æ–¥–∞—á–∏': submissionDeadline,
      '–°—Ç–∞—Ç—É—Å –¥–µ–¥–ª–∞–π–Ω–∞': getDeadlineStatus(),
      '–ü–ª–æ—â–∞–¥—å –ø–æ –°–ü (–º¬≤)': tender.area_sp || '',
      '–ü–ª–æ—â–∞–¥—å –∫–ª–∏–µ–Ω—Ç–∞ (–º¬≤)': tender.area_client || '',
      '–ö—É—Ä—Å USD': tender.usd_rate || '',
      '–ö—É—Ä—Å EUR': tender.eur_rate || '',
      '–ö—É—Ä—Å CNY': tender.cny_rate || '',
      '–ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –ö–ü (‚ÇΩ)': tender.commercial_total_value
        ? tender.commercial_total_value.toLocaleString('ru-RU')
        : '–ù–µ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–æ',
      '–°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞ –º¬≤ (‚ÇΩ/–º¬≤)': (tender.commercial_total_value && tender.area_sp)
        ? Math.round(tender.commercial_total_value / tender.area_sp).toLocaleString('ru-RU')
        : '',
      '–°–æ–∑–¥–∞–Ω': createdAt,
      '–û–±–Ω–æ–≤–ª–µ–Ω': new Date(tender.updated_at).toLocaleDateString('ru-RU', {
        year: 'numeric',
        month: '2-digit',
        day: '2-digit'
      })
    };
  });

  const wb = XLSX.utils.book_new();
  const ws = XLSX.utils.json_to_sheet(exportData);

  // Set column widths for better readability
  const colWidths = [
    { wch: 5 },   // ‚Ññ
    { wch: 36 },  // ID
    { wch: 15 },  // –ù–æ–º–µ—Ä —Ç–µ–Ω–¥–µ—Ä–∞
    { wch: 40 },  // –ù–∞–∑–≤–∞–Ω–∏–µ
    { wch: 30 },  // –ó–∞–∫–∞–∑—á–∏–∫
    { wch: 8 },   // –í–µ—Ä—Å–∏—è
    { wch: 50 },  // –û–ø–∏—Å–∞–Ω–∏–µ
    { wch: 18 },  // –î–µ–¥–ª–∞–π–Ω –ø–æ–¥–∞—á–∏
    { wch: 18 },  // –°—Ç–∞—Ç—É—Å –¥–µ–¥–ª–∞–π–Ω–∞
    { wch: 15 },  // –ü–ª–æ—â–∞–¥—å –ø–æ –°–ü
    { wch: 15 },  // –ü–ª–æ—â–∞–¥—å –∫–ª–∏–µ–Ω—Ç–∞
    { wch: 12 },  // –ö—É—Ä—Å USD
    { wch: 12 },  // –ö—É—Ä—Å EUR
    { wch: 12 },  // –ö—É—Ä—Å CNY
    { wch: 20 },  // –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –ö–ü
    { wch: 18 },  // –°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞ –º¬≤
    { wch: 12 },  // –°–æ–∑–¥–∞–Ω
    { wch: 12 }   // –û–±–Ω–æ–≤–ª–µ–Ω
  ];
  ws['!cols'] = colWidths;

  // Add some styling to headers (freeze first row)
  ws['!freeze'] = { xSplit: 0, ySplit: 1 };

  XLSX.utils.book_append_sheet(wb, ws, '–¢–µ–Ω–¥–µ—Ä—ã');
  XLSX.writeFile(wb, fileName);

  console.log('‚úÖ [exportTendersToExcel] Export completed:', fileName);
};

/**
 * Export BOQ positions with items to Excel in hierarchical structure
 */
export const exportBOQToExcel = async (
  positions: any[],
  boqItemsMap: Map<string, any[]> | null,  // Now optional - will load internally if not provided
  tenderName: string,
  tenderId?: string
) => {
  console.log('üöÄ [exportBOQToExcel] Starting export with', positions.length, 'positions');
  const startTime = performance.now();

  const exportData: any[] = [];
  const rowStyles: Map<number, string> = new Map(); // Store styles for each row with proper indexing
  const unpricedExecutableRows: Set<number> = new Set(); // Track unpriced executable positions
  let workLinksCache = new Map<string, any[]>(); // Cache for work-material links by position
  let boqItemsCache = boqItemsMap || new Map<string, any[]>(); // Use provided map or create new

  // Cache for categories and locations
  let categoriesCache: any = null;

  // Batch load ALL data if tenderId is provided (parallel requests)
  if (tenderId) {
    console.log('üîÑ [exportBOQToExcel] Starting batch data loading...');

    const [linksResult, boqResult, categoriesResult] = await Promise.all([
      // 1. Load all work-material links
      workMaterialLinksApi.getLinksByTender(tenderId),
      // 2. Load ALL BOQ items if not provided
      !boqItemsMap ? boqBatchApi.getAllByTenderId(tenderId) : Promise.resolve({ data: null }),
      // 3. Load all categories and locations
      getAllCategoriesAndLocations()
    ]);

    // Process work-material links
    if (!linksResult.error && linksResult.data) {
      workLinksCache = linksResult.data;
      console.log(`‚úÖ [exportBOQToExcel] Loaded links for ${linksResult.data.size} positions`);
    } else if (linksResult.error) {
      console.error('‚ùå [exportBOQToExcel] Failed to load links:', linksResult.error);
    }

    // Process BOQ items if loaded
    if (!boqItemsMap && boqResult.data) {
      // Group BOQ items by client_position_id
      console.log(`üì¶ [exportBOQToExcel] Grouping ${boqResult.data.length} BOQ items by position...`);
      boqItemsCache = new Map();
      for (const item of boqResult.data) {
        const posId = item.client_position_id;
        if (!boqItemsCache.has(posId)) {
          boqItemsCache.set(posId, []);
        }
        const items = boqItemsCache.get(posId);
        if (items) {
          items.push(item);
        }
      }
      console.log(`‚úÖ [exportBOQToExcel] Grouped items into ${boqItemsCache.size} positions`);
    }

    // Store categories cache
    categoriesCache = categoriesResult;
    console.log(`‚úÖ [exportBOQToExcel] Loaded categories cache`);

    const loadTime = performance.now() - startTime;
    console.log(`‚ö° [exportBOQToExcel] Batch loading completed in ${loadTime.toFixed(0)}ms`);
  }

  // Helper functions for translation
  const translateItemType = (type: string): string => {
    const types: Record<string, string> = {
      'work': '–†–∞–±–æ—Ç–∞',
      'material': '–ú–∞—Ç–µ—Ä–∏–∞–ª',
      'sub_work': '–°—É–±-—Ä–∞–±',
      'sub_material': '–°—É–±-–º–∞—Ç'
    };
    return types[type] || type || '';
  };

  const translateMaterialType = (type: string): string => {
    const types: Record<string, string> = {
      'main': '–û—Å–Ω–æ–≤–Ω–æ–π',
      'auxiliary': '–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π',
      'consumable': '–†–∞—Å—Ö–æ–¥–Ω—ã–π',
      'tool': '–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç',
      'equipment': '–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ'
    };
    return types[type] || type || '';
  };

  const translateDeliveryType = (type: string): string => {
    const types: Record<string, string> = {
      'included': '–í —Ü–µ–Ω–µ',
      'not_included': '–ù–µ –≤ —Ü–µ–Ω–µ',
      'amount': '–§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è'
    };
    return types[type] || type || '';
  };

  // Recursive function to add position with its items and additional positions
  const addPositionWithItems = async (position: any, level: number = 0) => {
    // Get BOQ items for this position from cache
    let items = boqItemsCache.get(position.id) || [];

    // Get work-material links from cache (already loaded for entire tender)
    const links = workLinksCache.get(position.id) || [];

    // Process items with link information (same logic as TenderBOQManagerLazy)
    const processedItems = items.map(item => {
      if ((item.item_type === 'material' || item.item_type === 'sub_material') && links && links.length > 0) {
        const materialLinks = links.filter(l =>
          l.material_boq_item_id === item.id ||
          l.sub_material_boq_item_id === item.id
        );

        if (materialLinks.length > 0) {
          return {
            ...item,
            work_links: materialLinks,
            work_link: materialLinks[0]
          };
        }
      } else if ((item.item_type === 'work' || item.item_type === 'sub_work') && links && links.length > 0) {
        const workLinks = links.filter(l =>
          l.work_boq_item_id === item.id ||
          l.sub_work_boq_item_id === item.id
        );

        if (workLinks.length > 0) {
          return {
            ...item,
            linked_materials: workLinks
          };
        }
      }
      return item;
    });

    items = processedItems;

    // Add client position row
    const rowIndex = exportData.length;
    exportData.push({
      '–ù–æ–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏': position.item_no || '',
      '‚Ññ –ø/–ø': position.position_number || '',
      '–ö–∞—Ç–µ–≥–æ—Ä–∏—è –∑–∞—Ç—Ä–∞—Ç': '', // Empty for client positions
      '–¢–∏–ø —ç–ª–µ–º–µ–Ω—Ç–∞': '',
      '–¢–∏–ø –º–∞—Ç–µ—Ä–∏–∞–ª–∞': '',
      '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ': position.work_name, // No indentation
      '–ï–¥. –∏–∑–º.': position.unit || '',
      '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑—á–∏–∫–∞': position.volume || '',
      '–ö–æ—ç—Ñ—Ñ. –ø–µ—Ä–µ–≤–æ–¥–∞': '',
      '–ö–æ—ç—Ñ—Ñ. —Ä–∞—Å—Ö–æ–¥–∞': '',
      '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ì–ü': position.manual_volume || '',
      '–í–∞–ª—é—Ç–∞': '',
      '–¢–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏': '',
      '–°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏': '',
      '–¶–µ–Ω–∞ –∑–∞ –µ–¥–∏–Ω–∏—Ü—É': '',
      '–ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞': Math.round((position.total_materials_cost || 0) + (position.total_works_cost || 0)),
      '–°—Å—ã–ª–∫–∞ –Ω–∞ –ö–ü': '',
      '–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ –∑–∞–∫–∞–∑—á–∏–∫–∞': position.client_note || '',
      '–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ –ì–ü': position.manual_note || ''
    });

    // Check if this is an unpriced executable position
    if (position.position_type === 'executable' && items.length === 0) {
      unpricedExecutableRows.add(rowIndex);
    }

    // Sort BOQ items properly - works first, then their linked materials
    const sortedItems: any[] = [];

    // Get all works and sub-works sorted by sub_number
    const works = items
      .filter(item => item.item_type === 'work' || item.item_type === 'sub_work')
      .sort((a, b) => (a.sub_number || 0) - (b.sub_number || 0));

    // Process each work and its linked materials (using work_link data)
    works.forEach(work => {
      // Add the work
      sortedItems.push(work);

      // Find materials linked to this work (using work_link object)
      const linkedMaterials = items.filter(item => {
        // Only check materials and sub-materials
        if (item.item_type !== 'material' && item.item_type !== 'sub_material') {
          return false;
        }

        // Check if material is linked to this work using work_link object
        if (item.work_link) {
          if (work.item_type === 'work') {
            // Regular work - check work_boq_item_id
            return item.work_link.work_boq_item_id === work.id;
          } else if (work.item_type === 'sub_work') {
            // Sub-work - check sub_work_boq_item_id
            return item.work_link.sub_work_boq_item_id === work.id;
          }
        }
        return false;
      }).sort((a, b) => (a.sub_number || 0) - (b.sub_number || 0));

      // Add linked materials after the work
      sortedItems.push(...linkedMaterials);
    });

    // Add unlinked materials at the end (materials without work_link)
    const unlinkedMaterials = items.filter(item =>
      (item.item_type === 'material' || item.item_type === 'sub_material') &&
      !item.work_link
    ).sort((a, b) => (a.sub_number || 0) - (b.sub_number || 0));

    sortedItems.push(...unlinkedMaterials);

    // Add each BOQ item
    sortedItems.forEach(item => {
      // For work and sub_work types, material_type should be empty
      const materialType = (item.item_type === 'work' || item.item_type === 'sub_work')
        ? ''
        : translateMaterialType(item.material_type);

      exportData.push({
        '–ù–æ–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏': '',
        '‚Ññ –ø/–ø': '',
        '–ö–∞—Ç–µ–≥–æ—Ä–∏—è –∑–∞—Ç—Ä–∞—Ç': '', // Will be filled after export data is complete
        '–¢–∏–ø —ç–ª–µ–º–µ–Ω—Ç–∞': translateItemType(item.item_type),
        '–¢–∏–ø –º–∞—Ç–µ—Ä–∏–∞–ª–∞': materialType,
        '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ': item.description, // No indentation
        '–ï–¥. –∏–∑–º.': item.unit,
        '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑—á–∏–∫–∞': '', // Empty for BOQ items
        '–ö–æ—ç—Ñ—Ñ. –ø–µ—Ä–µ–≤–æ–¥–∞': item.conversion_coefficient || '',
        '–ö–æ—ç—Ñ—Ñ. —Ä–∞—Å—Ö–æ–¥–∞': item.consumption_coefficient || '',
        '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ì–ü': item.quantity,
        '–í–∞–ª—é—Ç–∞': item.currency_type || 'RUB',
        '–¢–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏': translateDeliveryType(item.delivery_price_type),
        '–°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏': Math.round(item.delivery_amount || 0),
        '–¶–µ–Ω–∞ –∑–∞ –µ–¥–∏–Ω–∏—Ü—É': Math.round(item.unit_rate || 0),
        '–ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞': Math.round(item.total_amount || 0),
        '–°—Å—ã–ª–∫–∞ –Ω–∞ –ö–ü': item.quote_link || '',
        '–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ –∑–∞–∫–∞–∑—á–∏–∫–∞': '', // Empty for BOQ items
        '–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ –ì–ü': item.note || ''
      });

      // Track row index and type for styling (use current length - 1 as the row was just added)
      rowStyles.set(exportData.length - 1, item.item_type);
    });

    // Add additional positions (–î–û–ü) from the position's additional_works property
    // This handles –î–û–ü positions for all position types, not just executable
    if (position.additional_works && Array.isArray(position.additional_works)) {
      const sortedAdditional = [...position.additional_works].sort((a, b) => a.position_number - b.position_number);

      for (const addPos of sortedAdditional) {
        // Mark as –î–û–ü position by modifying the item_no
        const dopPosition = {
          ...addPos,
          item_no: `${position.item_no || ''}.–î–û–ü.${addPos.position_number - position.position_number}`
        };
        await addPositionWithItems(dopPosition, level + 1);
      }
    }

    // Also check for additional positions in the main positions list (for fallback compatibility)
    // This ensures we don't miss any –î–û–ü positions if data structure is different
    const additionalPositions = positions.filter(p =>
      p.parent_position_id === position.id &&
      p.is_additional === true
    );

    if (additionalPositions.length > 0) {
      const sortedAdditional = [...additionalPositions].sort((a, b) => a.position_number - b.position_number);

      for (const addPos of sortedAdditional) {
        // Skip if already processed from additional_works
        if (position.additional_works && position.additional_works.some((aw: any) => aw.id === addPos.id)) {
          continue;
        }

        // Mark as –î–û–ü position by modifying the item_no
        const dopPosition = {
          ...addPos,
          item_no: `${position.item_no || ''}.–î–û–ü.${addPos.position_number - position.position_number}`
        };
        await addPositionWithItems(dopPosition, level + 1);
      }
    }
  };

  // Process only main positions (without parent_position_id)
  const mainPositions = positions
    .filter(p => !p.parent_position_id)
    .sort((a, b) => a.position_number - b.position_number);

  console.log('üìä [exportBOQToExcel] Processing', mainPositions.length, 'main positions');

  // Process positions sequentially to ensure proper async handling
  for (const position of mainPositions) {
    await addPositionWithItems(position, 0);
  }

  // Update export data with categories using cache
  console.log('üîÑ [exportBOQToExcel] Applying cost categories from cache...');

  if (categoriesCache) {
    exportData.forEach((row) => {
      // Check if this row has a BOQ item with detail_cost_category_id
      const boqItem = Array.from(boqItemsCache.values())
        .flat()
        .find(item => item.description === row['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ']?.trim());

      if (boqItem?.detail_cost_category_id) {
        // Get category display using cached data
        const detailCategory = categoriesCache.detailCategoryMap.get(boqItem.detail_cost_category_id);
        const category = detailCategory?.category_id ?
          categoriesCache.categoryMap.get(detailCategory.category_id) : null;
        const location = boqItem.location_id ?
          categoriesCache.locationMap.get(boqItem.location_id) : null;

        // Build display string (matching getDetailCategoryDisplay format)
        let display = '';
        if (category) display += category.name;
        if (detailCategory) {
          if (display) display += ' / ';
          display += detailCategory.name;
        }
        if (location) {
          if (display) display += ' / ';
          display += location.name;
        }

        row['–ö–∞—Ç–µ–≥–æ—Ä–∏—è –∑–∞—Ç—Ä–∞—Ç'] = display;
      }
    });
  } else {
    console.log('‚ö†Ô∏è [exportBOQToExcel] No categories cache available, skipping category assignment');
  }

  // Create Excel workbook
  const wb = XLSX.utils.book_new();
  const ws = XLSX.utils.json_to_sheet(exportData);

  // Apply color styling based on item type
  const range = XLSX.utils.decode_range(ws['!ref'] || 'A1');

  // Define colors for each item type (matching the UI)
  const itemTypeColors = {
    'work': 'FED7AA',       // Orange
    'material': 'BFDBFE',   // Blue
    'sub_work': 'E9D5FF',   // Purple
    'sub_material': 'BBF7D0' // Green
  };

  // Define common styles
  const borderStyle = {
    top: { style: "thin", color: { rgb: "000000" } },
    bottom: { style: "thin", color: { rgb: "000000" } },
    left: { style: "thin", color: { rgb: "000000" } },
    right: { style: "thin", color: { rgb: "000000" } }
  };

  const centerAlignment = {
    horizontal: "center",
    vertical: "center",
    wrapText: true
  };

  const leftAlignment = {
    horizontal: "left",
    vertical: "center",
    wrapText: true
  };

  const unpricedColor = 'FFCCCC'; // Light red for unpriced positions

  // Define number formats for different column types
  const integerFormat = '#,##0'; // Format with thousand separators for integers
  const decimalFormat = '#,##0.00'; // Format with 2 decimal places

  const integerColumns = [
    7,  // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑—á–∏–∫–∞
    13, // –°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏
    14, // –¶–µ–Ω–∞ –∑–∞ –µ–¥–∏–Ω–∏—Ü—É
    15  // –ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞
  ];

  const decimalColumns = [
    8,  // –ö–æ—ç—Ñ—Ñ. –ø–µ—Ä–µ–≤–æ–¥–∞
    9,  // –ö–æ—ç—Ñ—Ñ. —Ä–∞—Å—Ö–æ–¥–∞
    10  // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ì–ü
  ];

  // Apply styles to all cells
  for (let row = 0; row <= range.e.r; row++) {
    for (let col = 0; col <= range.e.c; col++) {
      const cellAddress = XLSX.utils.encode_cell({ r: row, c: col });
      const cell = ws[cellAddress];

      if (cell) {
        if (!cell.s) cell.s = {};

        // Add borders to all cells
        cell.s.border = borderStyle;

        // Add number format for numeric columns (skip header row)
        if (row > 0) {
          if (integerColumns.includes(col)) {
            cell.s.numFmt = integerFormat;
          } else if (decimalColumns.includes(col)) {
            cell.s.numFmt = decimalFormat;
          }
        }

        // Add alignment based on column (column 5 is "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ")
        if (col === 5) {
          // "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ" column - left align
          cell.s.alignment = leftAlignment;
        } else {
          // All other columns - center align
          cell.s.alignment = centerAlignment;
        }

        // Apply background colors for data rows (skip header)
        if (row > 0) {
          const dataRowIndex = row - 1; // Adjust for header

          // Check for unpriced executable positions
          if (unpricedExecutableRows.has(dataRowIndex)) {
            cell.s.fill = {
              patternType: 'solid',
              fgColor: { rgb: unpricedColor },
              bgColor: { rgb: unpricedColor }
            };
          }
          // Check for BOQ item types
          else {
            const itemType = rowStyles.get(dataRowIndex);
            if (itemType && (itemTypeColors as any)[itemType]) {
              const bgColor = (itemTypeColors as any)[itemType];
              cell.s.fill = {
                patternType: 'solid',
                fgColor: { rgb: bgColor },
                bgColor: { rgb: bgColor }
              };
            }
          }
        }
      }
    }
  }

  // Set column widths according to new order
  ws['!cols'] = [
    { wch: 12 },  // –ù–æ–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏
    { wch: 8 },   // ‚Ññ –ø/–ø
    { wch: 25 },  // –ö–∞—Ç–µ–≥–æ—Ä–∏—è –∑–∞—Ç—Ä–∞—Ç
    { wch: 15 },  // –¢–∏–ø —ç–ª–µ–º–µ–Ω—Ç–∞
    { wch: 15 },  // –¢–∏–ø –º–∞—Ç–µ—Ä–∏–∞–ª–∞
    { wch: 50 },  // –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ
    { wch: 10 },  // –ï–¥. –∏–∑–º.
    { wch: 15 },  // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑—á–∏–∫–∞
    { wch: 12 },  // –ö–æ—ç—Ñ—Ñ. –ø–µ—Ä–µ–≤–æ–¥–∞
    { wch: 12 },  // –ö–æ—ç—Ñ—Ñ. —Ä–∞—Å—Ö–æ–¥–∞
    { wch: 15 },  // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ì–ü
    { wch: 8 },   // –í–∞–ª—é—Ç–∞
    { wch: 15 },  // –¢–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏
    { wch: 15 },  // –°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏
    { wch: 15 },  // –¶–µ–Ω–∞ –∑–∞ –µ–¥–∏–Ω–∏—Ü—É
    { wch: 15 },  // –ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞
    { wch: 30 },  // –°—Å—ã–ª–∫–∞ –Ω–∞ –ö–ü
    { wch: 25 },  // –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ –∑–∞–∫–∞–∑—á–∏–∫–∞
    { wch: 25 }   // –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ –ì–ü
  ];

  // Freeze header row - use both formats for compatibility
  ws['!freeze'] = { xSplit: 0, ySplit: 1, topLeftCell: 'A2', activePane: 'bottomLeft', state: 'frozen' };

  // Add worksheet to workbook
  XLSX.utils.book_append_sheet(wb, ws, 'BOQ');

  // Generate filename (tenderName already includes version in format "Title (–í–µ—Ä—Å–∏—è X)")
  const safeFileName = tenderName.replace(/[^–∞-—è–ê-–Øa-zA-Z0-9\s()]/g, '_').trim();
  const fileName = `${safeFileName}.xlsx`;

  // Write file
  XLSX.writeFile(wb, fileName);

  console.log('‚úÖ [exportBOQToExcel] Export completed:', fileName);
  console.log('üìä [exportBOQToExcel] Exported', exportData.length, 'rows total');
};