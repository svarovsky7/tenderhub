import * as XLSX from 'xlsx';
import { getDetailCategoryDisplay } from '../lib/supabase/api/construction-costs';

/**
 * Generate Excel template for construction costs import
 */
export const generateConstructionCostsTemplate = () => {
  console.log('üöÄ [generateConstructionCostsTemplate] Creating template');

  // Sample data for template
  const sampleData = [
    {
      '–ö–æ–¥': 'MAT-001',
      '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ': '–ë–µ—Ç–æ–Ω –ú300',
      '–ï–¥–∏–Ω–∏—Ü–∞': '–º¬≥',
      '–ë–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞': 4500,
      '–†—ã–Ω–æ—á–Ω–∞—è —Ü–µ–Ω–∞': 4800,
      '–ö–∞—Ç–µ–≥–æ—Ä–∏—è': '–ú–∞—Ç–µ—Ä–∏–∞–ª—ã',
      '–ü–æ—Å—Ç–∞–≤—â–∏–∫': '–û–û–û "–°—Ç—Ä–æ–π–ü–æ—Å—Ç–∞–≤–∫–∞"',
      '–û–ø–∏—Å–∞–Ω–∏–µ': '–ë–µ—Ç–æ–Ω –º–∞—Ä–∫–∏ –ú300 –¥–ª—è —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–∞',
      '–¢–µ–≥–∏': '–±–µ—Ç–æ–Ω, —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç, –º300'
    },
    {
      '–ö–æ–¥': 'MAT-002',
      '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ': '–ê—Ä–º–∞—Ç—É—Ä–∞ –ê500–° d12',
      '–ï–¥–∏–Ω–∏—Ü–∞': '—Ç–Ω',
      '–ë–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞': 85000,
      '–†—ã–Ω–æ—á–Ω–∞—è —Ü–µ–Ω–∞': 87000,
      '–ö–∞—Ç–µ–≥–æ—Ä–∏—è': '–ú–∞—Ç–µ—Ä–∏–∞–ª—ã',
      '–ü–æ—Å—Ç–∞–≤—â–∏–∫': '–û–û–û "–ú–µ—Ç–∞–ª–ª–¢—Ä–µ–π–¥"',
      '–û–ø–∏—Å–∞–Ω–∏–µ': '–ê—Ä–º–∞—Ç—É—Ä–∞ –∫–ª–∞—Å—Å–∞ –ê500–° –¥–∏–∞–º–µ—Ç—Ä 12–º–º',
      '–¢–µ–≥–∏': '–∞—Ä–º–∞—Ç—É—Ä–∞, –º–µ—Ç–∞–ª–ª, –∞500—Å'
    },
    {
      '–ö–æ–¥': 'WORK-001',
      '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ': '–ú–æ–Ω—Ç–∞–∂ –æ–ø–∞–ª—É–±–∫–∏',
      '–ï–¥–∏–Ω–∏—Ü–∞': '–º¬≤',
      '–ë–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞': 800,
      '–†—ã–Ω–æ—á–Ω–∞—è —Ü–µ–Ω–∞': null,
      '–ö–∞—Ç–µ–≥–æ—Ä–∏—è': '–†–∞–±–æ—Ç—ã',
      '–ü–æ—Å—Ç–∞–≤—â–∏–∫': null,
      '–û–ø–∏—Å–∞–Ω–∏–µ': '–ú–æ–Ω—Ç–∞–∂ —â–∏—Ç–æ–≤–æ–π –æ–ø–∞–ª—É–±–∫–∏ –¥–ª—è —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–∞',
      '–¢–µ–≥–∏': '–æ–ø–∞–ª—É–±–∫–∞, –º–æ–Ω—Ç–∞–∂, —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç'
    },
    {
      '–ö–æ–¥': 'WORK-002',
      '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ': '–£–∫–ª–∞–¥–∫–∞ –±–µ—Ç–æ–Ω–∞',
      '–ï–¥–∏–Ω–∏—Ü–∞': '–º¬≥',
      '–ë–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞': 1200,
      '–†—ã–Ω–æ—á–Ω–∞—è —Ü–µ–Ω–∞': null,
      '–ö–∞—Ç–µ–≥–æ—Ä–∏—è': '–†–∞–±–æ—Ç—ã',
      '–ü–æ—Å—Ç–∞–≤—â–∏–∫': null,
      '–û–ø–∏—Å–∞–Ω–∏–µ': '–£–∫–ª–∞–¥–∫–∞ –±–µ—Ç–æ–Ω–∞ —Å –≤–∏–±—Ä–æ—É–ø–ª–æ—Ç–Ω–µ–Ω–∏–µ–º',
      '–¢–µ–≥–∏': '–±–µ—Ç–æ–Ω, —É–∫–ª–∞–¥–∫–∞, –≤–∏–±—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ'
    },
    {
      '–ö–æ–¥': 'TECH-001',
      '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ': '–ê—Ä–µ–Ω–¥–∞ –∫—Ä–∞–Ω–∞ 25—Ç',
      '–ï–¥–∏–Ω–∏—Ü–∞': '—Å–º–µ–Ω–∞',
      '–ë–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞': 45000,
      '–†—ã–Ω–æ—á–Ω–∞—è —Ü–µ–Ω–∞': 48000,
      '–ö–∞—Ç–µ–≥–æ—Ä–∏—è': '–¢–µ—Ö–Ω–∏–∫–∞ –∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ',
      '–ü–æ—Å—Ç–∞–≤—â–∏–∫': '–û–û–û "–°–ø–µ—Ü–¢–µ—Ö–Ω–∏–∫–∞"',
      '–û–ø–∏—Å–∞–Ω–∏–µ': '–ê—Ä–µ–Ω–¥–∞ –∞–≤—Ç–æ–∫—Ä–∞–Ω–∞ –≥—Ä—É–∑–æ–ø–æ–¥—ä–µ–º–Ω–æ—Å—Ç—å—é 25 —Ç–æ–Ω–Ω',
      '–¢–µ–≥–∏': '–∫—Ä–∞–Ω, –∞—Ä–µ–Ω–¥–∞, —Ç–µ—Ö–Ω–∏–∫–∞'
    }
  ];

  // Create workbook and worksheet
  const wb = XLSX.utils.book_new();
  const ws = XLSX.utils.json_to_sheet(sampleData);

  // Set column widths
  const colWidths = [
    { wch: 12 }, // –ö–æ–¥
    { wch: 30 }, // –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ
    { wch: 10 }, // –ï–¥–∏–Ω–∏—Ü–∞
    { wch: 15 }, // –ë–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞
    { wch: 15 }, // –†—ã–Ω–æ—á–Ω–∞—è —Ü–µ–Ω–∞
    { wch: 20 }, // –ö–∞—Ç–µ–≥–æ—Ä–∏—è
    { wch: 25 }, // –ü–æ—Å—Ç–∞–≤—â–∏–∫
    { wch: 40 }, // –û–ø–∏—Å–∞–Ω–∏–µ
    { wch: 30 }  // –¢–µ–≥–∏
  ];
  ws['!cols'] = colWidths;

  // Add worksheet to workbook
  XLSX.utils.book_append_sheet(wb, ws, '–ó–∞—Ç—Ä–∞—Ç—ã –Ω–∞ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ');

  // Create instructions sheet
  const instructions = [
    ['–ò–ù–°–¢–†–£–ö–¶–ò–Ø –ü–û –ó–ê–ü–û–õ–ù–ï–ù–ò–Æ'],
    [''],
    ['–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è:'],
    ['‚Ä¢ –ö–æ–¥ - —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥ –∑–∞—Ç—Ä–∞—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä: MAT-001, WORK-002)'],
    ['‚Ä¢ –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ - –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞—Ç—Ä–∞—Ç'],
    ['‚Ä¢ –ï–¥–∏–Ω–∏—Ü–∞ - –µ–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è (—à—Ç, –º¬≤, –º¬≥, –∫–≥, —Ç–Ω, —á–∞—Å, —Å–º–µ–Ω–∞)'],
    ['‚Ä¢ –ë–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞ - –æ—Å–Ω–æ–≤–Ω–∞—è —Ü–µ–Ω–∞ –∑–∞ –µ–¥–∏–Ω–∏—Ü—É (—á–∏—Å–ª–æ)'],
    [''],
    ['–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–æ–ª—è:'],
    ['‚Ä¢ –†—ã–Ω–æ—á–Ω–∞—è —Ü–µ–Ω–∞ - —Ç–µ–∫—É—â–∞—è —Ä—ã–Ω–æ—á–Ω–∞—è —Ü–µ–Ω–∞ (—á–∏—Å–ª–æ)'],
    ['‚Ä¢ –ö–∞—Ç–µ–≥–æ—Ä–∏—è - –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞'],
    ['‚Ä¢ –ü–æ—Å—Ç–∞–≤—â–∏–∫ - –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞'],
    ['‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ - –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞—Ç—Ä–∞—Ç'],
    ['‚Ä¢ –¢–µ–≥–∏ - –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –¥–ª—è –ø–æ–∏—Å–∫–∞'],
    [''],
    ['–ü—Ä–∏–º–µ—á–∞–Ω–∏—è:'],
    ['1. –ù–µ –∏–∑–º–µ–Ω—è–π—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫'],
    ['2. –¶–µ–Ω—ã —É–∫–∞–∑—ã–≤–∞–π—Ç–µ —á–∏—Å–ª–∞–º–∏ –±–µ–∑ —Å–∏–º–≤–æ–ª–∞ –≤–∞–ª—é—Ç—ã'],
    ['3. –î–ª—è –ø—É—Å—Ç—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –æ—Å—Ç–∞–≤—å—Ç–µ —è—á–µ–π–∫—É –ø—É—Å—Ç–æ–π'],
    ['4. –¢–µ–≥–∏ —Ä–∞–∑–¥–µ–ª—è–π—Ç–µ –∑–∞–ø—è—Ç—ã–º–∏'],
    ['5. –£–¥–∞–ª–∏—Ç–µ –ø—Ä–∏–º–µ—Ä—ã –ø–µ—Ä–µ–¥ –∏–º–ø–æ—Ä—Ç–æ–º –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ –Ω–∏–∂–µ']
  ];

  const wsInstructions = XLSX.utils.aoa_to_sheet(instructions);
  wsInstructions['!cols'] = [{ wch: 80 }];
  XLSX.utils.book_append_sheet(wb, wsInstructions, '–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è');

  // Write file
  XLSX.writeFile(wb, '–®–∞–±–ª–æ–Ω_–∑–∞—Ç—Ä–∞—Ç—ã_–Ω–∞_—Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ.xlsx');
  
  console.log('‚úÖ [generateConstructionCostsTemplate] Template created');
};

/**
 * Export client positions with commercial costs to Excel
 */
export const exportCommercialCostsToExcel = (positions: any[], tenderName = '', fileName = 'commercial_costs.xlsx') => {
  console.log('üöÄ [exportCommercialCostsToExcel] Exporting positions:', positions.length);

  const exportData = positions.map(position => ({
    '‚Ññ –ø/–ø': position.position_number || '',
    '–¢–∏–ø –ø–æ–∑–∏—Ü–∏–∏': position.position_type || 'executable',
    '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç': position.work_name || '',
    '–ï–¥. –∏–∑–º.': position.unit || '',
    '–ö–æ–ª-–≤–æ –ó–∞–∫–∞–∑—á–∏–∫–∞': position.client_quantity || position.volume || '',
    '–ö–æ–ª-–≤–æ –ì–ü': position.gp_quantity || position.manual_volume || '',
    '–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ –∑–∞–∫–∞–∑—á–∏–∫–∞': position.client_note || '',
    '–ë–∞–∑–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å, ‚ÇΩ': position.base_total_cost ? Math.round(position.base_total_cost) : '',
    '–ö–æ–º–º–µ—Ä—á–µ—Å–∫–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å, ‚ÇΩ': position.commercial_total_cost ? Math.round(position.commercial_total_cost) : '',
    '–ù–∞—Ü–µ–Ω–∫–∞, ‚ÇΩ': position.base_total_cost && position.commercial_total_cost 
      ? Math.round(position.commercial_total_cost - position.base_total_cost) : '',
    '–ù–∞—Ü–µ–Ω–∫–∞, %': position.markup_percentage ? `${position.markup_percentage.toFixed(1)}%` : '',
    '–†–∞–±–æ—Ç—ã (–∫–æ–º–º–µ—Ä—á–µ—Å–∫–∞—è), ‚ÇΩ': position.works_total_cost ? Math.round(position.works_total_cost) : '',
    '–ú–∞—Ç–µ—Ä–∏–∞–ª—ã (–∫–æ–º–º–µ—Ä—á–µ—Å–∫–∞—è), ‚ÇΩ': position.materials_total_cost ? Math.round(position.materials_total_cost) : '',
  }));

  const wb = XLSX.utils.book_new();
  const ws = XLSX.utils.json_to_sheet(exportData);

  // Set column widths
  const colWidths = [
    { wch: 8 },  // ‚Ññ –ø/–ø
    { wch: 15 }, // –¢–∏–ø –ø–æ–∑–∏—Ü–∏–∏
    { wch: 40 }, // –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç
    { wch: 10 }, // –ï–¥. –∏–∑–º.
    { wch: 15 }, // –ö–æ–ª-–≤–æ –ó–∞–∫–∞–∑—á–∏–∫–∞
    { wch: 12 }, // –ö–æ–ª-–≤–æ –ì–ü
    { wch: 30 }, // –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ –∑–∞–∫–∞–∑—á–∏–∫–∞
    { wch: 18 }, // –ë–∞–∑–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å
    { wch: 20 }, // –ö–æ–º–º–µ—Ä—á–µ—Å–∫–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å
    { wch: 15 }, // –ù–∞—Ü–µ–Ω–∫–∞, ‚ÇΩ
    { wch: 12 }, // –ù–∞—Ü–µ–Ω–∫–∞, %
    { wch: 20 }, // –†–∞–±–æ—Ç—ã (–∫–æ–º–º–µ—Ä—á–µ—Å–∫–∞—è)
    { wch: 22 }, // –ú–∞—Ç–µ—Ä–∏–∞–ª—ã (–∫–æ–º–º–µ—Ä—á–µ—Å–∫–∞—è)
  ];
  ws['!cols'] = colWidths;

  // Add title and tender info
  const sheetName = tenderName ? `–ö–æ–º–º–µ—Ä—á–µ—Å–∫–∏–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ - ${tenderName}` : '–ö–æ–º–º–µ—Ä—á–µ—Å–∫–∏–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏';
  XLSX.utils.book_append_sheet(wb, ws, sheetName.slice(0, 31)); // Excel sheet name limit

  XLSX.writeFile(wb, fileName);

  console.log('‚úÖ [exportCommercialCostsToExcel] Export completed');
};

/**
 * Export construction costs to Excel
 */
export const exportConstructionCostsToExcel = (costs: any[], fileName = 'construction_costs.xlsx') => {
  console.log('üöÄ [exportConstructionCostsToExcel] Exporting costs:', costs.length);

  const exportData = costs.map(cost => ({
    '–ö–æ–¥': cost.code,
    '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ': cost.name,
    '–ö–∞—Ç–µ–≥–æ—Ä–∏—è': cost.category?.name || '',
    '–ï–¥–∏–Ω–∏—Ü–∞': cost.unit,
    '–ë–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞': cost.base_price,
    '–†—ã–Ω–æ—á–Ω–∞—è —Ü–µ–Ω–∞': cost.market_price || '',
    '–ü–æ—Å—Ç–∞–≤—â–∏–∫': cost.supplier || '',
    '–û–ø–∏—Å–∞–Ω–∏–µ': cost.description || '',
    '–¢–µ–≥–∏': cost.tags?.join(', ') || '',
    '–°—Ç–∞—Ç—É—Å': cost.is_active ? '–ê–∫—Ç–∏–≤–Ω–æ' : '–ù–µ–∞–∫—Ç–∏–≤–Ω–æ',
    '–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è': new Date(cost.created_at).toLocaleDateString('ru-RU'),
    '–î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è': new Date(cost.updated_at).toLocaleDateString('ru-RU')
  }));

  const wb = XLSX.utils.book_new();
  const ws = XLSX.utils.json_to_sheet(exportData);

  // Set column widths
  const colWidths = [
    { wch: 12 }, // –ö–æ–¥
    { wch: 30 }, // –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ
    { wch: 20 }, // –ö–∞—Ç–µ–≥–æ—Ä–∏—è
    { wch: 10 }, // –ï–¥–∏–Ω–∏—Ü–∞
    { wch: 15 }, // –ë–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞
    { wch: 15 }, // –†—ã–Ω–æ—á–Ω–∞—è —Ü–µ–Ω–∞
    { wch: 25 }, // –ü–æ—Å—Ç–∞–≤—â–∏–∫
    { wch: 40 }, // –û–ø–∏—Å–∞–Ω–∏–µ
    { wch: 30 }, // –¢–µ–≥–∏
    { wch: 12 }, // –°—Ç–∞—Ç—É—Å
    { wch: 15 }, // –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è
    { wch: 15 }  // –î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
  ];
  ws['!cols'] = colWidths;

  XLSX.utils.book_append_sheet(wb, ws, '–ó–∞—Ç—Ä–∞—Ç—ã');
  XLSX.writeFile(wb, fileName);

  console.log('‚úÖ [exportConstructionCostsToExcel] Export completed');
};

/**
 * Export all tenders to Excel with comprehensive information
 */
export const exportTendersToExcel = (tenders: any[], fileName = 'all_tenders.xlsx') => {
  console.log('üöÄ [exportTendersToExcel] Exporting tenders:', tenders.length);

  const exportData = tenders.map((tender, index) => {
    // Format submission deadline
    const submissionDeadline = tender.submission_deadline
      ? new Date(tender.submission_deadline).toLocaleDateString('ru-RU', {
          year: 'numeric',
          month: '2-digit',
          day: '2-digit',
          hour: '2-digit',
          minute: '2-digit'
        })
      : '';

    // Format creation date
    const createdAt = new Date(tender.created_at).toLocaleDateString('ru-RU', {
      year: 'numeric',
      month: '2-digit',
      day: '2-digit'
    });

    // Calculate deadline status
    const getDeadlineStatus = () => {
      if (!tender.submission_deadline) return '–ù–µ —É–∫–∞–∑–∞–Ω';

      const now = new Date();
      const deadline = new Date(tender.submission_deadline);
      const diffTime = deadline.getTime() - now.getTime();
      const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));

      if (diffDays < 0) return '–ó–∞–≤–µ—Ä—à–µ–Ω';
      if (diffDays === 0) return '–°–µ–≥–æ–¥–Ω—è';
      if (diffDays <= 3) return `${diffDays} –¥–Ω. (–∫—Ä–∏—Ç–∏—á–Ω–æ)`;
      if (diffDays <= 7) return `${diffDays} –¥–Ω. (–±–ª–∏–∑–∫–æ)`;
      return `${diffDays} –¥–Ω.`;
    };

    return {
      '‚Ññ': index + 1,
      'ID': tender.id || '',
      '–ù–æ–º–µ—Ä —Ç–µ–Ω–¥–µ—Ä–∞': tender.tender_number || '',
      '–ù–∞–∑–≤–∞–Ω–∏–µ': tender.title || '',
      '–ó–∞–∫–∞–∑—á–∏–∫': tender.client_name || '',
      '–í–µ—Ä—Å–∏—è': tender.version || 1,
      '–û–ø–∏—Å–∞–Ω–∏–µ': tender.description || '',
      '–î–µ–¥–ª–∞–π–Ω –ø–æ–¥–∞—á–∏': submissionDeadline,
      '–°—Ç–∞—Ç—É—Å –¥–µ–¥–ª–∞–π–Ω–∞': getDeadlineStatus(),
      '–ü–ª–æ—â–∞–¥—å –ø–æ –°–ü (–º¬≤)': tender.area_sp || '',
      '–ü–ª–æ—â–∞–¥—å –∫–ª–∏–µ–Ω—Ç–∞ (–º¬≤)': tender.area_client || '',
      '–ö—É—Ä—Å USD': tender.usd_rate || '',
      '–ö—É—Ä—Å EUR': tender.eur_rate || '',
      '–ö—É—Ä—Å CNY': tender.cny_rate || '',
      '–ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –ö–ü (‚ÇΩ)': tender.commercial_total_value
        ? tender.commercial_total_value.toLocaleString('ru-RU')
        : '–ù–µ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–æ',
      '–°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞ –º¬≤ (‚ÇΩ/–º¬≤)': (tender.commercial_total_value && tender.area_sp)
        ? Math.round(tender.commercial_total_value / tender.area_sp).toLocaleString('ru-RU')
        : '',
      '–°–æ–∑–¥–∞–Ω': createdAt,
      '–û–±–Ω–æ–≤–ª–µ–Ω': new Date(tender.updated_at).toLocaleDateString('ru-RU', {
        year: 'numeric',
        month: '2-digit',
        day: '2-digit'
      })
    };
  });

  const wb = XLSX.utils.book_new();
  const ws = XLSX.utils.json_to_sheet(exportData);

  // Set column widths for better readability
  const colWidths = [
    { wch: 5 },   // ‚Ññ
    { wch: 36 },  // ID
    { wch: 15 },  // –ù–æ–º–µ—Ä —Ç–µ–Ω–¥–µ—Ä–∞
    { wch: 40 },  // –ù–∞–∑–≤–∞–Ω–∏–µ
    { wch: 30 },  // –ó–∞–∫–∞–∑—á–∏–∫
    { wch: 8 },   // –í–µ—Ä—Å–∏—è
    { wch: 50 },  // –û–ø–∏—Å–∞–Ω–∏–µ
    { wch: 18 },  // –î–µ–¥–ª–∞–π–Ω –ø–æ–¥–∞—á–∏
    { wch: 18 },  // –°—Ç–∞—Ç—É—Å –¥–µ–¥–ª–∞–π–Ω–∞
    { wch: 15 },  // –ü–ª–æ—â–∞–¥—å –ø–æ –°–ü
    { wch: 15 },  // –ü–ª–æ—â–∞–¥—å –∫–ª–∏–µ–Ω—Ç–∞
    { wch: 12 },  // –ö—É—Ä—Å USD
    { wch: 12 },  // –ö—É—Ä—Å EUR
    { wch: 12 },  // –ö—É—Ä—Å CNY
    { wch: 20 },  // –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –ö–ü
    { wch: 18 },  // –°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞ –º¬≤
    { wch: 12 },  // –°–æ–∑–¥–∞–Ω
    { wch: 12 }   // –û–±–Ω–æ–≤–ª–µ–Ω
  ];
  ws['!cols'] = colWidths;

  // Add some styling to headers (freeze first row)
  ws['!freeze'] = { xSplit: 0, ySplit: 1 };

  XLSX.utils.book_append_sheet(wb, ws, '–¢–µ–Ω–¥–µ—Ä—ã');
  XLSX.writeFile(wb, fileName);

  console.log('‚úÖ [exportTendersToExcel] Export completed:', fileName);
};

/**
 * Export BOQ positions with items to Excel in hierarchical structure
 */
export const exportBOQToExcel = async (
  positions: any[],
  boqItemsMap: Map<string, any[]>,
  tenderName: string
) => {
  console.log('üöÄ [exportBOQToExcel] Starting export with', positions.length, 'positions');

  const exportData: any[] = [];
  const rowStyles: any[] = []; // Store styles for each row

  // Helper functions for translation
  const translateItemType = (type: string): string => {
    const types: Record<string, string> = {
      'work': '–†–∞–±–æ—Ç–∞',
      'material': '–ú–∞—Ç–µ—Ä–∏–∞–ª',
      'sub_work': '–°—É–±-—Ä–∞–±',
      'sub_material': '–°—É–±-–º–∞—Ç'
    };
    return types[type] || type || '';
  };

  const translateMaterialType = (type: string): string => {
    const types: Record<string, string> = {
      'main': '–û—Å–Ω–æ–≤–Ω–æ–π',
      'auxiliary': '–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π',
      'consumable': '–†–∞—Å—Ö–æ–¥–Ω—ã–π',
      'tool': '–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç',
      'equipment': '–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ'
    };
    return types[type] || type || '';
  };

  const translateDeliveryType = (type: string): string => {
    const types: Record<string, string> = {
      'included': '–í —Ü–µ–Ω–µ',
      'not_included': '–ù–µ –≤ —Ü–µ–Ω–µ',
      'amount': '–§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è'
    };
    return types[type] || type || '';
  };

  // Recursive function to add position with its items and additional positions
  const addPositionWithItems = (position: any, level: number = 0) => {
    // Add client position row
    exportData.push({
      '–ù–æ–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏': position.item_no || '',
      '‚Ññ –ø/–ø': position.position_number || '',
      '–ö–∞—Ç–µ–≥–æ—Ä–∏—è –∑–∞—Ç—Ä–∞—Ç': '', // Empty for client positions
      '–¢–∏–ø —ç–ª–µ–º–µ–Ω—Ç–∞': '',
      '–¢–∏–ø –º–∞—Ç–µ—Ä–∏–∞–ª–∞': '',
      '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ': position.work_name, // No indentation
      '–ï–¥. –∏–∑–º.': position.unit || '',
      '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑—á–∏–∫–∞': position.volume || '',
      '–ö–æ—ç—Ñ—Ñ. –ø–µ—Ä–µ–≤–æ–¥–∞': '',
      '–ö–æ—ç—Ñ—Ñ. —Ä–∞—Å—Ö–æ–¥–∞': '',
      '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ì–ü': position.manual_volume || '',
      '–í–∞–ª—é—Ç–∞': '',
      '–¢–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏': '',
      '–°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏': '',
      '–¶–µ–Ω–∞ –∑–∞ –µ–¥–∏–Ω–∏—Ü—É': '',
      '–ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞': Math.round((position.total_materials_cost || 0) + (position.total_works_cost || 0)),
      '–°—Å—ã–ª–∫–∞ –Ω–∞ –ö–ü': '',
      '–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ –∑–∞–∫–∞–∑—á–∏–∫–∞': position.client_note || '',
      '–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ –ì–ü': position.manual_note || ''
    });

    // Get and sort BOQ items for this position
    const items = boqItemsMap.get(position.id) || [];
    const sortedItems = [...items].sort((a, b) => {
      if (a.sort_order !== b.sort_order) {
        return (a.sort_order || 0) - (b.sort_order || 0);
      }
      return (a.item_number || '').localeCompare(b.item_number || '');
    });

    // Add each BOQ item
    sortedItems.forEach(item => {
      // For work and sub_work types, material_type should be empty
      const materialType = (item.item_type === 'work' || item.item_type === 'sub_work')
        ? ''
        : translateMaterialType(item.material_type);

      // Track row index and type for styling
      const rowIndex = exportData.length;
      rowStyles[rowIndex] = item.item_type;

      exportData.push({
        '–ù–æ–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏': '',
        '‚Ññ –ø/–ø': '',
        '–ö–∞—Ç–µ–≥–æ—Ä–∏—è –∑–∞—Ç—Ä–∞—Ç': '', // Will be filled after export data is complete
        '–¢–∏–ø —ç–ª–µ–º–µ–Ω—Ç–∞': translateItemType(item.item_type),
        '–¢–∏–ø –º–∞—Ç–µ—Ä–∏–∞–ª–∞': materialType,
        '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ': item.description, // No indentation
        '–ï–¥. –∏–∑–º.': item.unit,
        '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑—á–∏–∫–∞': '', // Empty for BOQ items
        '–ö–æ—ç—Ñ—Ñ. –ø–µ—Ä–µ–≤–æ–¥–∞': item.conversion_coefficient || '',
        '–ö–æ—ç—Ñ—Ñ. —Ä–∞—Å—Ö–æ–¥–∞': item.consumption_coefficient || '',
        '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ì–ü': item.quantity,
        '–í–∞–ª—é—Ç–∞': item.currency_type || 'RUB',
        '–¢–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏': translateDeliveryType(item.delivery_price_type),
        '–°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏': Math.round(item.delivery_amount || 0),
        '–¶–µ–Ω–∞ –∑–∞ –µ–¥–∏–Ω–∏—Ü—É': Math.round(item.unit_rate || 0),
        '–ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞': Math.round(item.total_amount || 0),
        '–°—Å—ã–ª–∫–∞ –Ω–∞ –ö–ü': item.quote_link || '',
        '–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ –∑–∞–∫–∞–∑—á–∏–∫–∞': '', // Empty for BOQ items
        '–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ –ì–ü': item.note || ''
      });
    });

    // Add additional positions (–î–û–ü) from the position's additional_works property
    // This handles –î–û–ü positions for all position types, not just executable
    if (position.additional_works && Array.isArray(position.additional_works)) {
      const sortedAdditional = [...position.additional_works].sort((a, b) => a.position_number - b.position_number);

      sortedAdditional.forEach(addPos => {
        // Mark as –î–û–ü position by modifying the item_no
        const dopPosition = {
          ...addPos,
          item_no: `${position.item_no || ''}.–î–û–ü.${addPos.position_number - position.position_number}`
        };
        addPositionWithItems(dopPosition, level + 1);
      });
    }

    // Also check for additional positions in the main positions list (for fallback compatibility)
    // This ensures we don't miss any –î–û–ü positions if data structure is different
    const additionalPositions = positions.filter(p =>
      p.parent_position_id === position.id &&
      p.is_additional === true
    );

    if (additionalPositions.length > 0) {
      const sortedAdditional = [...additionalPositions].sort((a, b) => a.position_number - b.position_number);

      sortedAdditional.forEach(addPos => {
        // Skip if already processed from additional_works
        if (position.additional_works && position.additional_works.some(aw => aw.id === addPos.id)) {
          return;
        }

        // Mark as –î–û–ü position by modifying the item_no
        const dopPosition = {
          ...addPos,
          item_no: `${position.item_no || ''}.–î–û–ü.${addPos.position_number - position.position_number}`
        };
        addPositionWithItems(dopPosition, level + 1);
      });
    }
  };

  // Process only main positions (without parent_position_id)
  const mainPositions = positions
    .filter(p => !p.parent_position_id)
    .sort((a, b) => a.position_number - b.position_number);

  console.log('üìä [exportBOQToExcel] Processing', mainPositions.length, 'main positions');

  mainPositions.forEach(position => {
    addPositionWithItems(position, 0);
  });

  // Load cost categories for all BOQ items
  console.log('üîÑ [exportBOQToExcel] Loading cost categories...');
  const categoryPromises: Promise<void>[] = [];
  const categoryCache = new Map<string, string>();

  exportData.forEach((row, index) => {
    // Check if this row has a BOQ item with detail_cost_category_id
    const boqItem = Array.from(boqItemsMap.values())
      .flat()
      .find(item => item.description === row['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ']?.trim());

    if (boqItem?.detail_cost_category_id) {
      if (!categoryCache.has(boqItem.detail_cost_category_id)) {
        categoryPromises.push(
          getDetailCategoryDisplay(boqItem.detail_cost_category_id).then(result => {
            if (result.data) {
              categoryCache.set(boqItem.detail_cost_category_id, result.data);
            }
          })
        );
      }
    }
  });

  await Promise.all(categoryPromises);

  // Update export data with categories
  exportData.forEach((row, index) => {
    const boqItem = Array.from(boqItemsMap.values())
      .flat()
      .find(item => item.description === row['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ']?.trim());

    if (boqItem?.detail_cost_category_id && categoryCache.has(boqItem.detail_cost_category_id)) {
      row['–ö–∞—Ç–µ–≥–æ—Ä–∏—è –∑–∞—Ç—Ä–∞—Ç'] = categoryCache.get(boqItem.detail_cost_category_id) || '';
    }
  });

  // Create Excel workbook
  const wb = XLSX.utils.book_new();
  const ws = XLSX.utils.json_to_sheet(exportData);

  // Apply color styling based on item type
  const range = XLSX.utils.decode_range(ws['!ref'] || 'A1');

  // Define colors for each item type (matching the UI)
  const itemTypeColors = {
    'work': { rgb: 'FED7AA' },       // Orange
    'material': { rgb: 'BFDBFE' },   // Blue
    'sub_work': { rgb: 'E9D5FF' },   // Purple
    'sub_material': { rgb: 'BBF7D0' } // Green
  };

  // Apply styles to rows based on BOQ item type
  for (let row = 1; row <= range.e.r; row++) { // Skip header row
    const itemType = rowStyles[row - 1]; // Adjust for header offset

    if (itemType && itemTypeColors[itemType]) {
      const bgColor = itemTypeColors[itemType];

      // Apply style to all cells in the row
      for (let col = 0; col <= range.e.c; col++) {
        const cellAddress = XLSX.utils.encode_cell({ r: row, c: col });
        const cell = ws[cellAddress];

        if (cell) {
          if (!cell.s) cell.s = {};
          cell.s.fill = {
            fgColor: bgColor,
            patternType: 'solid'
          };
        }
      }
    }
  }

  // Set column widths according to new order
  ws['!cols'] = [
    { wch: 12 },  // –ù–æ–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏
    { wch: 8 },   // ‚Ññ –ø/–ø
    { wch: 25 },  // –ö–∞—Ç–µ–≥–æ—Ä–∏—è –∑–∞—Ç—Ä–∞—Ç
    { wch: 15 },  // –¢–∏–ø —ç–ª–µ–º–µ–Ω—Ç–∞
    { wch: 15 },  // –¢–∏–ø –º–∞—Ç–µ—Ä–∏–∞–ª–∞
    { wch: 50 },  // –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ
    { wch: 10 },  // –ï–¥. –∏–∑–º.
    { wch: 15 },  // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑—á–∏–∫–∞
    { wch: 12 },  // –ö–æ—ç—Ñ—Ñ. –ø–µ—Ä–µ–≤–æ–¥–∞
    { wch: 12 },  // –ö–æ—ç—Ñ—Ñ. —Ä–∞—Å—Ö–æ–¥–∞
    { wch: 15 },  // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ì–ü
    { wch: 8 },   // –í–∞–ª—é—Ç–∞
    { wch: 15 },  // –¢–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏
    { wch: 15 },  // –°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏
    { wch: 15 },  // –¶–µ–Ω–∞ –∑–∞ –µ–¥–∏–Ω–∏—Ü—É
    { wch: 15 },  // –ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞
    { wch: 30 },  // –°—Å—ã–ª–∫–∞ –Ω–∞ –ö–ü
    { wch: 25 },  // –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ –∑–∞–∫–∞–∑—á–∏–∫–∞
    { wch: 25 }   // –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ –ì–ü
  ];

  // Freeze header row
  ws['!freeze'] = { xSplit: 0, ySplit: 1 };

  // Add worksheet to workbook
  XLSX.utils.book_append_sheet(wb, ws, 'BOQ');

  // Generate filename
  const safeFileName = tenderName.replace(/[^–∞-—è–ê-–Øa-zA-Z0-9\s]/g, '_').trim();
  const fileName = `BOQ_${safeFileName}_${new Date().toISOString().split('T')[0]}.xlsx`;

  // Write file
  XLSX.writeFile(wb, fileName);

  console.log('‚úÖ [exportBOQToExcel] Export completed:', fileName);
  console.log('üìä [exportBOQToExcel] Exported', exportData.length, 'rows total');
};