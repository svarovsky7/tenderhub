import { useState, useCallback } from 'react';
import { message } from 'antd';
import { boqApi, workMaterialLinksApi } from '../lib/supabase/api';
import { boqBulkApi } from '../lib/supabase/api/boq/bulk';
import type { BOQItemWithLibrary } from '../lib/supabase/types';
import type { WorkMaterialLink } from '../lib/supabase/api/work-material-links';

interface PositionClipboardData {
  items: BOQItemWithLibrary[];
  links: WorkMaterialLink[];
  sourcePositionId: string;
  itemsCount: number;
  linksCount: number;
}

interface UsePositionClipboardProps {
  tenderId: string;
  onUpdate: (positionId: string) => Promise<void>; // Accepts position ID for optimized updates
}

/**
 * Custom hook –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±—É—Ñ–µ—Ä–æ–º –æ–±–º–µ–Ω–∞ –ø–æ–∑–∏—Ü–∏–π
 * –ü–æ–∑–≤–æ–ª—è–µ—Ç –∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ–¥–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏ –∏ –≤—Å—Ç–∞–≤–ª—è—Ç—å –≤ –¥—Ä—É–≥—É—é
 */
export const usePositionClipboard = ({ tenderId, onUpdate }: UsePositionClipboardProps) => {
  const [clipboardData, setClipboardData] = useState<PositionClipboardData | null>(null);
  const [loadingPositions, setLoadingPositions] = useState<Set<string>>(new Set());

  /**
   * –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–æ–∑–∏—Ü–∏–∏ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
   */
  const handleCopy = useCallback(async (positionId: string) => {
    console.log('üöÄ [usePositionClipboard] Starting copy for position:', positionId);
    setLoadingPositions(prev => new Set(prev).add(positionId));

    try {
      // 1. –ó–∞–≥—Ä—É–∑–∏—Ç—å –≤—Å–µ BOQ items –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏
      console.log('üì° Loading BOQ items...');
      const { data: items, error: itemsError } = await boqApi.getByPosition(positionId);

      if (itemsError) {
        console.error('‚ùå Failed to load BOQ items:', itemsError);
        message.error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: ${itemsError}`);
        return;
      }

      if (!items || items.length === 0) {
        console.log('üì≠ No items found in position');
        message.warning('–ü–æ–∑–∏—Ü–∏—è –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è');
        return;
      }

      console.log(`‚úÖ Loaded ${items.length} BOQ items`);

      // 2. –ó–∞–≥—Ä—É–∑–∏—Ç—å –≤—Å–µ work_material_links –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏
      console.log('üì° Loading work-material links...');
      const { data: links, error: linksError } = await workMaterialLinksApi.getLinksByPosition(positionId);

      if (linksError) {
        console.error('‚ùå Failed to load links:', linksError);
        message.error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–≤—è–∑–µ–π: ${linksError}`);
        return;
      }

      const linksArray = links || [];
      console.log(`‚úÖ Loaded ${linksArray.length} work-material links`);

      // 3. –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ clipboard state
      const clipboardContent: PositionClipboardData = {
        items,
        links: linksArray,
        sourcePositionId: positionId,
        itemsCount: items.length,
        linksCount: linksArray.length
      };

      setClipboardData(clipboardContent);

      console.log('‚úÖ Content copied to clipboard:', {
        items: items.length,
        links: linksArray.length,
        sourcePositionId: positionId
      });

      message.success(
        `–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ: ${items.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤${linksArray.length > 0 ? `, ${linksArray.length} —Å–≤—è–∑–µ–π` : ''}`
      );
    } catch (error) {
      console.error('üí• Exception in handleCopy:', error);
      message.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –ø–æ–∑–∏—Ü–∏–∏');
    } finally {
      setLoadingPositions(prev => {
        const newSet = new Set(prev);
        newSet.delete(positionId);
        return newSet;
      });
    }
  }, []); // Empty deps - doesn't depend on any props

  /**
   * –í—Å—Ç–∞–≤–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∏–∑ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞ –≤ —Ü–µ–ª–µ–≤—É—é –ø–æ–∑–∏—Ü–∏—é
   */
  const handlePaste = useCallback(async (targetPositionId: string) => {
    console.log('üöÄ [usePositionClipboard] Starting paste to position:', targetPositionId);

    if (!clipboardData) {
      console.error('‚ùå No clipboard data available');
      message.warning('–ë—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞ –ø—É—Å—Ç. –°–Ω–∞—á–∞–ª–∞ —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–æ–∑–∏—Ü–∏–∏.');
      return;
    }

    // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –≤—Å—Ç–∞–≤–∫—É –≤ —Ç—É –∂–µ –ø–æ–∑–∏—Ü–∏—é
    if (targetPositionId === clipboardData.sourcePositionId) {
      console.log('‚ö†Ô∏è Attempting to paste into source position');
      message.warning('–ù–µ–ª—å–∑—è –≤—Å—Ç–∞–≤–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤ —Ç—É –∂–µ –ø–æ–∑–∏—Ü–∏—é');
      return;
    }

    setLoadingPositions(prev => new Set(prev).add(targetPositionId));

    try {
      console.log('üì¶ Preparing items for paste:', {
        sourcePosition: clipboardData.sourcePositionId,
        targetPosition: targetPositionId,
        itemsCount: clipboardData.itemsCount,
        linksCount: clipboardData.linksCount
      });

      // 1. –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å items –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ (—É–±—Ä–∞—Ç—å id, item_number, sub_number –∏ –≤—ã—á–∏—Å–ª—è–µ–º—ã–µ –ø–æ–ª—è)
      const itemsToPaste = clipboardData.items.map(item => {
        const {
          id,
          item_number,
          sub_number,
          client_position_id,
          created_at,
          updated_at,
          imported_at,
          cost_category_display, // –í—ã—á–∏—Å–ª—è–µ–º–æ–µ –ø–æ–ª–µ - —É–±–∏—Ä–∞–µ–º
          cost_node_display, // –í—ã—á–∏—Å–ª—è–µ–º–æ–µ –ø–æ–ª–µ - —É–±–∏—Ä–∞–µ–º
          ...rest
        } = item;

        return {
          ...rest,
          client_position_id: targetPositionId,
          tender_id: tenderId,
          // sort_order —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –ø–æ—Ä—è–¥–∫–∞!
        };
      });

      console.log('üìã First prepared item:', itemsToPaste[0]);

      // 2. –°–æ–∑–¥–∞—Ç—å mapping: –∏–Ω–¥–µ–∫—Å –º–∞—Å—Å–∏–≤–∞ ‚Üí —Å—Ç–∞—Ä—ã–π ID (–¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è links)
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω–¥–µ–∫—Å –≤–º–µ—Å—Ç–æ sort_order, —Ç–∞–∫ –∫–∞–∫ sort_order –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –≤—Å—Ç–∞–≤–∫–µ
      const indexToOldId = new Map(
        clipboardData.items.map((item, index) => [index, item.id])
      );

      console.log('üó∫Ô∏è Created index ‚Üí oldId mapping:', indexToOldId.size, 'entries');

      // 3. –í—Å—Ç–∞–≤–∏—Ç—å items —á–µ—Ä–µ–∑ bulkCreateInPosition
      console.log('üíæ Inserting items via bulkCreateInPosition...');
      const { data: insertedCount, error: insertError } = await boqBulkApi.bulkCreateInPosition(
        targetPositionId,
        itemsToPaste
      );

      if (insertError) {
        console.error('‚ùå Failed to insert items:', insertError);
        message.error(`–û—à–∏–±–∫–∞ –≤—Å—Ç–∞–≤–∫–∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: ${insertError}`);
        return;
      }

      console.log(`‚úÖ Inserted ${insertedCount} items`);

      // 4. –ó–∞–≥—Ä—É–∑–∏—Ç—å –¢–û–õ–¨–ö–û –≤—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ items –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Ö –Ω–æ–≤—ã—Ö ID
      // –ü—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –≤—Å—Ç–∞–≤–∫–µ –≤ –ø–æ–∑–∏—Ü–∏–∏ –±—É–¥—É—Ç —Å—Ç–∞—Ä—ã–µ + –Ω–æ–≤—ã–µ items
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º created_at –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –≤—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö
      console.log('üì° Loading inserted items to get new IDs...');
      const { data: allItems, error: loadError } = await boqApi.getByPosition(targetPositionId);

      if (loadError || !allItems) {
        console.error('‚ùå Failed to load inserted items:', loadError);
        message.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤');
        return;
      }

      // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ created_at DESC –∏ –±–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –≤—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ
      const newItems = allItems
        .sort((a, b) => new Date(b.created_at).getTime() - new Date(a.created_at).getTime())
        .slice(0, insertedCount);

      console.log('üìã Filtered to last inserted items:', {
        totalItems: allItems.length,
        insertedCount,
        newItemsCount: newItems.length
      });

      // –°–æ—Ä—Ç–∏—Ä—É–µ–º newItems –ø–æ sub_number, —á—Ç–æ–±—ã –∏–Ω–¥–µ–∫—Å—ã —Å–æ–≤–ø–∞–¥–∞–ª–∏ —Å –ø–æ—Ä—è–¥–∫–æ–º –≤—Å—Ç–∞–≤–∫–∏
      newItems.sort((a, b) => a.sub_number - b.sub_number);

      console.log('üìã Sorted new items by sub_number:', {
        firstSubNumber: newItems[0]?.sub_number,
        lastSubNumber: newItems[newItems.length - 1]?.sub_number
      });

      // 5. –°–æ–∑–¥–∞—Ç—å mapping: —Å—Ç–∞—Ä—ã–π ID ‚Üí –Ω–æ–≤—ã–π ID (—á–µ—Ä–µ–∑ –∏–Ω–¥–µ–∫—Å –º–∞—Å—Å–∏–≤–∞)
      const oldIdToNewId = new Map<string, string>();

      newItems.forEach((newItem, index) => {
        const oldId = indexToOldId.get(index);
        if (oldId) {
          oldIdToNewId.set(oldId, newItem.id);
          console.log(`üîó Mapping: index ${index}, oldId ${oldId.substring(0, 8)}... ‚Üí newId ${newItem.id.substring(0, 8)}...`);
        }
      });

      console.log('üó∫Ô∏è Created oldId ‚Üí newId mapping:', oldIdToNewId.size, 'entries');

      // 6. –°–æ–∑–¥–∞—Ç—å links —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ ID (–±–µ–∑ —É–¥–∞–ª–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö) - –ü–ê–†–ê–õ–õ–ï–õ–¨–ù–û
      if (clipboardData.links.length > 0) {
        console.log(`üîó Creating ${clipboardData.links.length} work-material links in parallel...`);

        // –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –ø—Ä–æ–º–∏—Å—ã –¥–ª—è –≤—Å–µ—Ö links
        const linkPromises = clipboardData.links.map(async (link) => {
          const {
            id,
            created_at,
            updated_at,
            work_boq_item_id,
            material_boq_item_id,
            sub_work_boq_item_id,
            sub_material_boq_item_id,
            ...linkData
          } = link;

          // –û–±–Ω–æ–≤–ª—è–µ–º ID —Ä–∞–±–æ—Ç—ã –∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –Ω–∞ –Ω–æ–≤—ã–µ
          const newWorkId = work_boq_item_id ? oldIdToNewId.get(work_boq_item_id) : null;
          const newMaterialId = material_boq_item_id ? oldIdToNewId.get(material_boq_item_id) : null;
          const newSubWorkId = sub_work_boq_item_id ? oldIdToNewId.get(sub_work_boq_item_id) : null;
          const newSubMaterialId = sub_material_boq_item_id ? oldIdToNewId.get(sub_material_boq_item_id) : null;

          // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ ID
          if (
            (work_boq_item_id && !newWorkId) ||
            (material_boq_item_id && !newMaterialId) ||
            (sub_work_boq_item_id && !newSubWorkId) ||
            (sub_material_boq_item_id && !newSubMaterialId)
          ) {
            console.warn('‚ö†Ô∏è Skipping link - could not find new ID for work or material:', {
              oldWorkId: work_boq_item_id,
              oldMaterialId: material_boq_item_id,
              oldSubWorkId: sub_work_boq_item_id,
              oldSubMaterialId: sub_material_boq_item_id,
              newWorkId,
              newMaterialId,
              newSubWorkId,
              newSubMaterialId
            });
            return { success: false, error: 'Missing ID mapping' };
          }

          const newLink: WorkMaterialLink = {
            ...linkData,
            client_position_id: targetPositionId,
            work_boq_item_id: newWorkId || undefined,
            material_boq_item_id: newMaterialId || undefined,
            sub_work_boq_item_id: newSubWorkId || undefined,
            sub_material_boq_item_id: newSubMaterialId || undefined,
          };

          try {
            const { error: linkError } = await workMaterialLinksApi.createLink(newLink);
            if (linkError) {
              console.error('‚ùå Failed to create link:', linkError, newLink);
              return { success: false, error: linkError };
            }
            return { success: true };
          } catch (error) {
            console.error('üí• Exception creating link:', error);
            return { success: false, error };
          }
        });

        // –í—ã–ø–æ–ª–Ω–∏—Ç—å –≤—Å–µ –ø—Ä–æ–º–∏—Å—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        const results = await Promise.all(linkPromises);

        // –ü–æ–¥—Å—á–∏—Ç–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        const successfulLinksCount = results.filter(r => r.success).length;
        const failedLinksCount = results.filter(r => !r.success).length;

        console.log(`‚úÖ Created ${successfulLinksCount} links, failed: ${failedLinksCount}`);
      }

      console.log('‚úÖ Paste operation completed successfully');
      message.success(
        `–í—Å—Ç–∞–≤–ª–µ–Ω–æ: ${insertedCount} —ç–ª–µ–º–µ–Ω—Ç–æ–≤${clipboardData.links.length > 0 ? `, ${clipboardData.links.length} —Å–≤—è–∑–µ–π` : ''}`
      );

      // –°–±—Ä–æ—Å–∏—Ç—å loading –ü–ï–†–ï–î –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º –ø–æ–∑–∏—Ü–∏–∏, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
      setLoadingPositions(prev => {
        const newSet = new Set(prev);
        newSet.delete(targetPositionId);
        return newSet;
      });

      // 8. –û–±–Ω–æ–≤–∏—Ç—å —Ü–µ–ª–µ–≤—É—é –ø–æ–∑–∏—Ü–∏—é –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
      console.log('üîÑ Refreshing target position...');
      await onUpdate(targetPositionId);
    } catch (error) {
      console.error('üí• Exception in handlePaste:', error);
      message.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Å—Ç–∞–≤–∫–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –ø–æ–∑–∏—Ü–∏–∏');
      setLoadingPositions(prev => {
        const newSet = new Set(prev);
        newSet.delete(targetPositionId);
        return newSet;
      });
    }
  }, [clipboardData, tenderId, onUpdate]); // Include all dependencies

  /**
   * –û—á–∏—Å—Ç–∏—Ç—å –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
   */
  const clearClipboard = useCallback(() => {
    console.log('üóëÔ∏è [usePositionClipboard] Clearing clipboard');
    setClipboardData(null);
  }, []);

  // Helper function to check if a specific position is loading
  const isPositionLoading = useCallback((positionId: string) => {
    return loadingPositions.has(positionId);
  }, [loadingPositions]);

  return {
    clipboardData,
    hasCopiedData: clipboardData !== null,
    copiedItemsCount: clipboardData?.itemsCount || 0,
    copiedLinksCount: clipboardData?.linksCount || 0,
    copiedFromPositionId: clipboardData?.sourcePositionId || null,
    isPositionLoading,
    handleCopy,
    handlePaste,
    clearClipboard
  };
};
