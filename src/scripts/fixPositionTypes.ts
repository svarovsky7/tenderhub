/**
 * Script to fix position types in –ñ–ö –ê–¥–º–∏—Ä–∞–ª tender
 * Sets proper item_type values based on position numbers and names
 */
import { createClient } from '@supabase/supabase-js';
import * as dotenv from 'dotenv';
import * as path from 'path';

// Load environment variables
dotenv.config({ path: path.resolve(process.cwd(), '.env.local') });

const supabaseUrl = process.env.VITE_SUPABASE_URL;
const supabaseAnonKey = process.env.VITE_SUPABASE_ANON_KEY;

if (!supabaseUrl || !supabaseAnonKey) {
  console.error('‚ùå Missing required environment variables');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseAnonKey);

async function fixPositionTypes() {
  const tenderId = '736dc11c-33dc-4fce-a7ee-c477abb8b694'; // –ñ–ö –ê–¥–º–∏—Ä–∞–ª

  console.log('üîç –ê–Ω–∞–ª–∏–∑ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ –ø–æ–∑–∏—Ü–∏–π –¥–ª—è —Ç–µ–Ω–¥–µ—Ä–∞ –ñ–ö –ê–¥–º–∏—Ä–∞–ª\n');

  // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–æ–∑–∏—Ü–∏–∏ —Ç–µ–Ω–¥–µ—Ä–∞
  const { data: positions, error } = await supabase
    .from('client_positions')
    .select('*')
    .eq('tender_id', tenderId)
    .order('position_number');

  if (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π:', error);
    return;
  }

  console.log(`üìã –ù–∞–π–¥–µ–Ω–æ ${positions?.length || 0} –ø–æ–∑–∏—Ü–∏–π\n`);

  // –ü—Ä–∞–≤–∏–ª–∞ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
  const subWorkKeywords = [
    '—Å—É–±-—Ä–∞–±',
    '—Å—É–±–ø–æ–¥—Ä—è–¥',
    'subcontract',
    '–º–æ–Ω—Ç–∞–∂',
    '—É—Å—Ç–∞–Ω–æ–≤–∫–∞',
    '—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –≥—Ä—É–Ω—Ç–∞',
    '–¥–µ–º–æ–Ω—Ç–∞–∂',
    '—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ',
    '–ø—Ä–æ–∫–ª–∞–¥–∫–∞',
    '–±—É—Ä–µ–Ω–∏–µ'
  ];

  const subMaterialKeywords = [
    '—Å—É–±-–º–∞—Ç',
    '—Å—É–±–ø–æ–¥—Ä—è–¥–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã',
    '–º–∞—Ç–µ—Ä–∏–∞–ª—ã —Å—É–±–ø–æ–¥—Ä—è–¥–∞',
    '–ø–æ—Å—Ç–∞–≤–∫–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤'
  ];

  const workKeywords = [
    '—Ä–∞–±–æ—Ç—ã',
    '—É—Å–ª—É–≥–∏',
    '–≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ',
    '–∏–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ',
    '–ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞'
  ];

  let updateCount = 0;
  const updates: Array<{ id: string; type: string; position: number; name: string }> = [];

  for (const position of positions || []) {
    const name = (position.work_name || '').toLowerCase();
    const currentType = position.item_type;
    let newType: string | null = null;

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
    if (subWorkKeywords.some(keyword => name.includes(keyword))) {
      newType = 'sub_work';
    } else if (subMaterialKeywords.some(keyword => name.includes(keyword))) {
      newType = 'sub_material';
    } else if (workKeywords.some(keyword => name.includes(keyword))) {
      newType = 'work';
    } else {
      // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å—á–∏—Ç–∞–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª–æ–º, –µ—Å–ª–∏ –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –ø–æ–¥ –¥—Ä—É–≥–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
      newType = 'material';
    }

    // –û—Å–æ–±—ã–µ —Å–ª—É—á–∞–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–æ–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏
    // –ù–∞–ø—Ä–∏–º–µ—Ä, –ø–æ–∑–∏—Ü–∏–∏ 100-200 - —Å—É–±–ø–æ–¥—Ä—è–¥–Ω—ã–µ —Ä–∞–±–æ—Ç—ã
    if (position.position_number >= 100 && position.position_number <= 200) {
      if (newType === 'work' || newType === 'material') {
        newType = 'sub_work'; // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Å—É–±–ø–æ–¥—Ä—è–¥–Ω—ã–µ
      }
    }

    // –ï—Å–ª–∏ —Ç–∏–ø –∏–∑–º–µ–Ω–∏–ª—Å—è –∏–ª–∏ –±—ã–ª NULL
    if (currentType !== newType) {
      updates.push({
        id: position.id,
        type: newType,
        position: position.position_number,
        name: position.work_name
      });
    }
  }

  console.log(`üîÑ –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–±–Ω–æ–≤–∏—Ç—å ${updates.length} –ø–æ–∑–∏—Ü–∏–π:\n`);

  // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ç–∏–ø–∞–º –¥–ª—è –æ—Ç—á–µ—Ç–∞
  const typeGroups = updates.reduce((acc, update) => {
    if (!acc[update.type]) acc[update.type] = [];
    acc[update.type].push(update);
    return acc;
  }, {} as Record<string, typeof updates>);

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–æ
  for (const [type, items] of Object.entries(typeGroups)) {
    console.log(`üìå ${type} (${items.length} –ø–æ–∑–∏—Ü–∏–π):`);
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 –ø—Ä–∏–º–µ—Ä–æ–≤
    items.slice(0, 5).forEach(item => {
      console.log(`   ‚Ññ${item.position}: ${item.name.substring(0, 50)}...`);
    });
    if (items.length > 5) {
      console.log(`   ... –∏ –µ—â–µ ${items.length - 5} –ø–æ–∑–∏—Ü–∏–π`);
    }
    console.log('');
  }

  // –í—ã–ø–æ–ª–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
  console.log('‚ö° –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –≤ –ë–î...\n');

  for (const update of updates) {
    const { error: updateError } = await supabase
      .from('client_positions')
      .update({ item_type: update.type })
      .eq('id', update.id);

    if (updateError) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏ ${update.position}:`, updateError);
    } else {
      updateCount++;
      if (updateCount % 50 === 0) {
        console.log(`   –û–±–Ω–æ–≤–ª–µ–Ω–æ ${updateCount}/${updates.length} –ø–æ–∑–∏—Ü–∏–π...`);
      }
    }
  }

  console.log(`\n‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ ${updateCount} –ø–æ–∑–∏—Ü–∏–π`);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
  console.log('\nüìä –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–∏–ø–æ–≤:');

  const { data: finalStats, error: statsError } = await supabase
    .from('client_positions')
    .select('item_type')
    .eq('tender_id', tenderId);

  if (!statsError && finalStats) {
    const typeCounts = finalStats.reduce((acc, item) => {
      const type = item.item_type || 'NULL';
      acc[type] = (acc[type] || 0) + 1;
      return acc;
    }, {} as Record<string, number>);

    for (const [type, count] of Object.entries(typeCounts)) {
      console.log(`   ${type}: ${count} –ø–æ–∑–∏—Ü–∏–π`);
    }
  }

  // –û—Å–æ–±–æ–µ –≤–Ω–∏–º–∞–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ 117
  const { data: position117, error: pos117Error } = await supabase
    .from('client_positions')
    .select('*')
    .eq('tender_id', tenderId)
    .eq('position_number', 117)
    .single();

  if (!pos117Error && position117) {
    console.log('\nüéØ –ü–æ–∑–∏—Ü–∏—è 117 (–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –≥—Ä—É–Ω—Ç–∞):');
    console.log(`   –¢–∏–ø: ${position117.item_type}`);
    console.log(`   –ë–∞–∑–∞: ${parseFloat(position117.total_works_cost || '0').toLocaleString('ru-RU')} ‚ÇΩ`);
    console.log(`   –ö–æ–º–º–µ—Ä—á–µ—Å–∫–∞—è: ${parseFloat(position117.total_commercial_works_cost || '0').toLocaleString('ru-RU')} ‚ÇΩ`);
  }
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
fixPositionTypes()
  .then(() => {
    console.log('\n‚úÖ –°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ');
    console.log('\nüìå –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:');
    console.log('   1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø–µ—Ä–µ—Å—á–µ—Ç –∫–æ–º–º–µ—Ä—á–µ—Å–∫–∏—Ö —Å—Ç–æ–∏–º–æ—Å—Ç–µ–π');
    console.log('   2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∫–æ–º–º–µ—Ä—á–µ—Å–∫–∏—Ö —Å—Ç–æ–∏–º–æ—Å—Ç–µ–π');
    process.exit(0);
  })
  .catch((error) => {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
  });