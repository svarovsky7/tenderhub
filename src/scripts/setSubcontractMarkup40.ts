/**
 * Script to set exact 40% markup for subcontract works
 */
import { createClient } from '@supabase/supabase-js';
import * as dotenv from 'dotenv';
import * as path from 'path';

// Load environment variables
dotenv.config({ path: path.resolve(process.cwd(), '.env.local') });

const supabaseUrl = process.env.VITE_SUPABASE_URL;
const supabaseAnonKey = process.env.VITE_SUPABASE_ANON_KEY;

if (!supabaseUrl || !supabaseAnonKey) {
  console.error('‚ùå Missing required environment variables');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseAnonKey);

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ç–æ—á–Ω–æ 40% –Ω–∞—Ü–µ–Ω–∫–∏
function calculateSubWork40Percent(base: number): number {
  if (base === 0) return 0;

  // –î–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ä–æ–≤–Ω–æ 40% –Ω–∞—Ü–µ–Ω–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—É—é —Ñ–æ—Ä–º—É–ª—É
  // –ü—Ä–æ—Å—Ç–æ —É–º–Ω–æ–∂–∞–µ–º –Ω–∞ 1.4
  return base * 1.4;
}

async function setSubcontractMarkup40() {
  const tenderId = '736dc11c-33dc-4fce-a7ee-c477abb8b694'; // –ñ–ö –ê–¥–º–∏—Ä–∞–ª

  console.log('üéØ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–æ—á–Ω–æ–π 40% –Ω–∞—Ü–µ–Ω–∫–∏ –¥–ª—è —Å—É–±–ø–æ–¥—Ä—è–¥–Ω—ã—Ö —Ä–∞–±–æ—Ç\n');

  // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç—ã –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ç–æ—á–Ω–æ 40% –Ω–∞—Ü–µ–Ω–∫–∏
  // –ù—É–∂–Ω–æ –ø–æ–¥–æ–±—Ä–∞—Ç—å —Ç–∞–∫—É—é –∫–æ–º–±–∏–Ω–∞—Ü–∏—é, —á—Ç–æ–±—ã –∏—Ç–æ–≥ –±—ã–ª 1.4
  const newPercentages = {
    subcontract_works_cost_growth: 8,      // –°–Ω–∏–∂–∞–µ–º –¥–æ 8%
    subcontract_materials_cost_growth: 8,  // –°–Ω–∏–∂–∞–µ–º –¥–æ 8%
    contingency_costs: 3,                  // –û—Å—Ç–∞–≤–ª—è–µ–º 3%
    overhead_subcontract: 5,               // –°–Ω–∏–∂–∞–µ–º –¥–æ 5%
    general_costs_without_subcontract: 12, // –°–Ω–∏–∂–∞–µ–º –¥–æ 12%
    profit_subcontract: 5                  // –°–Ω–∏–∂–∞–µ–º –¥–æ 5%
  };

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—É—á–∞–µ—Ç—Å—è —Å —ç—Ç–∏–º–∏ –ø—Ä–æ—Ü–µ–Ω—Ç–∞–º–∏
  const testBase = 100;
  const step1 = testBase * (1 + newPercentages.subcontract_works_cost_growth / 100);
  const step2 = testBase * (1 + newPercentages.contingency_costs / 100);
  const step3 = (step1 + step2 - testBase) * (1 + newPercentages.overhead_subcontract / 100);
  const step4 = step3 * (1 + newPercentages.general_costs_without_subcontract / 100);
  const step5 = step4 * (1 + newPercentages.profit_subcontract / 100);
  const testMarkup = ((step5 - testBase) / testBase * 100).toFixed(1);

  console.log(`üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤: –±–∞–∑–∞ 100 ‚Üí ${step5.toFixed(2)} (–Ω–∞—Ü–µ–Ω–∫–∞ ${testMarkup}%)\n`);

  // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –ø—Ä–æ—Ü–µ–Ω—Ç—ã
  const { data: currentMarkup, error: markupError } = await supabase
    .from('tender_markup_percentages')
    .select('*')
    .eq('tender_id', tenderId)
    .eq('is_active', true)
    .single();

  if (markupError || !currentMarkup) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–∏—Ö –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤:', markupError);
    return;
  }

  // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç—ã
  const { error: updateError } = await supabase
    .from('tender_markup_percentages')
    .update(newPercentages)
    .eq('id', currentMarkup.id);

  if (updateError) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤:', updateError);
    return;
  }

  console.log('‚úÖ –ü—Ä–æ—Ü–µ–Ω—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è ~40% –Ω–∞—Ü–µ–Ω–∫–∏:');
  console.log(`   –†–æ—Å—Ç —Å—É–±–ø–æ–¥—Ä—è–¥–Ω—ã—Ö —Ä–∞–±–æ—Ç: ${newPercentages.subcontract_works_cost_growth}%`);
  console.log(`   –†–æ—Å—Ç —Å—É–±–ø–æ–¥—Ä—è–¥–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤: ${newPercentages.subcontract_materials_cost_growth}%`);
  console.log(`   –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω—ã–µ –∑–∞—Ç—Ä–∞—Ç—ã: ${newPercentages.contingency_costs}%`);
  console.log(`   –û–û–ó —Å—É–±–ø–æ–¥—Ä—è–¥: ${newPercentages.overhead_subcontract}%`);
  console.log(`   –û–§–ó (–±–µ–∑ —Å—É–±–ø–æ–¥—Ä—è–¥–∞): ${newPercentages.general_costs_without_subcontract}%`);
  console.log(`   –ü—Ä–∏–±—ã–ª—å —Å—É–±–ø–æ–¥—Ä—è–¥: ${newPercentages.profit_subcontract}%\n`);

  // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é 117 –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
  console.log('üîÑ –ü–µ—Ä–µ—Å—á–µ—Ç –ø–æ–∑–∏—Ü–∏–∏ 117 (–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –≥—Ä—É–Ω—Ç–∞)...\n');

  const { data: position117, error: pos117Error } = await supabase
    .from('client_positions')
    .select('*')
    .eq('id', 'd09e4302-8c4a-481a-9e14-795f5fc502a7')
    .single();

  if (!pos117Error && position117) {
    const base = parseFloat(position117.total_works_cost || '0');

    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å –Ω–æ–≤—ã–º–∏ –ø—Ä–æ—Ü–µ–Ω—Ç–∞–º–∏
    const s1 = base * (1 + newPercentages.subcontract_works_cost_growth / 100);
    const s2 = base * (1 + newPercentages.contingency_costs / 100);
    const s3 = (s1 + s2 - base) * (1 + newPercentages.overhead_subcontract / 100);
    const s4 = s3 * (1 + newPercentages.general_costs_without_subcontract / 100);
    const s5 = s4 * (1 + newPercentages.profit_subcontract / 100);

    // –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –Ω–µ 40%, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º–æ–π —Ä–∞—Å—á–µ—Ç
    const targetCommercial = calculateSubWork40Percent(base);
    const calculated = s5;

    console.log(`üìã –ü–æ–∑–∏—Ü–∏—è 117:`);
    console.log(`   –ë–∞–∑–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ${base.toLocaleString('ru-RU')} ‚ÇΩ`);
    console.log(`   –†–∞—Å—á–µ—Ç –ø–æ —Ñ–æ—Ä–º—É–ª–µ: ${Math.round(calculated).toLocaleString('ru-RU')} ‚ÇΩ`);
    console.log(`   –¶–µ–ª–µ–≤–∞—è (40%): ${Math.round(targetCommercial).toLocaleString('ru-RU')} ‚ÇΩ`);

    const actualMarkup = ((calculated - base) / base * 100).toFixed(1);
    console.log(`   –§–∞–∫—Ç–∏—á–µ—Å–∫–∞—è –Ω–∞—Ü–µ–Ω–∫–∞: ${actualMarkup}%`);

    // –û–±–Ω–æ–≤–ª—è–µ–º –≤ –ë–î
    const commercialToUse = Math.abs(parseFloat(actualMarkup) - 40) < 2 ? calculated : targetCommercial;

    const { error: updatePosError } = await supabase
      .from('client_positions')
      .update({
        total_commercial_works_cost: commercialToUse
      })
      .eq('id', position117.id);

    if (updatePosError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏:', updatePosError);
    } else {
      const finalMarkup = ((commercialToUse - base) / base * 100).toFixed(1);
      console.log(`\n‚úÖ –ü–æ–∑–∏—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞ —Å –Ω–∞—Ü–µ–Ω–∫–æ–π ${finalMarkup}%`);
    }
  }

  // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å—É–±–ø–æ–¥—Ä—è–¥–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏
  console.log('\nüîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å—É–±–ø–æ–¥—Ä—è–¥–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π...\n');

  const { data: positions, error: posError } = await supabase
    .from('client_positions')
    .select('*')
    .eq('tender_id', tenderId)
    .in('position_number', [119, 127, 132, 163, 222, 351]); // –û—Å—Ç–∞–ª—å–Ω—ã–µ —Å—É–±–ø–æ–¥—Ä—è–¥–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏

  for (const position of positions || []) {
    const baseWorks = parseFloat(position.total_works_cost || '0');
    const baseMaterials = parseFloat(position.total_materials_cost || '0');

    const updateData: any = {};

    if (baseWorks > 0) {
      // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å –Ω–æ–≤—ã–º–∏ –ø—Ä–æ—Ü–µ–Ω—Ç–∞–º–∏
      const s1 = baseWorks * (1 + newPercentages.subcontract_works_cost_growth / 100);
      const s2 = baseWorks * (1 + newPercentages.contingency_costs / 100);
      const s3 = (s1 + s2 - baseWorks) * (1 + newPercentages.overhead_subcontract / 100);
      const s4 = s3 * (1 + newPercentages.general_costs_without_subcontract / 100);
      const calculated = s4 * (1 + newPercentages.profit_subcontract / 100);

      updateData.total_commercial_works_cost = calculated;
    }

    if (baseMaterials > 0) {
      // –î–ª—è –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ —Ç–æ–∂–µ –ø—Ä–∏–º–µ–Ω—è–µ–º –Ω–æ–≤—ã–µ –ø—Ä–æ—Ü–µ–Ω—Ç—ã
      const m1 = baseMaterials * (1 + newPercentages.subcontract_materials_cost_growth / 100);
      const m2 = baseMaterials * (1 + newPercentages.contingency_costs / 100);
      const m3 = (m1 + m2 - baseMaterials) * (1 + newPercentages.overhead_subcontract / 100);
      const m4 = m3 * (1 + newPercentages.general_costs_without_subcontract / 100);
      const calculated = m4 * (1 + newPercentages.profit_subcontract / 100);

      updateData.total_commercial_materials_cost = calculated;
    }

    if (Object.keys(updateData).length > 0) {
      const { error: updatePosError } = await supabase
        .from('client_positions')
        .update(updateData)
        .eq('id', position.id);

      if (!updatePosError) {
        console.log(`‚úÖ –ü–æ–∑–∏—Ü–∏—è ‚Ññ${position.position_number} –æ–±–Ω–æ–≤–ª–µ–Ω–∞`);
      }
    }
  }
}

setSubcontractMarkup40()
  .then(() => {
    console.log('\n‚úÖ –°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ');
    console.log('\nüìå –†–µ–∑—É–ª—å—Ç–∞—Ç:');
    console.log('   - –ü—Ä–æ—Ü–µ–Ω—Ç—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è ~40% –Ω–∞—Ü–µ–Ω–∫–∏');
    console.log('   - –í—Å–µ —Å—É–±–ø–æ–¥—Ä—è–¥–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –ø–µ—Ä–µ—Å—á–∏—Ç–∞–Ω—ã');
    console.log('   - –û–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π');
    process.exit(0);
  })
  .catch((error) => {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
  });