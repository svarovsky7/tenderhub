import { supabase } from '../lib/supabase/client';

async function updateCommercialCostsFunction() {
  

// –ö–æ–Ω—Ç—Ä–æ–ª—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
const ENABLE_DETAILED_LOGGING = false;
const debugLog = (message: string, ...args: any[]) => {
  if (ENABLE_DETAILED_LOGGING) {
    console.log(message, ...args);
  }
};

  const sql = `
-- ============================================
-- –û–ë–ù–û–í–õ–ï–ù–ò–ï –§–£–ù–ö–¶–ò–ò –†–ê–°–ß–ï–¢–ê –ö–û–ú–ú–ï–†–ß–ï–°–ö–ò–• –°–¢–û–ò–ú–û–°–¢–ï–ô
-- –° –£–ß–ï–¢–û–ú –ü–ï–†–ï–ù–û–°–ê –ù–ê–¶–ï–ù–û–ö –í –†–ê–ë–û–¢–´
-- ============================================

CREATE OR REPLACE FUNCTION recalculate_commercial_costs_by_category(p_tender_id UUID)
RETURNS VOID AS $$
DECLARE
    v_markup_record RECORD;
BEGIN
    -- –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç—ã –Ω–∞—Ü–µ–Ω–æ–∫ –¥–ª—è —Ç–µ–Ω–¥–µ—Ä–∞
    SELECT * INTO v_markup_record
    FROM tender_markup_percentages
    WHERE tender_id = p_tender_id
    LIMIT 1;
    
    -- –ï—Å–ª–∏ –Ω–µ—Ç –∑–∞–ø–∏—Å–∏ –æ –Ω–∞—Ü–µ–Ω–∫–∞—Ö, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    IF v_markup_record IS NULL THEN
        -- –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å —Å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
        INSERT INTO tender_markup_percentages (tender_id)
        VALUES (p_tender_id)
        RETURNING * INTO v_markup_record;
    END IF;

    -- –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ –¥–ª—è —ç—Ç–æ–≥–æ —Ç–µ–Ω–¥–µ—Ä–∞
    DELETE FROM commercial_costs_by_category WHERE tender_id = p_tender_id;
    
    -- –í—Å—Ç–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ª–æ–≥–∏–∫–æ–π
    INSERT INTO commercial_costs_by_category (
        tender_id,
        detail_cost_category_id,
        direct_materials,
        direct_works,
        direct_submaterials,
        direct_subworks,
        commercial_materials,
        commercial_works,
        commercial_submaterials,
        commercial_subworks
    )
    WITH boq_data AS (
        -- –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ BOQ items —Å –∏—Ö —Ç–∏–ø–∞–º–∏ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–≤—è–∑–∞–Ω–Ω–æ—Å—Ç–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
        SELECT 
            bi.detail_cost_category_id,
            bi.item_type,
            bi.total_amount as direct_cost,
            bi.commercial_cost,
            bi.work_id,
            bi.material_id,
            -- –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –º–∞—Ç–µ—Ä–∏–∞–ª –æ—Å–Ω–æ–≤–Ω—ã–º (linked) –∏–ª–∏ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–º (unlinked)
            CASE 
                WHEN bi.item_type = 'material' AND bi.work_id IS NOT NULL THEN true  -- –û—Å–Ω–æ–≤–Ω–æ–π –º–∞—Ç–µ—Ä–∏–∞–ª (linked)
                WHEN bi.item_type = 'material' AND bi.work_id IS NULL THEN false     -- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª (unlinked)
                ELSE NULL
            END as is_linked_material
        FROM boq_items bi
        WHERE bi.tender_id = p_tender_id
            AND bi.detail_cost_category_id IS NOT NULL
    ),
    material_transfers AS (
        -- –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–µ—Ä–µ–Ω–æ—Å—ã –∏–∑ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –≤ —Ä–∞–±–æ—Ç—ã
        SELECT 
            detail_cost_category_id,
            -- –ü—Ä—è–º—ã–µ –∑–∞—Ç—Ä–∞—Ç—ã –æ—Å—Ç–∞—é—Ç—Å—è –∫–∞–∫ –µ—Å—Ç—å
            SUM(CASE WHEN item_type = 'material' THEN direct_cost ELSE 0 END) as direct_materials,
            SUM(CASE WHEN item_type = 'work' THEN direct_cost ELSE 0 END) as direct_works,
            SUM(CASE WHEN item_type = 'sub_material' THEN direct_cost ELSE 0 END) as direct_submaterials,
            SUM(CASE WHEN item_type = 'sub_work' THEN direct_cost ELSE 0 END) as direct_subworks,
            
            -- –ö–æ–º–º–µ—Ä—á–µ—Å–∫–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã (—Å —É—á–µ—Ç–æ–º –ª–æ–≥–∏–∫–∏ –ø–µ—Ä–µ–Ω–æ—Å–∞)
            SUM(CASE 
                -- –û—Å–Ω–æ–≤–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã (linked): –æ—Å—Ç–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –±–∞–∑–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å
                WHEN item_type = 'material' AND is_linked_material = true THEN direct_cost
                -- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã (unlinked): –≤ –º–∞—Ç–µ—Ä–∏–∞–ª–∞—Ö –Ω–∏—á–µ–≥–æ –Ω–µ –æ—Å—Ç–∞–µ—Ç—Å—è
                WHEN item_type = 'material' AND is_linked_material = false THEN 0
                ELSE 0
            END) as commercial_materials_calculated,
            
            -- –ö–æ–º–º–µ—Ä—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã (–≤–∫–ª—é—á–∞—è –ø–µ—Ä–µ–Ω–æ—Å—ã –∏–∑ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤)
            SUM(CASE 
                WHEN item_type = 'work' THEN COALESCE(commercial_cost, 0)
                ELSE 0
            END) +
            -- –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞—Ü–µ–Ω–∫—É –æ—Ç –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
            SUM(CASE 
                WHEN item_type = 'material' AND is_linked_material = true 
                THEN COALESCE(commercial_cost, 0) - direct_cost  -- –ù–∞—Ü–µ–Ω–∫–∞ = –∫–æ–º–º–µ—Ä—á–µ—Å–∫–∞—è - –±–∞–∑–æ–≤–∞—è
                ELSE 0
            END) +
            -- –î–æ–±–∞–≤–ª—è–µ–º –≤—Å—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
            SUM(CASE 
                WHEN item_type = 'material' AND is_linked_material = false 
                THEN COALESCE(commercial_cost, 0)  -- –í—Å—è –∫–æ–º–º–µ—Ä—á–µ—Å–∫–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å
                ELSE 0
            END) as commercial_works_calculated,
            
            -- –ö–æ–º–º–µ—Ä—á–µ—Å–∫–∏–µ —Å—É–±–º–∞—Ç–µ—Ä–∏–∞–ª—ã: –æ—Å—Ç–∞–µ—Ç—Å—è –±–∞–∑–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å
            SUM(CASE 
                WHEN item_type = 'sub_material' THEN direct_cost
                ELSE 0
            END) as commercial_submaterials_calculated,
            
            -- –ö–æ–º–º–µ—Ä—á–µ—Å–∫–∏–µ —Å—É–±—Ä–∞–±–æ—Ç—ã (–≤–∫–ª—é—á–∞—è –Ω–∞—Ü–µ–Ω–∫—É –æ—Ç —Å—É–±–º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤)
            SUM(CASE 
                WHEN item_type = 'sub_work' THEN COALESCE(commercial_cost, 0)
                ELSE 0
            END) +
            -- –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞—Ü–µ–Ω–∫—É –æ—Ç —Å—É–±–º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
            SUM(CASE 
                WHEN item_type = 'sub_material' 
                THEN COALESCE(commercial_cost, 0) - direct_cost  -- –ù–∞—Ü–µ–Ω–∫–∞ –æ—Ç —Å—É–±–º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
                ELSE 0
            END) as commercial_subworks_calculated
            
        FROM boq_data
        GROUP BY detail_cost_category_id
    )
    SELECT 
        p_tender_id,
        detail_cost_category_id,
        direct_materials,
        direct_works,
        direct_submaterials,
        direct_subworks,
        commercial_materials_calculated,
        commercial_works_calculated,
        commercial_submaterials_calculated,
        commercial_subworks_calculated
    FROM material_transfers;
    
END;
$$ LANGUAGE plpgsql;
  `;

  try {
    // –í—ã–ø–æ–ª–Ω—è–µ–º SQL —á–µ—Ä–µ–∑ Supabase
    const { error } = await supabase.rpc('query', { sql_query: sql });
    
    if (error) {
      console.error('‚ùå Error updating function:', error);
      // –ï—Å–ª–∏ —Ñ—É–Ω–∫—Ü–∏—è query –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø–æ–ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–±
      
      // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞: —Å–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è SQL
      // –ù–æ –≤ Supabase —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ –ø–æ–ª–∏—Ç–∏–∫–∞–º–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
      throw new Error('Cannot execute raw SQL. Please update the function manually in Supabase dashboard.');
    }
    
    
    // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ç–µ–Ω–¥–µ—Ä–∞
    debugLog('üîÑ Recalculating commercial costs for test tender...');
    const { error: recalcError } = await supabase.rpc('recalculate_commercial_costs_by_category', {
      p_tender_id: '81aa40f6-01e0-454b-ba3a-0f696622c21c'
    });
    
    if (recalcError) {
      console.error('‚ùå Error recalculating:', recalcError);
    } else {
    }
    
  } catch (error) {
    console.error('üí• Fatal error:', error);
    debugLog('‚ö†Ô∏è Please update the function manually in Supabase SQL Editor:');
    debugLog('1. Go to Supabase Dashboard ‚Üí SQL Editor');
    debugLog('2. Paste the SQL from update_commercial_costs_logic.sql');
    debugLog('3. Execute the query');
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
export default updateCommercialCostsFunction;

// –ï—Å–ª–∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
if (import.meta.url === `file://${__filename}`) {
  updateCommercialCostsFunction();
}