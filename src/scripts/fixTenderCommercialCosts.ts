/**
 * Script to fix commercial costs for a specific tender
 */
import { createClient } from '@supabase/supabase-js';
import * as dotenv from 'dotenv';
import * as path from 'path';

// Load environment variables
dotenv.config({ path: path.resolve(process.cwd(), '.env.local') });

const supabaseUrl = process.env.VITE_SUPABASE_URL;
const supabaseAnonKey = process.env.VITE_SUPABASE_ANON_KEY;

if (!supabaseUrl || !supabaseAnonKey) {
  console.error('‚ùå Missing required environment variables');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseAnonKey);

// –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—á–µ—Ç–∞ –¥–ª—è –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
function calculateMaterialsCommercial(base: number, markups: any): number {
  if (base === 0) return 0;

  const step1 = base * (1 + markups.materials_cost_growth / 100);
  const step2 = base * (1 + markups.contingency_costs / 100);
  const step3 = (step1 + step2 - base) * (1 + markups.overhead_own_forces / 100);
  const step4 = step3 * (1 + markups.general_costs_without_subcontract / 100);
  const step5 = step4 * (1 + markups.profit_own_forces / 100);

  return step5;
}

// –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—á–µ—Ç–∞ –¥–ª—è —Ä–∞–±–æ—Ç
function calculateWorksCommercial(base: number, markups: any): number {
  if (base === 0) return 0;

  const step1 = base * (1 + markups.works_16_markup / 100);
  const step2 = step1 * (1 + markups.works_cost_growth / 100);
  const step3 = base * (1 + markups.contingency_costs / 100);
  const step4 = (step2 + step3 - base) * (1 + markups.overhead_own_forces / 100);
  const step5 = step4 * (1 + markups.general_costs_without_subcontract / 100);
  const step6 = step5 * (1 + markups.profit_own_forces / 100);

  return step6;
}

async function fixTenderCommercialCosts(tenderId: string) {
  console.log(`\nüîÑ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–º–µ—Ä—á–µ—Å–∫–∏—Ö —Å—Ç–æ–∏–º–æ—Å—Ç–µ–π –¥–ª—è —Ç–µ–Ω–¥–µ—Ä–∞: ${tenderId}\n`);

  // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–Ω–¥–µ—Ä–µ
  const { data: tender, error: tenderError } = await supabase
    .from('tenders')
    .select('title, client_name')
    .eq('id', tenderId)
    .single();

  if (tender) {
    console.log(`üìã –¢–µ–Ω–¥–µ—Ä: ${tender.title} - ${tender.client_name}\n`);
  }

  // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç—ã –Ω–∞–∫—Ä—É—Ç–æ–∫
  const { data: markup, error: markupError } = await supabase
    .from('tender_markup_percentages')
    .select('*')
    .eq('tender_id', tenderId)
    .eq('is_active', true)
    .single();

  if (markupError || !markup) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ –Ω–∞–∫—Ä—É—Ç–æ–∫:', markupError);
    return;
  }

  console.log('üìä –ü—Ä–æ—Ü–µ–Ω—Ç—ã –Ω–∞–∫—Ä—É—Ç–æ–∫:');
  console.log(`   –†–∞–±–æ—Ç—ã 1.6: ${markup.works_16_markup}%`);
  console.log(`   –†–æ—Å—Ç –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤: ${markup.materials_cost_growth}%`);
  console.log(`   –†–æ—Å—Ç —Ä–∞–±–æ—Ç: ${markup.works_cost_growth}%`);
  console.log(`   –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω—ã–µ: ${markup.contingency_costs}%`);
  console.log(`   –û–û–ó: ${markup.overhead_own_forces}%`);
  console.log(`   –û–§–ó: ${markup.general_costs_without_subcontract}%`);
  console.log(`   –ü—Ä–∏–±—ã–ª—å: ${markup.profit_own_forces}%\n`);

  // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–æ–∑–∏—Ü–∏–∏ —Ç–µ–Ω–¥–µ—Ä–∞
  const { data: positions, error: posError } = await supabase
    .from('client_positions')
    .select('*')
    .eq('tender_id', tenderId)
    .order('position_number');

  if (posError) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π:', posError);
    return;
  }

  console.log(`üìã –ù–∞–π–¥–µ–Ω–æ ${positions?.length || 0} –ø–æ–∑–∏—Ü–∏–π\n`);

  let fixedCount = 0;
  let problemCount = 0;

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –ø–æ–∑–∏—Ü–∏—é
  for (const position of positions || []) {
    const baseMaterials = parseFloat(position.total_materials_cost || '0');
    const baseWorks = parseFloat(position.total_works_cost || '0');
    const currentCommMaterials = parseFloat(position.total_commercial_materials_cost || '0');
    const currentCommWorks = parseFloat(position.total_commercial_works_cost || '0');

    if (baseMaterials > 0 || baseWorks > 0) {
      // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
      const correctMaterials = calculateMaterialsCommercial(baseMaterials, markup);
      const correctWorks = calculateWorksCommercial(baseWorks, markup);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ (–∑–Ω–∞—á–µ–Ω–∏–µ –±–æ–ª—å—à–µ —á–µ–º –≤ 100 —Ä–∞–∑)
      const materialsProblem = currentCommMaterials > correctMaterials * 100;
      const worksProblem = currentCommWorks > correctWorks * 100;

      if (materialsProblem || worksProblem) {
        problemCount++;

        console.log(`‚ö†Ô∏è –ü–æ–∑–∏—Ü–∏—è ${position.position_number}: ${position.work_name?.substring(0, 50)}`);
        console.log(`   –ë–∞–∑–∞: –ú=${baseMaterials.toLocaleString('ru-RU')} –†=${baseWorks.toLocaleString('ru-RU')}`);

        if (materialsProblem) {
          console.log(`   ‚ùå –ú–∞—Ç–µ—Ä–∏–∞–ª—ã –ö–ü –≤ –ë–î: ${currentCommMaterials.toLocaleString('ru-RU')} ‚ÇΩ`);
          console.log(`   ‚úÖ –î–æ–ª–∂–Ω–æ –±—ã—Ç—å: ${Math.round(correctMaterials).toLocaleString('ru-RU')} ‚ÇΩ`);
        }

        if (worksProblem) {
          console.log(`   ‚ùå –†–∞–±–æ—Ç—ã –ö–ü –≤ –ë–î: ${currentCommWorks.toLocaleString('ru-RU')} ‚ÇΩ`);
          console.log(`   ‚úÖ –î–æ–ª–∂–Ω–æ –±—ã—Ç—å: ${Math.round(correctWorks).toLocaleString('ru-RU')} ‚ÇΩ`);
        }

        // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è
        const { error: updateError } = await supabase
          .from('client_positions')
          .update({
            total_commercial_materials_cost: correctMaterials,
            total_commercial_works_cost: correctWorks
          })
          .eq('id', position.id);

        if (updateError) {
          console.error(`   ‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:`, updateError);
        } else {
          console.log(`   ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ!`);
          fixedCount++;
        }
        console.log('');
      }
    }
  }

  console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n');
  console.log(`üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:`);
  console.log(`   –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π: ${problemCount}`);
  console.log(`   –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–∑–∏—Ü–∏–π: ${fixedCount}`);

  if (problemCount === 0) {
    console.log(`   ‚úÖ –í—Å–µ –ø–æ–∑–∏—Ü–∏–∏ —É–∂–µ –∏–º–µ—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è!`);
  }
}

// –ü–æ–ª—É—á–∞–µ–º ID —Ç–µ–Ω–¥–µ—Ä–∞ –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–π
const tenderId = process.argv[2] || 'd729177f-1454-4bb1-86d6-e509d3a834c3';

fixTenderCommercialCosts(tenderId)
  .then(() => {
    console.log('\n‚úÖ –°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–µ–Ω');
    process.exit(0);
  })
  .catch((error) => {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
  });