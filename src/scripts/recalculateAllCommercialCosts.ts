import { createClient } from '@supabase/supabase-js';
import dotenv from 'dotenv';
import {
  calculateWorkCommercialCost,
  calculateMainMaterialCommercialCost,
  calculateAuxiliaryMaterialCommercialCost,
  calculateSubcontractWorkCommercialCost,
  calculateSubcontractMaterialCommercialCost,
  calculateAuxiliarySubcontractMaterialCommercialCost
} from '../utils/calculateCommercialCost';

// Load environment variables
dotenv.config({ path: '.env.local' });

const supabaseUrl = process.env.VITE_SUPABASE_URL!;
const supabaseKey = process.env.VITE_SUPABASE_ANON_KEY!;

const supabase = createClient(supabaseUrl, supabaseKey);

interface BOQItem {
  id: string;
  tender_id: string;
  client_position_id: string;
  item_type: 'work' | 'material' | 'sub_work' | 'sub_material';
  description: string;
  quantity: number;
  unit_rate: number;
  total_amount: number;
  commercial_cost: number | null;
  commercial_markup_coefficient: number | null;
  delivery_price_type: string;
  delivery_amount: number;
  material_type: 'main' | 'auxiliary' | null;
  consumption_coefficient: number | null;
  conversion_coefficient: number | null;
}

interface TenderMarkup {
  works_16_markup: number;
  works_cost_growth: number;
  materials_cost_growth: number;
  subcontract_works_cost_growth: number;
  contingency_costs: number;
  overhead_own_forces: number;
  overhead_subcontract: number;
  general_costs_without_subcontract: number;
  profit_own_forces: number;
  profit_subcontract: number;
  mechanization_service: number;
  mbp_gsm: number;
  warranty_period: number;
}

async function recalculateAllCommercialCosts() {
  console.log('üöÄ –ü–µ—Ä–µ—Å—á–µ—Ç –∫–æ–º–º–µ—Ä—á–µ—Å–∫–∏—Ö —Å—Ç–æ–∏–º–æ—Å—Ç–µ–π –¥–ª—è –í–°–ï–• —Ç–µ–Ω–¥–µ—Ä–æ–≤ –∏ –í–°–ï–• BOQ —ç–ª–µ–º–µ–Ω—Ç–æ–≤');
  console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');

  try {
    // 1. –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–µ–Ω–¥–µ—Ä—ã
    const { data: tenders, error: tendersError } = await supabase
      .from('tenders')
      .select('id, title, tender_number')
      .order('title');

    if (tendersError) {
      console.error('‚ùå Error fetching tenders:', tendersError);
      return;
    }

    console.log(`\nüìã –ù–∞–π–¥–µ–Ω–æ ${tenders?.length || 0} —Ç–µ–Ω–¥–µ—Ä–æ–≤\n`);

    let totalTendersProcessed = 0;
    let totalItemsUpdated = 0;
    let totalItemsWithErrors = 0;

    // 2. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Ç–µ–Ω–¥–µ—Ä
    for (const tender of tenders || []) {
      console.log(`\n${'='.repeat(80)}`);
      console.log(`üìÅ –¢–µ–Ω–¥–µ—Ä: ${tender.title} (‚Ññ${tender.tender_number})`);
      console.log(`   ID: ${tender.id}`);
      console.log(`${'='.repeat(80)}`);

      // 2.1. –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ—Ü–µ–Ω—Ç—ã –Ω–∞–∫—Ä—É—Ç–æ–∫ –¥–ª—è —Ç–µ–Ω–¥–µ—Ä–∞
      const { data: markups, error: markupsError } = await supabase
        .from('tender_markup_percentages')
        .select('*')
        .eq('tender_id', tender.id)
        .eq('is_active', true)
        .maybeSingle();

      if (markupsError) {
        console.error(`‚ùå Error fetching markups for tender ${tender.title}:`, markupsError);
        continue;
      }

      if (!markups) {
        console.log(`‚ö†Ô∏è  –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ –Ω–∞–∫—Ä—É—Ç–æ–∫ –¥–ª—è —Ç–µ–Ω–¥–µ—Ä–∞ ${tender.title}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º...`);
        continue;
      }

      console.log(`\nüí∞ –ê–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ—Ü–µ–Ω—Ç—ã –Ω–∞–∫—Ä—É—Ç–æ–∫:`);
      console.log(`   –†–∞–±–æ—Ç—ã 1.6: ${markups.works_16_markup}%`);
      console.log(`   –†–æ—Å—Ç —Ä–∞–±–æ—Ç: ${markups.works_cost_growth}%`);
      console.log(`   –†–æ—Å—Ç –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤: ${markups.materials_cost_growth}%`);
      console.log(`   –†–æ—Å—Ç —Å—É–±—Ä–∞–±–æ—Ç: ${markups.subcontract_works_cost_growth}%`);
      console.log(`   –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω—ã–µ: ${markups.contingency_costs}%`);
      console.log(`   –û–û–ó —Å–æ–±—Å—Ç–≤: ${markups.overhead_own_forces}%`);
      console.log(`   –û–û–ó —Å—É–±–ø–æ–¥—Ä—è–¥: ${markups.overhead_subcontract}%`);
      console.log(`   –û–§–ó: ${markups.general_costs_without_subcontract}%`);
      console.log(`   –ü—Ä–∏–±—ã–ª—å —Å–æ–±—Å—Ç–≤: ${markups.profit_own_forces}%`);
      console.log(`   –ü—Ä–∏–±—ã–ª—å —Å—É–±–ø–æ–¥—Ä—è–¥: ${markups.profit_subcontract}%`);

      // 2.2. –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ BOQ —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è —Ç–µ–Ω–¥–µ—Ä–∞
      const { data: boqItems, error: boqError } = await supabase
        .from('boq_items')
        .select('*')
        .eq('tender_id', tender.id)
        .order('sort_order');

      if (boqError) {
        console.error(`‚ùå Error fetching BOQ items for tender ${tender.title}:`, boqError);
        continue;
      }

      console.log(`\nüì¶ –ù–∞–π–¥–µ–Ω–æ ${boqItems?.length || 0} BOQ —ç–ª–µ–º–µ–Ω—Ç–æ–≤`);

      if (!boqItems || boqItems.length === 0) {
        console.log(`‚ö†Ô∏è  –ù–µ—Ç BOQ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏`);
        continue;
      }

      // 2.3. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π BOQ —ç–ª–µ–º–µ–Ω—Ç
      let itemsUpdated = 0;
      let itemsSkipped = 0;
      let itemsWithErrors = 0;

      const batchSize = 100;
      const batches = Math.ceil(boqItems.length / batchSize);

      for (let batchIndex = 0; batchIndex < batches; batchIndex++) {
        const start = batchIndex * batchSize;
        const end = Math.min(start + batchSize, boqItems.length);
        const batch = boqItems.slice(start, end);

        console.log(`\nüîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –±–∞—Ç—á–∞ ${batchIndex + 1}/${batches} (—ç–ª–µ–º–µ–Ω—Ç—ã ${start + 1}-${end})...`);

        for (const item of batch) {
          try {
            // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å
            let baseCost = item.total_amount || 0;

            // –î–ª—è –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –¥–æ–±–∞–≤–ª—è–µ–º –¥–æ—Å—Ç–∞–≤–∫—É
            if ((item.item_type === 'material' || item.item_type === 'sub_material')) {
              const deliveryType = item.delivery_price_type || 'included';
              const deliveryAmount = item.delivery_amount || 0;
              const quantity = item.quantity || 0;

              if ((deliveryType === 'amount' || deliveryType === 'not_included') && deliveryAmount > 0) {
                baseCost = baseCost + (deliveryAmount * quantity);
              }
            }

            if (baseCost <= 0) {
              itemsSkipped++;
              continue;
            }

            // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–º–º–µ—Ä—á–µ—Å–∫—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
            let commercialCost = baseCost;

            switch (item.item_type) {
              case 'work':
                commercialCost = calculateWorkCommercialCost(baseCost, markups as TenderMarkup);
                break;

              case 'material':
                const isAuxiliary = item.material_type === 'auxiliary';
                if (isAuxiliary) {
                  const result = calculateAuxiliaryMaterialCommercialCost(baseCost, markups as TenderMarkup);
                  commercialCost = result.materialCost + result.workMarkup;
                } else {
                  const result = calculateMainMaterialCommercialCost(baseCost, markups as TenderMarkup);
                  commercialCost = result.materialCost + result.workMarkup;
                }
                break;

              case 'sub_work':
                commercialCost = calculateSubcontractWorkCommercialCost(baseCost, markups as TenderMarkup);
                break;

              case 'sub_material':
                const isSubAuxiliary = item.material_type === 'auxiliary';
                if (isSubAuxiliary) {
                  const result = calculateAuxiliarySubcontractMaterialCommercialCost(baseCost, markups as TenderMarkup);
                  commercialCost = result.materialCost + result.workMarkup;
                } else {
                  const result = calculateSubcontractMaterialCommercialCost(baseCost, markups as TenderMarkup);
                  commercialCost = result.materialCost + result.workMarkup;
                }
                break;
            }

            const markupCoefficient = commercialCost / baseCost;

            // –û–±–Ω–æ–≤–ª—è–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            const { error: updateError } = await supabase
              .from('boq_items')
              .update({
                commercial_cost: commercialCost,
                commercial_markup_coefficient: markupCoefficient
              })
              .eq('id', item.id);

            if (updateError) {
              console.error(`   ‚ùå Error updating item ${item.id}:`, updateError.message);
              itemsWithErrors++;
            } else {
              itemsUpdated++;
            }

          } catch (error: any) {
            console.error(`   ‚ùå Exception processing item ${item.id}:`, error.message);
            itemsWithErrors++;
          }
        }

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –±–∞—Ç—á–∞
        console.log(`   ‚úÖ –ë–∞—Ç—á ${batchIndex + 1}/${batches} –∑–∞–≤–µ—Ä—à–µ–Ω`);
      }

      console.log(`\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–µ–Ω–¥–µ—Ä—É ${tender.title}:`);
      console.log(`   ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ: ${itemsUpdated}`);
      console.log(`   ‚è≠Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω–æ (–Ω—É–ª–µ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å): ${itemsSkipped}`);
      console.log(`   ‚ùå –û—à–∏–±–æ–∫: ${itemsWithErrors}`);

      totalTendersProcessed++;
      totalItemsUpdated += itemsUpdated;
      totalItemsWithErrors += itemsWithErrors;

      // –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–µ–Ω–¥–µ—Ä–∞–º–∏
      await new Promise(resolve => setTimeout(resolve, 500));
    }

    // –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    console.log(`\n${'='.repeat(80)}`);
    console.log(`‚úÖ –ü–ï–†–ï–°–ß–ï–¢ –ó–ê–í–ï–†–®–ï–ù`);
    console.log(`${'='.repeat(80)}`);
    console.log(`\nüìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:`);
    console.log(`   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ç–µ–Ω–¥–µ—Ä–æ–≤: ${totalTendersProcessed}`);
    console.log(`   –û–±–Ω–æ–≤–ª–µ–Ω–æ BOQ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: ${totalItemsUpdated}`);
    console.log(`   –û—à–∏–±–æ–∫ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏: ${totalItemsWithErrors}`);

    if (totalItemsWithErrors > 0) {
      console.log(`\n‚ö†Ô∏è  –í–Ω–∏–º–∞–Ω–∏–µ: ${totalItemsWithErrors} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–µ –±—ã–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –∏–∑-–∑–∞ –æ—à–∏–±–æ–∫`);
    }

  } catch (error) {
    console.error('üí• Critical exception:', error);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
console.log('‚è≥ –ù–∞—á–∏–Ω–∞–µ–º –ø–µ—Ä–µ—Å—á–µ—Ç...\n');

recalculateAllCommercialCosts()
  .then(() => {
    console.log('\n‚úÖ –°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ');
    process.exit(0);
  })
  .catch((error) => {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
  });
