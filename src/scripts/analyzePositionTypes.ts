/**
 * Script to analyze all position types in Admiral tender and understand calculation logic
 */
import { createClient } from '@supabase/supabase-js';
import * as dotenv from 'dotenv';
import * as path from 'path';

// Load environment variables
dotenv.config({ path: path.resolve(process.cwd(), '.env.local') });

const supabaseUrl = process.env.VITE_SUPABASE_URL;
const supabaseAnonKey = process.env.VITE_SUPABASE_ANON_KEY;

if (!supabaseUrl || !supabaseAnonKey) {
  console.error('‚ùå Missing required environment variables');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseAnonKey);

async function analyzePositionTypes() {
  console.log('\nüîç –ê–ù–ê–õ–ò–ó –¢–ò–ü–û–í –ü–û–ó–ò–¶–ò–ô –í –¢–ï–ù–î–ï–†–ï –ñ–ö –ê–î–ú–ò–†–ê–õ');
  console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n');

  const tenderId = '736dc11c-33dc-4fce-a7ee-c477abb8b694';

  // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–æ–∑–∏—Ü–∏–∏ —Ç–µ–Ω–¥–µ—Ä–∞
  const { data: positions, error: posError } = await supabase
    .from('client_positions')
    .select('*')
    .eq('tender_id', tenderId)
    .order('position_number');

  if (posError) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π:', posError);
    return;
  }

  console.log(`üìã –í—Å–µ–≥–æ –ø–æ–∑–∏—Ü–∏–π –≤ —Ç–µ–Ω–¥–µ—Ä–µ: ${positions.length}\n`);

  // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ç–∏–ø–∞–º
  const typeGroups = positions.reduce((acc, pos) => {
    const type = pos.item_type || 'undefined';
    if (!acc[type]) acc[type] = [];
    acc[type].push(pos);
    return acc;
  }, {} as Record<string, any[]>);

  console.log('üìä –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï –ü–û –¢–ò–ü–ê–ú:');
  Object.entries(typeGroups).forEach(([type, positions]) => {
    console.log(`   ${type}: ${positions.length} –ø–æ–∑–∏—Ü–∏–π`);
  });

  console.log('\nüìù –ê–ù–ê–õ–ò–ó –ö–û–ù–ö–†–ï–¢–ù–´–• –ü–û–ó–ò–¶–ò–ô:');

  // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã –ø–æ–∑–∏—Ü–∏–π
  Object.entries(typeGroups).forEach(([type, positionsOfType]) => {
    console.log(`\nüîπ –¢–ò–ü: ${type}`);
    console.log('‚îÄ'.repeat(50));

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 –ø–æ–∑–∏—Ü–∏–π –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞
    const samplesToShow = positionsOfType.slice(0, 5);

    samplesToShow.forEach((pos) => {
      const baseMaterials = parseFloat(pos.total_materials_cost || '0');
      const baseWorks = parseFloat(pos.total_works_cost || '0');
      const commercialMaterials = parseFloat(pos.total_commercial_materials_cost || '0');
      const commercialWorks = parseFloat(pos.total_commercial_works_cost || '0');

      const totalBase = baseMaterials + baseWorks;
      const totalCommercial = commercialMaterials + commercialWorks;

      let markup = 0;
      if (totalBase > 0) {
        markup = ((totalCommercial - totalBase) / totalBase * 100);
      }

      console.log(`   –ü–æ–∑. ${pos.position_number}: ${pos.work_name.substring(0, 50)}...`);
      console.log(`      –ë–∞–∑–æ–≤–∞—è: ${totalBase.toLocaleString('ru-RU')} ‚ÇΩ`);
      console.log(`      –ö–æ–º–º–µ—Ä—á–µ—Å–∫–∞—è: ${totalCommercial.toLocaleString('ru-RU')} ‚ÇΩ`);
      console.log(`      –ù–∞—Ü–µ–Ω–∫–∞: ${markup.toFixed(1)}%`);
      console.log('');
    });

    if (positionsOfType.length > 5) {
      console.log(`   ... –∏ –µ—â–µ ${positionsOfType.length - 5} –ø–æ–∑–∏—Ü–∏–π —ç—Ç–æ–≥–æ —Ç–∏–ø–∞\n`);
    }
  });

  // –ù–∞—Ö–æ–¥–∏–º –ø–æ–∑–∏—Ü–∏—é 117 –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ—ë BOQ
  console.log('\nüéØ –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –ü–û–ó–ò–¶–ò–ò 117:');
  console.log('‚îÄ'.repeat(50));

  const pos117 = positions.find(p => p.position_number === '117');
  if (pos117) {
    console.log(`ID –ø–æ–∑–∏—Ü–∏–∏: ${pos117.id}`);
    console.log(`–ù–∞–∑–≤–∞–Ω–∏–µ: ${pos117.work_name}`);
    console.log(`–¢–∏–ø: ${pos117.item_type || 'NULL'}`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º BOQ items –¥–ª—è —ç—Ç–æ–π –ø–æ–∑–∏—Ü–∏–∏
    const { data: boqItems, error: boqError } = await supabase
      .from('boq_items')
      .select('*')
      .eq('client_position_id', pos117.id);

    if (boqError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è BOQ items:', boqError);
    } else {
      console.log(`\nüì¶ BOQ items –≤ –ø–æ–∑–∏—Ü–∏–∏ 117: ${boqItems.length}`);

      if (boqItems.length > 0) {
        boqItems.forEach((item, index) => {
          console.log(`   ${index + 1}. ${item.description || '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è'}`);
          console.log(`      –¢–∏–ø: ${item.item_type || 'NULL'}`);
          console.log(`      –°—Ç–æ–∏–º–æ—Å—Ç—å: ${parseFloat(item.total_amount || '0').toLocaleString('ru-RU')} ‚ÇΩ`);
        });
      }
    }
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Ä–∞—Å—á–µ—Ç–∞ –∫–æ–º–º–µ—Ä—á–µ—Å–∫–∏—Ö —Å—Ç–æ–∏–º–æ—Å—Ç–µ–π
  console.log('\nüîß –ü–†–û–í–ï–†–ö–ê –§–£–ù–ö–¶–ò–ô –†–ê–°–ß–ï–¢–ê –í –ë–î:');
  console.log('‚îÄ'.repeat(50));

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∫–æ–º–º–µ—Ä—á–µ—Å–∫–∏—Ö —Å—Ç–æ–∏–º–æ—Å—Ç–µ–π
  const { data: functions, error: funcError } = await supabase.rpc('get_functions_list');

  if (funcError) {
    console.log('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ñ—É–Ω–∫—Ü–∏–π, –ø—Ä–æ–≤–µ—Ä–∏–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º');

    // –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –≤ —Å—Ö–µ–º–µ
    const { data: schemas, error: schemaError } = await supabase
      .from('information_schema.routines')
      .select('routine_name, routine_type')
      .eq('routine_schema', 'public')
      .ilike('routine_name', '%commercial%');

    if (!schemaError && schemas) {
      console.log('–ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Å "commercial" –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏:');
      schemas.forEach(func => {
        console.log(`   ${func.routine_name} (${func.routine_type})`);
      });
    }
  }

  console.log('\n‚úÖ –ê–Ω–∞–ª–∏–∑ —Ç–∏–ø–æ–≤ –ø–æ–∑–∏—Ü–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω');
}

analyzePositionTypes()
  .then(() => {
    console.log('\nüéâ –ê–Ω–∞–ª–∏–∑ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω');
    process.exit(0);
  })
  .catch((error) => {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ:', error);
    process.exit(1);
  });