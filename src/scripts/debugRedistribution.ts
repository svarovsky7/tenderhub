/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –ø–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å—Ç–æ–∏–º–æ—Å—Ç–µ–π
 *
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—ã—è—Å–Ω–µ–Ω–∏—è –ø—Ä–∏—á–∏–Ω—ã –æ—à–∏–±–∫–∏ "No target items found or total target works cost is zero"
 *
 * Usage: node src/scripts/debugRedistribution.ts <tenderId> <targetCategoryId1> [<targetCategoryId2> ...]
 */

import { supabase } from '../lib/supabase/client';

async function debugRedistribution(tenderId: string, targetCategories: string[]) {
  console.log('üîç Debugging redistribution for tender:', tenderId);
  console.log('üéØ Target categories:', targetCategories);

  // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ BOQ —ç–ª–µ–º–µ–Ω—Ç—ã –≤ —Ü–µ–ª–µ–≤—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö
  const { data: targetItems, error } = await supabase
    .from('boq_items')
    .select('id, description, item_type, material_type, commercial_cost, total_amount, detail_cost_category_id')
    .eq('tender_id', tenderId)
    .in('detail_cost_category_id', targetCategories);

  if (error) {
    console.error('‚ùå Error fetching BOQ items:', error);
    return;
  }

  console.log('\nüìä Total items in target categories:', targetItems?.length || 0);

  if (!targetItems || targetItems.length === 0) {
    console.log('‚ö†Ô∏è No items found in target categories!');
    return;
  }

  // –§–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –ø–æ commercial_cost > 0
  const itemsWithCost = targetItems.filter(item => (item.commercial_cost || 0) > 0);
  console.log('üí∞ Items with commercial_cost > 0:', itemsWithCost.length);

  if (itemsWithCost.length === 0) {
    console.log('‚ö†Ô∏è No items with commercial_cost > 0 in target categories!');
    return;
  }

  // –†–∞—Å—Å—á–∏—Ç–∞—Ç—å work_portion –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
  let totalWorkPortion = 0;
  console.log('\nüìã Items with work portions:');

  itemsWithCost.forEach(item => {
    let workPortion = 0;

    // –õ–æ–≥–∏–∫–∞ –∏–∑ calculate_work_portion
    if (item.item_type === 'work' || item.item_type === 'sub_work') {
      workPortion = item.commercial_cost || 0;
    } else if (item.item_type === 'material' || item.item_type === 'sub_material') {
      if (item.material_type === 'main') {
        workPortion = (item.commercial_cost || 0) - (item.total_amount || 0);
      } else if (item.material_type === 'auxiliary') {
        workPortion = item.commercial_cost || 0;
      }
    }

    totalWorkPortion += workPortion;

    console.log(`  - ${item.description?.substring(0, 50)}...`);
    console.log(`    Type: ${item.item_type}, Material: ${item.material_type || 'N/A'}`);
    console.log(`    Commercial: ${item.commercial_cost}, Total: ${item.total_amount}`);
    console.log(`    Work Portion: ${workPortion}`);
  });

  console.log('\n‚úÖ Total work portion:', totalWorkPortion);

  if (totalWorkPortion <= 0) {
    console.log('‚ö†Ô∏è Total work portion is zero or negative!');
    console.log('');
    console.log('Possible reasons:');
    console.log('1. All items are materials with main type where commercial_cost <= total_amount');
    console.log('2. All items have item_type not covered by calculate_work_portion function');
    console.log('3. Items have commercial_cost = 0');
  } else {
    console.log('‚úÖ Redistribution should work! Total work portion is positive.');
  }
}

// –ü–æ–ª—É—á–∏—Ç—å –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
const args = process.argv.slice(2);

if (args.length < 2) {
  console.error('Usage: node src/scripts/debugRedistribution.ts <tenderId> <targetCategoryId1> [<targetCategoryId2> ...]');
  process.exit(1);
}

const [tenderId, ...targetCategories] = args;

debugRedistribution(tenderId, targetCategories)
  .then(() => {
    console.log('\n‚úÖ Debug complete');
    process.exit(0);
  })
  .catch((error) => {
    console.error('üí• Error:', error);
    process.exit(1);
  });
