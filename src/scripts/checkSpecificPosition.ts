/**
 * Script to check specific position calculation by ID
 */
import { createClient } from '@supabase/supabase-js';
import * as dotenv from 'dotenv';
import * as path from 'path';

// Load environment variables
dotenv.config({ path: path.resolve(process.cwd(), '.env.local') });

const supabaseUrl = process.env.VITE_SUPABASE_URL;
const supabaseAnonKey = process.env.VITE_SUPABASE_ANON_KEY;

if (!supabaseUrl || !supabaseAnonKey) {
  console.error('‚ùå Missing required environment variables');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseAnonKey);

async function checkPosition(positionId: string) {
  console.log(`\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–∑–∏—Ü–∏–∏ —Å ID: ${positionId}`);
  console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n');

  // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏
  const { data: position, error: posError } = await supabase
    .from('client_positions')
    .select('*')
    .eq('id', positionId)
    .single();

  if (posError) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏:', posError);
    return;
  }

  if (!position) {
    console.error('‚ùå –ü–æ–∑–∏—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    return;
  }

  console.log('üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–∑–∏—Ü–∏–∏:');
  console.log(`   –ù–æ–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏: ${position.position_number}`);
  console.log(`   –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ: ${position.work_name}`);
  console.log(`   –¢–µ–Ω–¥–µ—Ä ID: ${position.tender_id}\n`);

  console.log('üîπ –ë–∞–∑–æ–≤—ã–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ (–ü–ó):');
  console.log(`   –ú–∞—Ç–µ—Ä–∏–∞–ª—ã: ${parseFloat(position.total_materials_cost || '0').toLocaleString('ru-RU')} ‚ÇΩ`);
  console.log(`   –†–∞–±–æ—Ç—ã: ${parseFloat(position.total_works_cost || '0').toLocaleString('ru-RU')} ‚ÇΩ`);
  console.log(`   –ò–¢–û–ì–û –ü–ó: ${(parseFloat(position.total_materials_cost || '0') + parseFloat(position.total_works_cost || '0')).toLocaleString('ru-RU')} ‚ÇΩ\n`);

  console.log('üîπ –ö–æ–º–º–µ—Ä—á–µ—Å–∫–∏–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ (–≤ –ë–î):');
  console.log(`   –ú–∞—Ç–µ—Ä–∏–∞–ª—ã –ö–ü: ${parseFloat(position.total_commercial_materials_cost || '0').toLocaleString('ru-RU')} ‚ÇΩ`);
  console.log(`   –†–∞–±–æ—Ç—ã –ö–ü: ${parseFloat(position.total_commercial_works_cost || '0').toLocaleString('ru-RU')} ‚ÇΩ`);
  console.log(`   –ò–¢–û–ì–û –ö–ü: ${(parseFloat(position.total_commercial_materials_cost || '0') + parseFloat(position.total_commercial_works_cost || '0')).toLocaleString('ru-RU')} ‚ÇΩ\n`);

  // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç—ã –Ω–∞–∫—Ä—É—Ç–æ–∫ –¥–ª—è —ç—Ç–æ–≥–æ —Ç–µ–Ω–¥–µ—Ä–∞
  const { data: markup, error: markupError } = await supabase
    .from('tender_markup_percentages')
    .select('*')
    .eq('tender_id', position.tender_id)
    .eq('is_active', true)
    .single();

  if (markupError) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ –Ω–∞–∫—Ä—É—Ç–æ–∫:', markupError);
    return;
  }

  console.log('üìä –ü—Ä–æ—Ü–µ–Ω—Ç—ã –Ω–∞–∫—Ä—É—Ç–æ–∫ (–∞–∫—Ç–∏–≤–Ω—ã–µ):');
  console.log(`   –†–∞–±–æ—Ç—ã 1.6: ${markup.works_16_markup}%`);
  console.log(`   –ú–µ—Ö–∞–Ω–∏–∑–∞—Ü–∏—è: ${markup.mechanization_service}%`);
  console.log(`   –ú–ë–ü+–ì–°–ú: ${markup.mbp_gsm}%`);
  console.log(`   –ì–∞—Ä–∞–Ω—Ç–∏–π–Ω—ã–π –ø–µ—Ä–∏–æ–¥: ${markup.warranty_period}%`);
  console.log(`   –†–æ—Å—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Ä–∞–±–æ—Ç: ${markup.works_cost_growth}%`);
  console.log(`   –†–æ—Å—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤: ${markup.materials_cost_growth}%`);
  console.log(`   –†–æ—Å—Ç —Å—É–±—Ä–∞–±–æ—Ç: ${markup.subcontract_works_cost_growth}%`);
  console.log(`   –†–æ—Å—Ç —Å—É–±–º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤: ${markup.subcontract_materials_cost_growth}%`);
  console.log(`   –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω—ã–µ –∑–∞—Ç—Ä–∞—Ç—ã: ${markup.contingency_costs}%`);
  console.log(`   –û–û–ó —Å–æ–±—Å—Ç–≤. —Å–∏–ª—ã: ${markup.overhead_own_forces}%`);
  console.log(`   –û–û–ó —Å—É–±–ø–æ–¥—Ä—è–¥: ${markup.overhead_subcontract}%`);
  console.log(`   –û–§–ó (–±–µ–∑ —Å—É–±–ø–æ–¥—Ä—è–¥–∞): ${markup.general_costs_without_subcontract}%`);
  console.log(`   –ü—Ä–∏–±—ã–ª—å —Å–æ–±—Å—Ç–≤. —Å–∏–ª—ã: ${markup.profit_own_forces}%`);
  console.log(`   –ü—Ä–∏–±—ã–ª—å —Å—É–±–ø–æ–¥—Ä—è–¥: ${markup.profit_subcontract}%\n`);

  // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–º–º–µ—Ä—á–µ—Å–∫—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å
  const baseMaterials = parseFloat(position.total_materials_cost || '0');
  const baseWorks = parseFloat(position.total_works_cost || '0');

  console.log('üìê –†–ê–°–ß–ï–¢ –ö–û–ú–ú–ï–†–ß–ï–°–ö–û–ô –°–¢–û–ò–ú–û–°–¢–ò –ú–ê–¢–ï–†–ò–ê–õ–û–í:');
  console.log('   –§–æ—Ä–º—É–ª–∞: –ø–æ—ç—Ç–∞–ø–Ω–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –Ω–∞–∫—Ä—É—Ç–æ–∫\n');

  if (baseMaterials > 0) {
    // –®–∞–≥ 1: –†–æ—Å—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
    const mat1 = baseMaterials * (1 + markup.materials_cost_growth / 100);
    console.log(`   –®–∞–≥ 1. –ú–∞—Ç–µ—Ä–∏–∞–ª—ã –†–û–°–¢:`);
    console.log(`          ${baseMaterials.toLocaleString('ru-RU')} √ó (1 + ${markup.materials_cost_growth}%) = ${mat1.toLocaleString('ru-RU')} ‚ÇΩ`);

    // –®–∞–≥ 2: –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω—ã–µ –∑–∞—Ç—Ä–∞—Ç—ã
    const mat2 = baseMaterials * (1 + markup.contingency_costs / 100);
    console.log(`   –®–∞–≥ 2. –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω—ã–µ –∑–∞—Ç—Ä–∞—Ç—ã:`);
    console.log(`          ${baseMaterials.toLocaleString('ru-RU')} √ó (1 + ${markup.contingency_costs}%) = ${mat2.toLocaleString('ru-RU')} ‚ÇΩ`);

    // –®–∞–≥ 3: –û–û–ó
    const mat3 = (mat1 + mat2 - baseMaterials) * (1 + markup.overhead_own_forces / 100);
    console.log(`   –®–∞–≥ 3. –û–û–ó —Å–æ–±—Å—Ç–≤. —Å–∏–ª—ã:`);
    console.log(`          (${mat1.toLocaleString('ru-RU')} + ${mat2.toLocaleString('ru-RU')} - ${baseMaterials.toLocaleString('ru-RU')}) √ó (1 + ${markup.overhead_own_forces}%)`);
    console.log(`          = ${(mat1 + mat2 - baseMaterials).toLocaleString('ru-RU')} √ó ${(1 + markup.overhead_own_forces / 100).toFixed(2)} = ${mat3.toLocaleString('ru-RU')} ‚ÇΩ`);

    // –®–∞–≥ 4: –û–§–ó
    const mat4 = mat3 * (1 + markup.general_costs_without_subcontract / 100);
    console.log(`   –®–∞–≥ 4. –û–§–ó (–±–µ–∑ —Å—É–±–ø–æ–¥—Ä—è–¥–∞):`);
    console.log(`          ${mat3.toLocaleString('ru-RU')} √ó (1 + ${markup.general_costs_without_subcontract}%) = ${mat4.toLocaleString('ru-RU')} ‚ÇΩ`);

    // –®–∞–≥ 5: –ü—Ä–∏–±—ã–ª—å
    const mat5 = mat4 * (1 + markup.profit_own_forces / 100);
    console.log(`   –®–∞–≥ 5. –ü—Ä–∏–±—ã–ª—å —Å–æ–±—Å—Ç–≤. —Å–∏–ª—ã:`);
    console.log(`          ${mat4.toLocaleString('ru-RU')} √ó (1 + ${markup.profit_own_forces}%) = ${mat5.toLocaleString('ru-RU')} ‚ÇΩ`);

    console.log(`\n   üìç –ò–¢–û–ì–û–í–ê–Ø –ö–û–ú–ú–ï–†–ß–ï–°–ö–ê–Ø –°–¢–û–ò–ú–û–°–¢–¨ –ú–ê–¢–ï–†–ò–ê–õ–û–í: ${mat5.toLocaleString('ru-RU')} ‚ÇΩ`);

    const materialMarkup = ((mat5 - baseMaterials) / baseMaterials * 100).toFixed(1);
    console.log(`   üìà –û–±—â–∞—è –Ω–∞—Ü–µ–Ω–∫–∞ –Ω–∞ –º–∞—Ç–µ—Ä–∏–∞–ª—ã: ${materialMarkup}%\n`);
  } else {
    console.log('   –ú–∞—Ç–µ—Ä–∏–∞–ª—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç (0 ‚ÇΩ)\n');
  }

  console.log('üìê –†–ê–°–ß–ï–¢ –ö–û–ú–ú–ï–†–ß–ï–°–ö–û–ô –°–¢–û–ò–ú–û–°–¢–ò –†–ê–ë–û–¢:');

  if (baseWorks > 0) {
    // –®–∞–≥ 1: –†–∞–±–æ—Ç—ã 1.6
    const work1 = baseWorks * (1 + markup.works_16_markup / 100);
    console.log(`   –®–∞–≥ 1. –†–∞–±–æ—Ç—ã 1.6:`);
    console.log(`          ${baseWorks.toLocaleString('ru-RU')} √ó (1 + ${markup.works_16_markup}%) = ${work1.toLocaleString('ru-RU')} ‚ÇΩ`);

    // –®–∞–≥ 2: –†–æ—Å—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Ä–∞–±–æ—Ç
    const work2 = work1 * (1 + markup.works_cost_growth / 100);
    console.log(`   –®–∞–≥ 2. –†–∞–±–æ—Ç—ã –†–û–°–¢:`);
    console.log(`          ${work1.toLocaleString('ru-RU')} √ó (1 + ${markup.works_cost_growth}%) = ${work2.toLocaleString('ru-RU')} ‚ÇΩ`);

    // –®–∞–≥ 3: –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω—ã–µ –∑–∞—Ç—Ä–∞—Ç—ã (–æ—Ç –±–∞–∑–æ–≤–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏)
    const work3 = baseWorks * (1 + markup.contingency_costs / 100);
    console.log(`   –®–∞–≥ 3. –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω—ã–µ –∑–∞—Ç—Ä–∞—Ç—ã:`);
    console.log(`          ${baseWorks.toLocaleString('ru-RU')} √ó (1 + ${markup.contingency_costs}%) = ${work3.toLocaleString('ru-RU')} ‚ÇΩ`);

    // –®–∞–≥ 4: –û–û–ó
    const work4 = (work2 + work3 - baseWorks) * (1 + markup.overhead_own_forces / 100);
    console.log(`   –®–∞–≥ 4. –û–û–ó —Å–æ–±—Å—Ç–≤. —Å–∏–ª—ã:`);
    console.log(`          (${work2.toLocaleString('ru-RU')} + ${work3.toLocaleString('ru-RU')} - ${baseWorks.toLocaleString('ru-RU')}) √ó (1 + ${markup.overhead_own_forces}%)`);
    console.log(`          = ${(work2 + work3 - baseWorks).toLocaleString('ru-RU')} √ó ${(1 + markup.overhead_own_forces / 100).toFixed(2)} = ${work4.toLocaleString('ru-RU')} ‚ÇΩ`);

    // –®–∞–≥ 5: –û–§–ó
    const work5 = work4 * (1 + markup.general_costs_without_subcontract / 100);
    console.log(`   –®–∞–≥ 5. –û–§–ó (–±–µ–∑ —Å—É–±–ø–æ–¥—Ä—è–¥–∞):`);
    console.log(`          ${work4.toLocaleString('ru-RU')} √ó (1 + ${markup.general_costs_without_subcontract}%) = ${work5.toLocaleString('ru-RU')} ‚ÇΩ`);

    // –®–∞–≥ 6: –ü—Ä–∏–±—ã–ª—å
    const work6 = work5 * (1 + markup.profit_own_forces / 100);
    console.log(`   –®–∞–≥ 6. –ü—Ä–∏–±—ã–ª—å —Å–æ–±—Å—Ç–≤. —Å–∏–ª—ã:`);
    console.log(`          ${work5.toLocaleString('ru-RU')} √ó (1 + ${markup.profit_own_forces}%) = ${work6.toLocaleString('ru-RU')} ‚ÇΩ`);

    console.log(`\n   üìç –ò–¢–û–ì–û–í–ê–Ø –ö–û–ú–ú–ï–†–ß–ï–°–ö–ê–Ø –°–¢–û–ò–ú–û–°–¢–¨ –†–ê–ë–û–¢: ${work6.toLocaleString('ru-RU')} ‚ÇΩ`);

    const worksMarkup = ((work6 - baseWorks) / baseWorks * 100).toFixed(1);
    console.log(`   üìà –û–±—â–∞—è –Ω–∞—Ü–µ–Ω–∫–∞ –Ω–∞ —Ä–∞–±–æ—Ç—ã: ${worksMarkup}%\n`);
  } else {
    console.log('   –†–∞–±–æ—Ç—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç (0 ‚ÇΩ)\n');
  }

  console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
  console.log('üéØ –ò–¢–û–ì–û–í–ê–Ø –ü–†–û–í–ï–†–ö–ê:');

  // –†–∞—Å—á–µ—Ç –∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏
  let calcMat = 0;
  if (baseMaterials > 0) {
    const m1 = baseMaterials * (1 + markup.materials_cost_growth / 100);
    const m2 = baseMaterials * (1 + markup.contingency_costs / 100);
    const m3 = (m1 + m2 - baseMaterials) * (1 + markup.overhead_own_forces / 100);
    const m4 = m3 * (1 + markup.general_costs_without_subcontract / 100);
    calcMat = m4 * (1 + markup.profit_own_forces / 100);
  }

  let calcWork = 0;
  if (baseWorks > 0) {
    const w1 = baseWorks * (1 + markup.works_16_markup / 100);
    const w2 = w1 * (1 + markup.works_cost_growth / 100);
    const w3 = baseWorks * (1 + markup.contingency_costs / 100);
    const w4 = (w2 + w3 - baseWorks) * (1 + markup.overhead_own_forces / 100);
    const w5 = w4 * (1 + markup.general_costs_without_subcontract / 100);
    calcWork = w5 * (1 + markup.profit_own_forces / 100);
  }

  console.log(`   –†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –ö–ü: ${calcMat.toLocaleString('ru-RU')} ‚ÇΩ`);
  console.log(`   –í –ë–î –º–∞—Ç–µ—Ä–∏–∞–ª—ã –ö–ü: ${parseFloat(position.total_commercial_materials_cost || '0').toLocaleString('ru-RU')} ‚ÇΩ`);

  const matDiff = Math.abs(calcMat - parseFloat(position.total_commercial_materials_cost || '0'));
  if (matDiff > 1) {
    console.log(`   ‚ö†Ô∏è –†–ê–°–•–û–ñ–î–ï–ù–ò–ï: ${matDiff.toLocaleString('ru-RU')} ‚ÇΩ`);
  } else {
    console.log(`   ‚úÖ –ó–Ω–∞—á–µ–Ω–∏—è —Å–æ–≤–ø–∞–¥–∞—é—Ç`);
  }

  console.log(`\n   –†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–µ —Ä–∞–±–æ—Ç—ã –ö–ü: ${calcWork.toLocaleString('ru-RU')} ‚ÇΩ`);
  console.log(`   –í –ë–î —Ä–∞–±–æ—Ç—ã –ö–ü: ${parseFloat(position.total_commercial_works_cost || '0').toLocaleString('ru-RU')} ‚ÇΩ`);

  const workDiff = Math.abs(calcWork - parseFloat(position.total_commercial_works_cost || '0'));
  if (workDiff > 1) {
    console.log(`   ‚ö†Ô∏è –†–ê–°–•–û–ñ–î–ï–ù–ò–ï: ${workDiff.toLocaleString('ru-RU')} ‚ÇΩ`);
  } else {
    console.log(`   ‚úÖ –ó–Ω–∞—á–µ–Ω–∏—è —Å–æ–≤–ø–∞–¥–∞—é—Ç`);
  }
}

// –ü–æ–ª—É—á–∞–µ–º ID –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
const positionId = process.argv[2] || 'e4f6ccfe-6215-4df2-8499-585d568ce17c';

checkPosition(positionId)
  .then(() => {
    console.log('\n‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    process.exit(0);
  })
  .catch((error) => {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
    process.exit(1);
  });