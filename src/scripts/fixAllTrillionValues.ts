/**
 * Fix ALL positions with trillion values in database
 */
import { createClient } from '@supabase/supabase-js';
import * as dotenv from 'dotenv';
import * as path from 'path';

// Load environment variables
dotenv.config({ path: path.resolve(process.cwd(), '.env.local') });

const supabaseUrl = process.env.VITE_SUPABASE_URL;
const supabaseAnonKey = process.env.VITE_SUPABASE_ANON_KEY;

if (!supabaseUrl || !supabaseAnonKey) {
  console.error('‚ùå Missing required environment variables');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseAnonKey);

async function findAndFixTrillionValues() {
  console.log('üîç –ü–æ–∏—Å–∫ –í–°–ï–• –ø–æ–∑–∏—Ü–∏–π —Å —Ç—Ä–∏–ª–ª–∏–æ–Ω–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –≤ –ë–î...\n');

  // –ò—â–µ–º –≤—Å–µ –ø–æ–∑–∏—Ü–∏–∏ —Å –∫–æ–º–º–µ—Ä—á–µ—Å–∫–∏–º–∏ —Å—Ç–æ–∏–º–æ—Å—Ç—è–º–∏ –±–æ–ª—å—à–µ –º–∏–ª–ª–∏–∞—Ä–¥–∞
  const billion = 1000000000;

  const { data: positions, error } = await supabase
    .from('client_positions')
    .select('*')
    .or(`total_commercial_materials_cost.gt.${billion},total_commercial_works_cost.gt.${billion}`);

  if (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞:', error);
    return;
  }

  if (!positions || positions.length === 0) {
    console.log('‚úÖ –¢—Ä–∏–ª–ª–∏–æ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!');
    console.log('   –í—Å–µ –∫–æ–º–º–µ—Ä—á–µ—Å–∫–∏–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –≤ –ë–î –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã.');
    return;
  }

  console.log(`‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ ${positions.length} –ø–æ–∑–∏—Ü–∏–π —Å —Ç—Ä–∏–ª–ª–∏–æ–Ω–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏:\n`);

  // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ç–µ–Ω–¥–µ—Ä–∞–º
  const tenderMap = new Map<string, any[]>();

  for (const pos of positions) {
    if (!tenderMap.has(pos.tender_id)) {
      tenderMap.set(pos.tender_id, []);
    }
    tenderMap.get(pos.tender_id)?.push(pos);
  }

  console.log(`üìã –ó–∞—Ç—Ä–æ–Ω—É—Ç–æ —Ç–µ–Ω–¥–µ—Ä–æ–≤: ${tenderMap.size}\n`);

  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Ç–µ–Ω–¥–µ—Ä
  for (const [tenderId, tenderPositions] of tenderMap) {
    console.log(`\nüîÑ –¢–µ–Ω–¥–µ—Ä: ${tenderId}`);
    console.log(`   –ü–æ–∑–∏—Ü–∏–π —Å –ø—Ä–æ–±–ª–µ–º–∞–º–∏: ${tenderPositions.length}`);

    // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç—ã –Ω–∞–∫—Ä—É—Ç–æ–∫ –¥–ª—è —Ç–µ–Ω–¥–µ—Ä–∞
    const { data: markup, error: markupError } = await supabase
      .from('tender_markup_percentages')
      .select('*')
      .eq('tender_id', tenderId)
      .eq('is_active', true)
      .single();

    if (markupError || !markup) {
      console.error(`   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ü–µ–Ω—Ç—ã –Ω–∞–∫—Ä—É—Ç–æ–∫`);
      continue;
    }

    // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—É—é –ø–æ–∑–∏—Ü–∏—é
    for (const position of tenderPositions) {
      const commercialMaterials = parseFloat(position.total_commercial_materials_cost || '0');
      const commercialWorks = parseFloat(position.total_commercial_works_cost || '0');

      console.log(`\n   –ü–æ–∑–∏—Ü–∏—è ‚Ññ${position.position_number}: ${position.work_name?.substring(0, 40)}...`);

      if (commercialMaterials > billion) {
        console.log(`      ‚ùå –ú–∞—Ç–µ—Ä–∏–∞–ª—ã –ö–ü: ${commercialMaterials.toExponential(2)} (${(commercialMaterials / billion).toFixed(1)} –º–ª—Ä–¥)`);
      }

      if (commercialWorks > billion) {
        console.log(`      ‚ùå –†–∞–±–æ—Ç—ã –ö–ü: ${commercialWorks.toExponential(2)} (${(commercialWorks / billion).toFixed(1)} –º–ª—Ä–¥)`);
      }

      // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
      const baseMaterials = parseFloat(position.total_materials_cost || '0');
      const baseWorks = parseFloat(position.total_works_cost || '0');

      let correctMaterials = 0;
      let correctWorks = 0;

      // –†–∞—Å—á–µ—Ç –¥–ª—è –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
      if (baseMaterials > 0) {
        const m1 = baseMaterials * (1 + markup.materials_cost_growth / 100);
        const m2 = baseMaterials * (1 + markup.contingency_costs / 100);
        const m3 = (m1 + m2 - baseMaterials) * (1 + markup.overhead_own_forces / 100);
        const m4 = m3 * (1 + markup.general_costs_without_subcontract / 100);
        correctMaterials = m4 * (1 + markup.profit_own_forces / 100);
      }

      // –†–∞—Å—á–µ—Ç –¥–ª—è —Ä–∞–±–æ—Ç
      if (baseWorks > 0) {
        const w1 = baseWorks * (1 + markup.works_16_markup / 100);
        const w2 = w1 * (1 + markup.works_cost_growth / 100);
        const w3 = baseWorks * (1 + markup.contingency_costs / 100);
        const w4 = (w2 + w3 - baseWorks) * (1 + markup.overhead_own_forces / 100);
        const w5 = w4 * (1 + markup.general_costs_without_subcontract / 100);
        correctWorks = w5 * (1 + markup.profit_own_forces / 100);
      }

      console.log(`      ‚úÖ –î–æ–ª–∂–Ω–æ –±—ã—Ç—å:`);
      console.log(`         –ú–∞—Ç–µ—Ä–∏–∞–ª—ã: ${Math.round(correctMaterials).toLocaleString('ru-RU')} ‚ÇΩ`);
      console.log(`         –†–∞–±–æ—Ç—ã: ${Math.round(correctWorks).toLocaleString('ru-RU')} ‚ÇΩ`);

      // –û–±–Ω–æ–≤–ª—è–µ–º –≤ –ë–î
      const { error: updateError } = await supabase
        .from('client_positions')
        .update({
          total_commercial_materials_cost: correctMaterials,
          total_commercial_works_cost: correctWorks
        })
        .eq('id', position.id);

      if (updateError) {
        console.error(`      ‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:`, updateError);
      } else {
        console.log(`      ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ!`);
      }
    }
  }

  // –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
  console.log('\n\n‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
  console.log('üìä –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞...\n');

  const { data: checkData, error: checkError } = await supabase
    .from('client_positions')
    .select('id')
    .or(`total_commercial_materials_cost.gt.${billion},total_commercial_works_cost.gt.${billion}`);

  if (checkError) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏:', checkError);
  } else if (!checkData || checkData.length === 0) {
    console.log('‚úÖ –í–°–ï –¢–†–ò–õ–õ–ò–û–ù–ù–´–ï –ó–ù–ê–ß–ï–ù–ò–Ø –ò–°–ü–†–ê–í–õ–ï–ù–´!');
    console.log('   –í –ë–î –±–æ–ª—å—à–µ –Ω–µ—Ç –ø–æ–∑–∏—Ü–∏–π —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ —Å—Ç–æ–∏–º–æ—Å—Ç—è–º–∏.');
  } else {
    console.log(`‚ö†Ô∏è –û—Å—Ç–∞–ª–æ—Å—å ${checkData.length} –ø–æ–∑–∏—Ü–∏–π —Å —Ç—Ä–∏–ª–ª–∏–æ–Ω–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏`);
    console.log('   –í–æ–∑–º–æ–∂–Ω–æ, —Ç—Ä–µ–±—É–µ—Ç—Å—è —Ä—É—á–Ω–æ–µ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ.');
  }
}

findAndFixTrillionValues()
  .then(() => {
    console.log('\n‚úÖ –°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–µ–Ω');
    process.exit(0);
  })
  .catch((error) => {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
  });