/**
 * Script to reset and recalculate commercial costs
 * First resets all commercial costs to 0, then recalculates with correct formula
 */
import { createClient } from '@supabase/supabase-js';
import * as dotenv from 'dotenv';
import * as path from 'path';

// Load environment variables
dotenv.config({ path: path.resolve(process.cwd(), '.env.local') });

const supabaseUrl = process.env.VITE_SUPABASE_URL;
const supabaseAnonKey = process.env.VITE_SUPABASE_ANON_KEY;

if (!supabaseUrl || !supabaseAnonKey) {
  console.error('‚ùå Missing required environment variables');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseAnonKey);

async function resetAndRecalculate() {
  const tenderId = '736dc11c-33dc-4fce-a7ee-c477abb8b694'; // –ñ–ö –ê–¥–º–∏—Ä–∞–ª

  console.log('üîÑ –≠–¢–ê–ü 1: –°–±—Ä–æ—Å –≤—Å–µ—Ö –∫–æ–º–º–µ—Ä—á–µ—Å–∫–∏—Ö —Å—Ç–æ–∏–º–æ—Å—Ç–µ–π –Ω–∞ 0...\n');

  // –°–Ω–∞—á–∞–ª–∞ –æ–±–Ω—É–ª—è–µ–º –í–°–ï –∫–æ–º–º–µ—Ä—á–µ—Å–∫–∏–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏
  const { error: resetError, count } = await supabase
    .from('client_positions')
    .update({
      total_commercial_materials_cost: 0,
      total_commercial_works_cost: 0
    })
    .eq('tender_id', tenderId);

  if (resetError) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –∫–æ–º–º–µ—Ä—á–µ—Å–∫–∏—Ö —Å—Ç–æ–∏–º–æ—Å—Ç–µ–π:', resetError);
    return;
  }

  console.log(`‚úÖ –û–±–Ω—É–ª–µ–Ω–æ –∫–æ–º–º–µ—Ä—á–µ—Å–∫–∏—Ö —Å—Ç–æ–∏–º–æ—Å—Ç–µ–π –≤ ${count || 0} –ø–æ–∑–∏—Ü–∏—è—Ö\n`);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω—É–ª–∏–ª–æ—Å—å
  const { data: checkData, error: checkError } = await supabase
    .from('client_positions')
    .select('position_number, total_commercial_materials_cost, total_commercial_works_cost')
    .eq('tender_id', tenderId)
    .eq('position_number', 8)
    .single();

  if (checkData) {
    console.log('üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–∑–∏—Ü–∏–∏ 8 –ø–æ—Å–ª–µ –æ–±–Ω—É–ª–µ–Ω–∏—è:');
    console.log(`   –ú–∞—Ç–µ—Ä–∏–∞–ª—ã –ö–ü: ${checkData.total_commercial_materials_cost}`);
    console.log(`   –†–∞–±–æ—Ç—ã –ö–ü: ${checkData.total_commercial_works_cost}\n`);
  }

  console.log('üîÑ –≠–¢–ê–ü 2: –ü–µ—Ä–µ—Å—á–µ—Ç –∫–æ–º–º–µ—Ä—á–µ—Å–∫–∏—Ö —Å—Ç–æ–∏–º–æ—Å—Ç–µ–π —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ñ–æ—Ä–º—É–ª–æ–π...\n');

  // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç—ã –Ω–∞–∫—Ä—É—Ç–æ–∫
  const { data: markup, error: markupError } = await supabase
    .from('tender_markup_percentages')
    .select('*')
    .eq('tender_id', tenderId)
    .eq('is_active', true)
    .single();

  if (markupError) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ –Ω–∞–∫—Ä—É—Ç–æ–∫:', markupError);
    return;
  }

  console.log('üìä –ê–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ—Ü–µ–Ω—Ç—ã –Ω–∞–∫—Ä—É—Ç–æ–∫:');
  console.log(`   –†–∞–±–æ—Ç—ã 1.6: ${markup.works_16_markup}%`);
  console.log(`   –†–æ—Å—Ç —Ä–∞–±–æ—Ç: ${markup.works_cost_growth}%`);
  console.log(`   –†–æ—Å—Ç –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤: ${markup.materials_cost_growth}%`);
  console.log(`   –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω—ã–µ: ${markup.contingency_costs}%`);
  console.log(`   –û–û–ó —Å–æ–±—Å—Ç–≤.: ${markup.overhead_own_forces}%`);
  console.log(`   –û–§–ó: ${markup.general_costs_without_subcontract}%`);
  console.log(`   –ü—Ä–∏–±—ã–ª—å —Å–æ–±—Å—Ç–≤.: ${markup.profit_own_forces}%\n`);

  // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –ø–µ—Ä–µ—Å—á–µ—Ç–∞
  const { data: positions, error: posError } = await supabase
    .from('client_positions')
    .select('id, position_number, work_name, total_materials_cost, total_works_cost')
    .eq('tender_id', tenderId)
    .order('position_number');

  if (posError) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π:', posError);
    return;
  }

  console.log(`üìã –ù–∞–π–¥–µ–Ω–æ ${positions?.length || 0} –ø–æ–∑–∏—Ü–∏–π –¥–ª—è –ø–µ—Ä–µ—Å—á–µ—Ç–∞\n`);

  let updatedCount = 0;
  let totalBaseMaterials = 0;
  let totalBaseWorks = 0;
  let totalCommercialMaterials = 0;
  let totalCommercialWorks = 0;

  // –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—á–µ—Ç–∞ –¥–ª—è –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
  function calculateMaterialsCommercial(base: number): number {
    if (base === 0) return 0;

    const step1 = base * (1 + markup.materials_cost_growth / 100);
    const step2 = base * (1 + markup.contingency_costs / 100);
    const step3 = (step1 + step2 - base) * (1 + markup.overhead_own_forces / 100);
    const step4 = step3 * (1 + markup.general_costs_without_subcontract / 100);
    const step5 = step4 * (1 + markup.profit_own_forces / 100);

    return step5;
  }

  // –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—á–µ—Ç–∞ –¥–ª—è —Ä–∞–±–æ—Ç
  function calculateWorksCommercial(base: number): number {
    if (base === 0) return 0;

    const step1 = base * (1 + markup.works_16_markup / 100);
    const step2 = step1 * (1 + markup.works_cost_growth / 100);
    const step3 = base * (1 + markup.contingency_costs / 100);
    const step4 = (step2 + step3 - base) * (1 + markup.overhead_own_forces / 100);
    const step5 = step4 * (1 + markup.general_costs_without_subcontract / 100);
    const step6 = step5 * (1 + markup.profit_own_forces / 100);

    return step6;
  }

  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é –ø–æ–∑–∏—Ü–∏—é
  for (const position of positions || []) {
    const baseMaterials = parseFloat(position.total_materials_cost || '0');
    const baseWorks = parseFloat(position.total_works_cost || '0');

    if (baseMaterials > 0 || baseWorks > 0) {
      const commercialMaterials = calculateMaterialsCommercial(baseMaterials);
      const commercialWorks = calculateWorksCommercial(baseWorks);

      // –û–±–Ω–æ–≤–ª—è–µ–º –≤ –ë–î
      const { error: updateError } = await supabase
        .from('client_positions')
        .update({
          total_commercial_materials_cost: commercialMaterials,
          total_commercial_works_cost: commercialWorks
        })
        .eq('id', position.id);

      if (updateError) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏ ${position.position_number}:`, updateError);
      } else {
        // –í—ã–≤–æ–¥–∏–º –¥–µ—Ç–∞–ª–∏ –¥–ª—è –≤–∞–∂–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π
        if (position.position_number === 8 ||
            position.position_number === 119 ||
            position.position_number <= 5 ||
            (baseMaterials + baseWorks) > 1000000) {
          console.log(`‚úÖ –ü–æ–∑–∏—Ü–∏—è ${position.position_number}: ${position.work_name?.substring(0, 50)}...`);
          console.log(`   –ë–∞–∑–∞: –ú=${baseMaterials.toLocaleString('ru-RU')} –†=${baseWorks.toLocaleString('ru-RU')}`);
          console.log(`   –ö–ü:   –ú=${Math.round(commercialMaterials).toLocaleString('ru-RU')} –†=${Math.round(commercialWorks).toLocaleString('ru-RU')}`);

          if (baseMaterials > 0) {
            const markupPercent = ((commercialMaterials - baseMaterials) / baseMaterials * 100).toFixed(1);
            console.log(`   –ù–∞—Ü–µ–Ω–∫–∞ –Ω–∞ –º–∞—Ç–µ—Ä–∏–∞–ª—ã: ${markupPercent}%`);
          }
          if (baseWorks > 0) {
            const markupPercent = ((commercialWorks - baseWorks) / baseWorks * 100).toFixed(1);
            console.log(`   –ù–∞—Ü–µ–Ω–∫–∞ –Ω–∞ —Ä–∞–±–æ—Ç—ã: ${markupPercent}%`);
          }
          console.log('');
        }

        updatedCount++;
        totalBaseMaterials += baseMaterials;
        totalBaseWorks += baseWorks;
        totalCommercialMaterials += commercialMaterials;
        totalCommercialWorks += commercialWorks;
      }
    }
  }

  console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n');
  console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ ${updatedCount} –ø–æ–∑–∏—Ü–∏–π\n`);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–∑–∏—Ü–∏—é 8 –ø–æ—Å–ª–µ –ø–µ—Ä–µ—Å—á–µ—Ç–∞
  const { data: finalCheck, error: finalError } = await supabase
    .from('client_positions')
    .select('position_number, total_materials_cost, total_works_cost, total_commercial_materials_cost, total_commercial_works_cost')
    .eq('tender_id', tenderId)
    .eq('position_number', 8)
    .single();

  if (finalCheck) {
    console.log('üéØ –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –ü–û–ó–ò–¶–ò–ò 8:');
    console.log(`   –ë–∞–∑–∞ –º–∞—Ç–µ—Ä–∏–∞–ª—ã: ${parseFloat(finalCheck.total_materials_cost).toLocaleString('ru-RU')} ‚ÇΩ`);
    console.log(`   –ë–∞–∑–∞ —Ä–∞–±–æ—Ç—ã: ${parseFloat(finalCheck.total_works_cost).toLocaleString('ru-RU')} ‚ÇΩ`);
    console.log(`   –ö–ü –º–∞—Ç–µ—Ä–∏–∞–ª—ã: ${parseFloat(finalCheck.total_commercial_materials_cost).toLocaleString('ru-RU')} ‚ÇΩ`);
    console.log(`   –ö–ü —Ä–∞–±–æ—Ç—ã: ${parseFloat(finalCheck.total_commercial_works_cost).toLocaleString('ru-RU')} ‚ÇΩ\n`);
  }

  console.log('üìä –ò–¢–û–ì–û–í–´–ï –°–£–ú–ú–´ –ü–û –¢–ï–ù–î–ï–†–£:');
  console.log('   –ë–∞–∑–æ–≤—ã–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ (–ü–ó):');
  console.log(`      –ú–∞—Ç–µ—Ä–∏–∞–ª—ã: ${Math.round(totalBaseMaterials).toLocaleString('ru-RU')} ‚ÇΩ`);
  console.log(`      –†–∞–±–æ—Ç—ã: ${Math.round(totalBaseWorks).toLocaleString('ru-RU')} ‚ÇΩ`);
  console.log(`      –ò–¢–û–ì–û: ${Math.round(totalBaseMaterials + totalBaseWorks).toLocaleString('ru-RU')} ‚ÇΩ\n`);

  console.log('   –ö–æ–º–º–µ—Ä—á–µ—Å–∫–∏–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ (–ö–ü):');
  console.log(`      –ú–∞—Ç–µ—Ä–∏–∞–ª—ã: ${Math.round(totalCommercialMaterials).toLocaleString('ru-RU')} ‚ÇΩ`);
  console.log(`      –†–∞–±–æ—Ç—ã: ${Math.round(totalCommercialWorks).toLocaleString('ru-RU')} ‚ÇΩ`);
  console.log(`      –ò–¢–û–ì–û: ${Math.round(totalCommercialMaterials + totalCommercialWorks).toLocaleString('ru-RU')} ‚ÇΩ\n`);

  if (totalBaseMaterials + totalBaseWorks > 0) {
    const totalMarkup = ((totalCommercialMaterials + totalCommercialWorks) - (totalBaseMaterials + totalBaseWorks)) / (totalBaseMaterials + totalBaseWorks) * 100;
    console.log(`   –û–±—â–∞—è –Ω–∞—Ü–µ–Ω–∫–∞: ${totalMarkup.toFixed(1)}%`);
  }
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
console.log('üöÄ –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞ —Å–±—Ä–æ—Å–∞ –∏ –ø–µ—Ä–µ—Å—á–µ—Ç–∞ –∫–æ–º–º–µ—Ä—á–µ—Å–∫–∏—Ö —Å—Ç–æ–∏–º–æ—Å—Ç–µ–π\n');
console.log('‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –°–∫—Ä–∏–ø—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ—Å—á–∏—Ç–∞–µ—Ç –≤—Å–µ –∫–æ–º–º–µ—Ä—á–µ—Å–∫–∏–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏');
console.log('   –¥–ª—è —Ç–µ–Ω–¥–µ—Ä–∞ "–ñ–ö –ê–¥–º–∏—Ä–∞–ª" —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ —Ñ–æ—Ä–º—É–ª–∞–º–∏\n');

resetAndRecalculate()
  .then(() => {
    console.log('\n‚úÖ –°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ');
    console.log('\nüìå –ß—Ç–æ –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ:');
    console.log('   1. –û–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É "–ö–æ–º–º–µ—Ä—á–µ—Å–∫–∏–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏"');
    console.log('   2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ —Å—É–º–º–∞ —Ç–µ–ø–µ—Ä—å —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü–µ–π "–§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏"');
    console.log('   3. –ï—Å–ª–∏ –≤—Å—ë –æ–∫, —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞–∂–∞—Ç–∏–µ–º –∫–Ω–æ–ø–∫–∏ "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å"');
    process.exit(0);
  })
  .catch((error) => {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
  });