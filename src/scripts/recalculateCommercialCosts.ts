/**
 * Script to recalculate commercial costs for all positions with correct formula
 */
import { createClient } from '@supabase/supabase-js';
import * as dotenv from 'dotenv';
import * as path from 'path';

// Load environment variables
dotenv.config({ path: path.resolve(process.cwd(), '.env.local') });

const supabaseUrl = process.env.VITE_SUPABASE_URL;
const supabaseAnonKey = process.env.VITE_SUPABASE_ANON_KEY;

if (!supabaseUrl || !supabaseAnonKey) {
  console.error('‚ùå Missing required environment variables');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseAnonKey);

// –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—á–µ—Ç–∞ –∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
function calculateCommercialMaterials(baseCost: number, markups: any): number {
  if (baseCost === 0) return 0;

  const mat1 = baseCost * (1 + markups.materials_cost_growth / 100);
  const mat2 = baseCost * (1 + markups.contingency_costs / 100);
  const mat3 = (mat1 + mat2 - baseCost) * (1 + markups.overhead_own_forces / 100);
  const mat4 = mat3 * (1 + markups.general_costs_without_subcontract / 100);
  const mat5 = mat4 * (1 + markups.profit_own_forces / 100);

  return mat5;
}

// –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—á–µ—Ç–∞ –∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Ä–∞–±–æ—Ç
function calculateCommercialWorks(baseCost: number, markups: any): number {
  if (baseCost === 0) return 0;

  const work1 = baseCost * (1 + markups.works_16_markup / 100);
  const work2 = work1 * (1 + markups.works_cost_growth / 100);
  const work3 = baseCost * (1 + markups.contingency_costs / 100);
  const work4 = (work2 + work3 - baseCost) * (1 + markups.overhead_own_forces / 100);
  const work5 = work4 * (1 + markups.general_costs_without_subcontract / 100);
  const work6 = work5 * (1 + markups.profit_own_forces / 100);

  return work6;
}

// –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—á–µ—Ç–∞ –∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Å—É–±–º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
function calculateCommercialSubmaterials(baseCost: number, markups: any): number {
  if (baseCost === 0) return 0;

  const submat1 = baseCost * (1 + markups.subcontract_materials_cost_growth / 100);
  const submat2 = submat1 * (1 + markups.overhead_subcontract / 100);
  const submat3 = submat2 * (1 + markups.profit_subcontract / 100);

  return submat3;
}

// –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—á–µ—Ç–∞ –∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Å—É–±—Ä–∞–±–æ—Ç
function calculateCommercialSubworks(baseCost: number, markups: any): number {
  if (baseCost === 0) return 0;

  const subwork1 = baseCost * (1 + markups.subcontract_works_cost_growth / 100);
  const subwork2 = subwork1 * (1 + markups.overhead_subcontract / 100);
  const subwork3 = subwork2 * (1 + markups.profit_subcontract / 100);

  return subwork3;
}

async function recalculateCommercialCosts() {
  console.log('üîÑ –ü–µ—Ä–µ—Å—á–µ—Ç –∫–æ–º–º–µ—Ä—á–µ—Å–∫–∏—Ö —Å—Ç–æ–∏–º–æ—Å—Ç–µ–π –¥–ª—è –≤—Å–µ—Ö –ø–æ–∑–∏—Ü–∏–π...\n');

  const tenderId = '736dc11c-33dc-4fce-a7ee-c477abb8b694'; // –ñ–ö –ê–¥–º–∏—Ä–∞–ª

  // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç—ã –Ω–∞–∫—Ä—É—Ç–æ–∫
  const { data: markup, error: markupError } = await supabase
    .from('tender_markup_percentages')
    .select('*')
    .eq('tender_id', tenderId)
    .eq('is_active', true)
    .single();

  if (markupError) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ –Ω–∞–∫—Ä—É—Ç–æ–∫:', markupError);
    return;
  }

  console.log('üìä –ü—Ä–æ—Ü–µ–Ω—Ç—ã –Ω–∞–∫—Ä—É—Ç–æ–∫:');
  console.log(`   –†–∞–±–æ—Ç—ã 1.6: ${markup.works_16_markup}%`);
  console.log(`   –†–æ—Å—Ç —Ä–∞–±–æ—Ç: ${markup.works_cost_growth}%`);
  console.log(`   –†–æ—Å—Ç –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤: ${markup.materials_cost_growth}%`);
  console.log(`   –†–æ—Å—Ç —Å—É–±—Ä–∞–±–æ—Ç: ${markup.subcontract_works_cost_growth}%`);
  console.log(`   –†–æ—Å—Ç —Å—É–±–º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤: ${markup.subcontract_materials_cost_growth}%`);
  console.log(`   –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω—ã–µ: ${markup.contingency_costs}%`);
  console.log(`   –û–û–ó —Å–æ–±—Å—Ç–≤.: ${markup.overhead_own_forces}%`);
  console.log(`   –û–û–ó —Å—É–±–ø–æ–¥—Ä—è–¥: ${markup.overhead_subcontract}%`);
  console.log(`   –û–§–ó: ${markup.general_costs_without_subcontract}%`);
  console.log(`   –ü—Ä–∏–±—ã–ª—å —Å–æ–±—Å—Ç–≤.: ${markup.profit_own_forces}%`);
  console.log(`   –ü—Ä–∏–±—ã–ª—å —Å—É–±–ø–æ–¥—Ä—è–¥: ${markup.profit_subcontract}%\n`);

  // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–æ–∑–∏—Ü–∏–∏ —Å –±–∞–∑–æ–≤—ã–º–∏ –∏ –∫–æ–º–º–µ—Ä—á–µ—Å–∫–∏–º–∏ —Å—Ç–æ–∏–º–æ—Å—Ç—è–º–∏ –∏–∑ commercial_costs_by_category
  const { data: categories, error: catError } = await supabase
    .from('commercial_costs_by_category')
    .select('*')
    .eq('tender_id', tenderId);

  if (catError) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∑–∞—Ç—Ä–∞—Ç:', catError);
    return;
  }

  console.log(`üìã –ù–∞–π–¥–µ–Ω–æ ${categories?.length || 0} –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∑–∞—Ç—Ä–∞—Ç –¥–ª—è –ø–µ—Ä–µ—Å—á–µ—Ç–∞\n`);

  // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–æ–∑–∏—Ü–∏–∏
  const { data: positions, error: posError } = await supabase
    .from('client_positions')
    .select('*')
    .eq('tender_id', tenderId)
    .order('position_number');

  if (posError) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π:', posError);
    return;
  }

  console.log(`üìã –ù–∞–π–¥–µ–Ω–æ ${positions?.length || 0} –ø–æ–∑–∏—Ü–∏–π –¥–ª—è –ø–µ—Ä–µ—Å—á–µ—Ç–∞\n`);

  let totalBaseMaterials = 0;
  let totalBaseWorks = 0;
  let totalCommercialMaterials = 0;
  let totalCommercialWorks = 0;
  let updatedCount = 0;

  // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–ª—è –∫–∞–∂–¥–æ–π –ø–æ–∑–∏—Ü–∏–∏
  for (const position of positions || []) {
    const baseMaterials = parseFloat(position.total_materials_cost || '0');
    const baseWorks = parseFloat(position.total_works_cost || '0');

    if (baseMaterials > 0 || baseWorks > 0) {
      // –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ –ø—Ä—è–º—ã–µ –∏ —Å—É–±–ø–æ–¥—Ä—è–¥–Ω—ã–µ –∑–∞—Ç—Ä–∞—Ç—ã
      // –î–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ –µ—Å–ª–∏ –ø–æ–∑–∏—Ü–∏—è —Å–æ–¥–µ—Ä–∂–∏—Ç "—Å—É–±–ø–æ–¥—Ä—è–¥" –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏, —Ç–æ —ç—Ç–æ —Å—É–±–ø–æ–¥—Ä—è–¥
      const isSubcontract = position.work_name?.toLowerCase().includes('—Å—É–±–ø–æ–¥—Ä—è–¥') || false;

      let commercialMaterials = 0;
      let commercialWorks = 0;

      if (isSubcontract) {
        commercialMaterials = calculateCommercialSubmaterials(baseMaterials, markup);
        commercialWorks = calculateCommercialSubworks(baseWorks, markup);
      } else {
        commercialMaterials = calculateCommercialMaterials(baseMaterials, markup);
        commercialWorks = calculateCommercialWorks(baseWorks, markup);
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      const { error: updateError } = await supabase
        .from('client_positions')
        .update({
          total_commercial_materials_cost: commercialMaterials,
          total_commercial_works_cost: commercialWorks
        })
        .eq('id', position.id);

      if (updateError) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏ ${position.position_number}:`, updateError);
      } else {
        if (position.position_number <= 20 || position.position_number % 50 === 0) {
          console.log(`‚úÖ –ü–æ–∑–∏—Ü–∏—è ${position.position_number}: ${position.work_name?.substring(0, 40)}...`);
          console.log(`   –ë–∞–∑–∞: –ú=${baseMaterials.toLocaleString('ru-RU')} –†=${baseWorks.toLocaleString('ru-RU')}`);
          console.log(`   –ö–ü: –ú=${Math.round(commercialMaterials).toLocaleString('ru-RU')} –†=${Math.round(commercialWorks).toLocaleString('ru-RU')}\n`);
        }
        updatedCount++;

        totalBaseMaterials += baseMaterials;
        totalBaseWorks += baseWorks;
        totalCommercialMaterials += commercialMaterials;
        totalCommercialWorks += commercialWorks;
      }
    }
  }

  console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
  console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ ${updatedCount} –ø–æ–∑–∏—Ü–∏–π\n`);

  console.log('üìä –ò–¢–û–ì–û–í–´–ï –°–£–ú–ú–´:');
  console.log('   –ë–∞–∑–æ–≤—ã–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ (–ü–ó):');
  console.log(`      –ú–∞—Ç–µ—Ä–∏–∞–ª—ã: ${Math.round(totalBaseMaterials).toLocaleString('ru-RU')} ‚ÇΩ`);
  console.log(`      –†–∞–±–æ—Ç—ã: ${Math.round(totalBaseWorks).toLocaleString('ru-RU')} ‚ÇΩ`);
  console.log(`      –ò–¢–û–ì–û: ${Math.round(totalBaseMaterials + totalBaseWorks).toLocaleString('ru-RU')} ‚ÇΩ\n`);

  console.log('   –ö–æ–º–º–µ—Ä—á–µ—Å–∫–∏–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ (–ö–ü):');
  console.log(`      –ú–∞—Ç–µ—Ä–∏–∞–ª—ã: ${Math.round(totalCommercialMaterials).toLocaleString('ru-RU')} ‚ÇΩ`);
  console.log(`      –†–∞–±–æ—Ç—ã: ${Math.round(totalCommercialWorks).toLocaleString('ru-RU')} ‚ÇΩ`);
  console.log(`      –ò–¢–û–ì–û: ${Math.round(totalCommercialMaterials + totalCommercialWorks).toLocaleString('ru-RU')} ‚ÇΩ\n`);

  const totalMarkup = ((totalCommercialMaterials + totalCommercialWorks) - (totalBaseMaterials + totalBaseWorks)) / (totalBaseMaterials + totalBaseWorks) * 100;
  console.log(`   –û–±—â–∞—è –Ω–∞—Ü–µ–Ω–∫–∞: ${totalMarkup.toFixed(1)}%`);

  // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–∫–∂–µ –±–∞–∑—É commercial_costs_by_category
  console.log('\nüîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã commercial_costs_by_category...');

  for (const category of categories || []) {
    const baseMaterials = parseFloat(category.total_materials_cost || '0');
    const baseWorks = parseFloat(category.total_works_cost || '0');
    const baseSubmaterials = parseFloat(category.total_submaterials_cost || '0');
    const baseSubworks = parseFloat(category.total_subworks_cost || '0');

    const commercialMaterials = calculateCommercialMaterials(baseMaterials, markup);
    const commercialWorks = calculateCommercialWorks(baseWorks, markup);
    const commercialSubmaterials = calculateCommercialSubmaterials(baseSubmaterials, markup);
    const commercialSubworks = calculateCommercialSubworks(baseSubworks, markup);

    const { error: updateCatError } = await supabase
      .from('commercial_costs_by_category')
      .update({
        total_commercial_materials_cost: commercialMaterials,
        total_commercial_works_cost: commercialWorks,
        total_commercial_submaterials_cost: commercialSubmaterials,
        total_commercial_subworks_cost: commercialSubworks
      })
      .eq('id', category.id);

    if (updateCatError) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ${category.detail_category_name}:`, updateCatError);
    }
  }

  console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ commercial_costs_by_category –æ–±–Ω–æ–≤–ª–µ–Ω–∞');
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
recalculateCommercialCosts()
  .then(() => {
    console.log('\n‚úÖ –ü–µ—Ä–µ—Å—á–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ');
    console.log('üìå –¢–µ–ø–µ—Ä—å —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–æ–ª–∂–Ω—ã —Å–æ–≤–ø–∞–¥–∞—Ç—å –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö:');
    console.log('   - –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏');
    console.log('   - –ö–æ–º–º–µ—Ä—á–µ—Å–∫–∏–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏');
    process.exit(0);
  })
  .catch((error) => {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞:', error);
    process.exit(1);
  });