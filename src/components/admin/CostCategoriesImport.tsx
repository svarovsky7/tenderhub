import React, { useState } from 'react';
import { Upload, Button, Table, message, Card, Space, Typography, Alert, Progress } from 'antd';
import { UploadOutlined, DownloadOutlined, DeleteOutlined } from '@ant-design/icons';
import type { UploadProps } from 'antd';
import * as XLSX from 'xlsx';
import { 
  importCostCategoriesWithOverwrite as importCostCategories, 
  type CostCategoryImportData 
} from '../../lib/supabase/api/cost-categories-import';

const { Title, Text } = Typography;

export const CostCategoriesImport: React.FC = () => {
  const [loading, setLoading] = useState(false);
  const [previewData, setPreviewData] = useState<CostCategoryImportData[]>([]);
  const [importProgress, setImportProgress] = useState(0);
  const [importResults, setImportResults] = useState<{
    success: number;
    failed: number;
    errors: string[];
  } | null>(null);

  const handleFileUpload: UploadProps['customRequest'] = async (options) => {
    console.log('üöÄ [CostCategoriesImport] File upload started');
    const { file } = options;
    
    try {
      setLoading(true);
      setImportResults(null);
      
      const reader = new FileReader();
      reader.onload = async (e) => {
        try {
          const data = e.target?.result;
          const workbook = XLSX.read(data, { type: 'binary' });
          const sheetName = workbook.SheetNames[0];
          const worksheet = workbook.Sheets[sheetName];
          const jsonData = XLSX.utils.sheet_to_json(worksheet, { header: 1 }) as any[][];
          
          console.log('üì¶ [CostCategoriesImport] Excel data parsed:', jsonData.length, 'rows');
          
          // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ
          // –ü–µ—Ä–≤—ã–π —Å—Ç–æ–ª–±–µ—Ü —Ç–µ–ø–µ—Ä—å —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω—É–º–µ—Ä–∞—Ü–∏—é
          const importData: CostCategoryImportData[] = [];
          
          for (let i = 1; i < jsonData.length; i++) {
            const row = jsonData[i];
            if (row && row.length >= 5) {
              importData.push({
                sortOrder: parseInt(String(row[0] || i), 10) || i, // –ù—É–º–µ—Ä–∞—Ü–∏—è –∏–∑ –ø–µ—Ä–≤–æ–≥–æ —Å—Ç–æ–ª–±—Ü–∞
                categoryName: String(row[1] || '').trim(),
                categoryUnit: row[2] ? String(row[2]).trim() : undefined,
                detailCategoryName: String(row[3] || '').trim(),
                detailCategoryUnit: String(row[4] || '').trim(),
                locationName: String(row[5] || '').trim()
              });
            }
          }
          
          console.log('‚úÖ [CostCategoriesImport] Data prepared:', importData.length, 'valid rows');
          setPreviewData(importData);
          options.onSuccess?.(null);
        } catch (error) {
          console.error('‚ùå [CostCategoriesImport] Failed to parse Excel:', error);
          message.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ Excel');
          options.onError?.(error as Error);
        }
      };
      
      reader.readAsBinaryString(file as File);
    } catch (error) {
      console.error('‚ùå [CostCategoriesImport] Upload error:', error);
      message.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞');
      options.onError?.(error as Error);
    } finally {
      setLoading(false);
    }
  };

  const handleImport = async () => {
    console.log('üöÄ [CostCategoriesImport] Import started');
    
    if (previewData.length === 0) {
      message.warning('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞');
      return;
    }
    
    setLoading(true);
    setImportProgress(0);
    
    try {
      // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–∞–∫–µ—Ç–∞–º–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
      const batchSize = 10;
      const totalBatches = Math.ceil(previewData.length / batchSize);
      let allResults = {
        success: 0,
        failed: 0,
        errors: [] as string[]
      };
      
      for (let i = 0; i < totalBatches; i++) {
        const batch = previewData.slice(i * batchSize, (i + 1) * batchSize);
        const batchResults = await importCostCategories(batch);
        
        allResults.success += batchResults.success;
        allResults.failed += batchResults.failed;
        allResults.errors.push(...batchResults.errors);
        
        setImportProgress(Math.round(((i + 1) / totalBatches) * 100));
      }
      
      setImportResults(allResults);
      
      if (allResults.failed === 0) {
        message.success(`–£—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ ${allResults.success} –∑–∞–ø–∏—Å–µ–π`);
      } else {
        message.warning(`–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ ${allResults.success} –∑–∞–ø–∏—Å–µ–π, –æ—à–∏–±–æ–∫: ${allResults.failed}`);
      }
      
      console.log('‚úÖ [CostCategoriesImport] Import completed:', allResults);
    } catch (error) {
      console.error('‚ùå [CostCategoriesImport] Import failed:', error);
      message.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –¥–∞–Ω–Ω—ã—Ö');
    } finally {
      setLoading(false);
      setImportProgress(0);
    }
  };

  const handleClear = () => {
    console.log('üîÑ [CostCategoriesImport] Clearing data');
    setPreviewData([]);
    setImportResults(null);
    setImportProgress(0);
  };

  const downloadTemplate = () => {
    console.log('üì• [CostCategoriesImport] Downloading template');
    
    const templateData = [
      ['‚Ññ', '–ö–∞—Ç–µ–≥–æ—Ä–∏—è –∑–∞—Ç—Ä–∞—Ç', '–ï–¥. –∏–∑–º. –∫–∞—Ç–µ–≥–æ—Ä–∏–∏', '–î–µ—Ç–∞–ª—å–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è', '–ï–¥. –∏–∑–º. –¥–µ—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏', '–õ–æ–∫–∞—Ü–∏—è'],
      ['1', '–ú–∞—Ç–µ—Ä–∏–∞–ª—ã', '—à—Ç', '–ë–µ—Ç–æ–Ω –ú300', '–º¬≥', '–û–±—ä–µ–∫—Ç ‚Ññ1'],
      ['2', '–ú–∞—Ç–µ—Ä–∏–∞–ª—ã', '—à—Ç', '–ê—Ä–º–∞—Ç—É—Ä–∞ –ê500–°', '—Ç–Ω', '–û–±—ä–µ–∫—Ç ‚Ññ1'],
      ['3', '–†–∞–±–æ—Ç—ã', '—É—Å–ª—É–≥–∞', '–ú–æ–Ω—Ç–∞–∂ –æ–ø–∞–ª—É–±–∫–∏', '–º¬≤', '–û–±—ä–µ–∫—Ç ‚Ññ2'],
      ['4', '–†–∞–±–æ—Ç—ã', '—É—Å–ª—É–≥–∞', '–£–∫–ª–∞–¥–∫–∞ –±–µ—Ç–æ–Ω–∞', '–º¬≥', '–û–±—ä–µ–∫—Ç ‚Ññ2'],
    ];
    
    const ws = XLSX.utils.aoa_to_sheet(templateData);
    const wb = XLSX.utils.book_new();
    XLSX.utils.book_append_sheet(wb, ws, '–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∑–∞—Ç—Ä–∞—Ç');
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —à–∏—Ä–∏–Ω—É –∫–æ–ª–æ–Ω–æ–∫
    ws['!cols'] = [
      { wch: 5 },  // ‚Ññ
      { wch: 20 }, // –ö–∞—Ç–µ–≥–æ—Ä–∏—è –∑–∞—Ç—Ä–∞—Ç
      { wch: 20 }, // –ï–¥. –∏–∑–º. –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
      { wch: 30 }, // –î–µ—Ç–∞–ª—å–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è
      { wch: 25 }, // –ï–¥. –∏–∑–º. –¥–µ—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
      { wch: 20 }, // –õ–æ–∫–∞—Ü–∏—è
    ];
    
    XLSX.writeFile(wb, 'cost_categories_template.xlsx');
    message.success('–®–∞–±–ª–æ–Ω —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω');
  };

  const columns = [
    {
      title: '‚Ññ',
      dataIndex: 'sortOrder',
      key: 'sortOrder',
      width: '5%',
    },
    {
      title: '–ö–∞—Ç–µ–≥–æ—Ä–∏—è –∑–∞—Ç—Ä–∞—Ç',
      dataIndex: 'categoryName',
      key: 'categoryName',
      width: '20%',
    },
    {
      title: '–ï–¥. –∏–∑–º. –∫–∞—Ç–µ–≥–æ—Ä–∏–∏',
      dataIndex: 'categoryUnit',
      key: 'categoryUnit',
      width: '15%',
      render: (text: string) => text || '-',
    },
    {
      title: '–î–µ—Ç–∞–ª—å–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è',
      dataIndex: 'detailCategoryName',
      key: 'detailCategoryName',
      width: '22%',
    },
    {
      title: '–ï–¥. –∏–∑–º. –¥–µ—Ç–∞–ª—å–Ω–æ–π',
      dataIndex: 'detailCategoryUnit',
      key: 'detailCategoryUnit',
      width: '18%',
    },
    {
      title: '–õ–æ–∫–∞—Ü–∏—è',
      dataIndex: 'locationName',
      key: 'locationName',
      width: '20%',
    },
  ];

  return (
    <div className="p-6">
      <Card>
        <Title level={3}>–ò–º–ø–æ—Ä—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∑–∞—Ç—Ä–∞—Ç</Title>
        
        <Space direction="vertical" size="large" style={{ width: '100%' }}>
          <Alert
            message="–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏–º–ø–æ—Ä—Ç—É"
            description={
              <div>
                <p>1. –°–∫–∞—á–∞–π—Ç–µ —à–∞–±–ª–æ–Ω Excel —Ñ–∞–π–ª–∞ —Å –ø—Ä–∏–º–µ—Ä–æ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è</p>
                <p>2. –ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–∞–π–ª –¥–∞–Ω–Ω—ã–º–∏ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ:</p>
                <ul>
                  <li><strong>–°—Ç–æ–ª–±–µ—Ü 1:</strong> ‚Ññ - –ü–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä (–æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø–æ—Ä—è–¥–æ–∫ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è)</li>
                  <li><strong>–°—Ç–æ–ª–±–µ—Ü 2:</strong> –ö–∞—Ç–µ–≥–æ—Ä–∏—è –∑–∞—Ç—Ä–∞—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ú–∞—Ç–µ—Ä–∏–∞–ª—ã, –†–∞–±–æ—Ç—ã)</li>
                  <li><strong>–°—Ç–æ–ª–±–µ—Ü 3:</strong> –ï–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)</li>
                  <li><strong>–°—Ç–æ–ª–±–µ—Ü 4:</strong> –î–µ—Ç–∞–ª—å–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ë–µ—Ç–æ–Ω –ú300)</li>
                  <li><strong>–°—Ç–æ–ª–±–µ—Ü 5:</strong> –ï–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: –º¬≥)</li>
                  <li><strong>–°—Ç–æ–ª–±–µ—Ü 6:</strong> –õ–æ–∫–∞—Ü–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: –û–±—ä–µ–∫—Ç ‚Ññ1)</li>
                </ul>
                <p>3. –ó–∞–≥—Ä—É–∑–∏—Ç–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –∏ –Ω–∞–∂–º–∏—Ç–µ "–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å"</p>
                <p><strong>–í–∞–∂–Ω–æ:</strong> –ü—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–º –∏–º–ø–æ—Ä—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –æ–±–Ω–æ–≤–ª–µ–Ω—ã, –∞ –ø–æ—Ä—è–¥–æ–∫ –∏–∑–º–µ–Ω–∏—Ç—Å—è —Å–æ–≥–ª–∞—Å–Ω–æ –Ω–æ–º–µ—Ä–∞–º –≤ –ø–µ—Ä–≤–æ–º —Å—Ç–æ–ª–±—Ü–µ.</p>
              </div>
            }
            type="info"
            showIcon
          />
          
          <Space>
            <Button
              icon={<DownloadOutlined />}
              onClick={downloadTemplate}
            >
              –°–∫–∞—á–∞—Ç—å —à–∞–±–ª–æ–Ω
            </Button>
            
            <Upload
              accept=".xlsx,.xls"
              showUploadList={false}
              customRequest={handleFileUpload}
              disabled={loading}
            >
              <Button
                icon={<UploadOutlined />}
                loading={loading}
              >
                –ó–∞–≥—Ä—É–∑–∏—Ç—å Excel —Ñ–∞–π–ª
              </Button>
            </Upload>
            
            {previewData.length > 0 && (
              <>
                <Button
                  type="primary"
                  onClick={handleImport}
                  loading={loading}
                  disabled={importProgress > 0}
                >
                  –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å ({previewData.length} –∑–∞–ø–∏—Å–µ–π)
                </Button>
                
                <Button
                  icon={<DeleteOutlined />}
                  onClick={handleClear}
                  disabled={loading}
                  danger
                >
                  –û—á–∏—Å—Ç–∏—Ç—å
                </Button>
              </>
            )}
          </Space>
          
          {importProgress > 0 && (
            <Progress
              percent={importProgress}
              status={importProgress === 100 ? 'success' : 'active'}
            />
          )}
          
          {importResults && (
            <Alert
              message="–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–º–ø–æ—Ä—Ç–∞"
              description={
                <div>
                  <Text strong>–£—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: </Text>
                  <Text type="success">{importResults.success}</Text>
                  <br />
                  <Text strong>–û—à–∏–±–æ–∫: </Text>
                  <Text type="danger">{importResults.failed}</Text>
                  {importResults.errors.length > 0 && (
                    <div className="mt-2">
                      <Text strong>–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–æ–∫:</Text>
                      <ul>
                        {importResults.errors.slice(0, 5).map((error, index) => (
                          <li key={index}>
                            <Text type="danger" className="text-sm">{error}</Text>
                          </li>
                        ))}
                        {importResults.errors.length > 5 && (
                          <li>
                            <Text type="secondary" className="text-sm">
                              –∏ –µ—â–µ {importResults.errors.length - 5} –æ—à–∏–±–æ–∫...
                            </Text>
                          </li>
                        )}
                      </ul>
                    </div>
                  )}
                </div>
              }
              type={importResults.failed === 0 ? 'success' : 'warning'}
              showIcon
              closable
            />
          )}
          
          {previewData.length > 0 && (
            <div>
              <Title level={5}>–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞</Title>
              <Table
                dataSource={previewData.slice(0, 10)}
                columns={columns}
                rowKey={(_, index) => index?.toString() || '0'}
                pagination={false}
                size="small"
                scroll={{ x: 800 }}
                footer={() => 
                  previewData.length > 10 ? (
                    <Text type="secondary">
                      –ü–æ–∫–∞–∑–∞–Ω—ã –ø–µ—Ä–≤—ã–µ 10 –∑–∞–ø–∏—Å–µ–π –∏–∑ {previewData.length}
                    </Text>
                  ) : null
                }
              />
            </div>
          )}
        </Space>
      </Card>
    </div>
  );
};