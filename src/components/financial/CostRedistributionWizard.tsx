import React, { useState, useCallback, useEffect } from 'react';
import {
  Card,
  Button,
  Space,
  message,
  Table,
  InputNumber,
  Typography,
  Alert,
  Statistic,
  Row,
  Col,
  Tag,
  Spin,
  Divider
} from 'antd';
import {
  CheckCircleOutlined,
  MinusCircleOutlined,
  PlusCircleOutlined,
  WarningOutlined,
  CloseOutlined
} from '@ant-design/icons';
import type { SourceWithdrawal } from '../../lib/supabase/types/cost-redistribution';
import { supabase } from '../../lib/supabase/client';
import { costRedistributionApi } from '../../lib/supabase/api/cost-redistribution';
import { formatQuantity } from '../../utils/formatters';
import CascadeCostCategorySelector from './CascadeCostCategorySelector';

const { Title, Text } = Typography;

interface CategoryWithStats {
  id: string;
  name: string;
  current_works_cost: number;
  items_count: number;
}

interface CostRedistributionWizardProps {
  tenderId: string;
  tenderTitle: string;
  onComplete: () => void;
  onCancel: () => void;
}

const CostRedistributionWizard: React.FC<CostRedistributionWizardProps> = ({
  tenderId,
  tenderTitle,
  onComplete,
  onCancel
}) => {
  console.log('üöÄ CostRedistributionWizard rendered for tender:', tenderId);

  const [loading, setLoading] = useState(false);
  const [categoriesLoading, setCategoriesLoading] = useState(false);

  // –î–∞–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
  const [categories, setCategories] = useState<CategoryWithStats[]>([]);

  // –®–∞–≥ 1: –ò—Å—Ö–æ–¥–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å –ø—Ä–æ—Ü–µ–Ω—Ç–∞–º–∏ (—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å –∫–∞—Å–∫–∞–¥–æ–º)
  const [sourceWithdrawals, setSourceWithdrawals] = useState<Array<{
    cost_category_id: string;
    cost_category_name?: string;
    detail_cost_category_ids?: string[];
    detail_cost_category_names?: string[];
    percent: number;
  }>>([]);

  // –®–∞–≥ 2: –¶–µ–ª–µ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å –∫–∞—Å–∫–∞–¥–æ–º)
  const [targetCategories, setTargetCategories] = useState<Array<{
    cost_category_id: string;
    cost_category_name?: string;
    detail_cost_category_ids?: string[];
    detail_cost_category_names?: string[];
  }>>([]);

  // –ó–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∑–∞—Ç—Ä–∞—Ç —Å —Ç–µ–∫—É—â–∏–º–∏ —Å—Ç–æ–∏–º–æ—Å—Ç—è–º–∏ —Ä–∞–±–æ—Ç
  useEffect(() => {
    const loadCategories = async () => {
      console.log('üì° Loading cost categories for tender:', tenderId);
      setCategoriesLoading(true);

      try {
        // –ó–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å —Ä–∞—Å—á—ë—Ç–æ–º —Ç–µ–∫—É—â–µ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Ä–∞–±–æ—Ç
        const { data, error } = await supabase
          .rpc('get_categories_with_work_costs', { p_tender_id: tenderId });

        if (error) {
          console.error('‚ùå Error loading categories:', error);
          message.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∑–∞—Ç—Ä–∞—Ç');
          return;
        }

        console.log('‚úÖ Categories loaded:', data);
        setCategories(data || []);
      } catch (error) {
        console.error('üí• Exception loading categories:', error);
        message.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π');
      } finally {
        setCategoriesLoading(false);
      }
    };

    loadCategories();
  }, [tenderId]);


  // –ü—Ä–∏–º–µ–Ω–∏—Ç—å –ø–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
  const handleApply = useCallback(async () => {
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –∏—Å—Ö–æ–¥–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    if (sourceWithdrawals.length === 0) {
      message.warning('–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –≤—ã—á–∏—Ç–∞–Ω–∏—è');
      return;
    }

    const totalPercent = sourceWithdrawals.reduce((sum, sw) => sum + sw.percent, 0);
    if (totalPercent <= 0) {
      message.warning('–û–±—â–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –≤—ã—á–∏—Ç–∞–Ω–∏—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ 0');
      return;
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ü–µ–ª–µ–≤—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    if (targetCategories.length === 0) {
      message.warning('–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Ü–µ–ª–µ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é');
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –∏—Å—Ö–æ–¥–Ω—ã–µ –∏ —Ü–µ–ª–µ–≤—ã–µ –Ω–µ –ø–µ—Ä–µ—Å–µ–∫–∞—é—Ç—Å—è (–ø–æ detail_cost_category_ids)
    const sourceDetailIds = sourceWithdrawals.flatMap(sw => sw.detail_cost_category_ids || []);
    const targetDetailIds = targetCategories.flatMap(tc => tc.detail_cost_category_ids || []);

    const overlap = targetDetailIds.some(id => sourceDetailIds.includes(id));

    if (overlap) {
      message.warning('–¶–µ–ª–µ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –¥–æ–ª–∂–Ω—ã —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å –∏—Å—Ö–æ–¥–Ω—ã–º–∏');
      return;
    }

    // –ü—Ä–∏–º–µ–Ω–∏—Ç—å –ø–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
    await applyRedistribution();
  }, [sourceWithdrawals, targetCategories]);

  // –ü—Ä–∏–º–µ–Ω–∏—Ç—å –ø–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
  const applyRedistribution = useCallback(async () => {
    console.log('üöÄ Applying redistribution...');
    setLoading(true);

    try {
      // –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –∫–∞—Å–∫–∞–¥–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –≤ —Ñ–æ—Ä–º–∞—Ç API
      // API –æ–∂–∏–¥–∞–µ—Ç: { detail_cost_category_id, percent }[]
      const flatSourceWithdrawals: SourceWithdrawal[] = sourceWithdrawals.flatMap(sw => {
        if (sw.detail_cost_category_ids && sw.detail_cost_category_ids.length > 0) {
          // –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ detail categories - —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –¥–ª—è –∫–∞–∂–¥–æ–π
          return sw.detail_cost_category_ids.map(detailId => ({
            detail_cost_category_id: detailId,
            percent: sw.percent
          }));
        } else {
          // –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω—ã - –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å–µ detail categories –¥–ª—è –¥–∞–Ω–Ω–æ–π cost_category
          // (–¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ–º cost_category_id –∫–∞–∫ detail_cost_category_id)
          return [{
            detail_cost_category_id: sw.cost_category_id,
            percent: sw.percent
          }];
        }
      });

      // –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ –¥–ª—è —Ü–µ–ª–µ–≤—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
      const flatTargetCategories: string[] = targetCategories.flatMap(tc => {
        if (tc.detail_cost_category_ids && tc.detail_cost_category_ids.length > 0) {
          return tc.detail_cost_category_ids;
        } else {
          // –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω—ã - –∏—Å–ø–æ–ª—å–∑—É–µ–º cost_category_id
          return [tc.cost_category_id];
        }
      });

      console.log('üì§ Flat source withdrawals:', flatSourceWithdrawals);
      console.log('üì§ Flat target categories:', flatTargetCategories);

      const result = await costRedistributionApi.createRedistribution({
        tender_id: tenderId,
        redistribution_name: `–ü–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–ª—è "${tenderTitle}"`,
        description: `–°–æ–∑–¥–∞–Ω–æ: ${new Date().toLocaleString('ru-RU')}`,
        source_withdrawals: flatSourceWithdrawals,
        target_categories: flatTargetCategories
      });

      if (result.error) {
        console.error('‚ùå Error applying redistribution:', result.error);
        message.error(`–û—à–∏–±–∫–∞: ${result.error}`);
        return;
      }

      console.log('‚úÖ Redistribution applied successfully:', result.data);
      message.success('–ü–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–æ!');
      onComplete();
    } catch (error) {
      console.error('üí• Exception applying redistribution:', error);
      message.error('–û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –ø–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è');
    } finally {
      setLoading(false);
    }
  }, [tenderId, tenderTitle, sourceWithdrawals, targetCategories, onComplete]);

  // –†–µ–Ω–¥–µ—Ä –±–ª–æ–∫–∞ 1: –í—ã–±–æ—Ä –∏—Å—Ö–æ–¥–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
  const renderStep1 = () => {
    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —É–∂–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö detail_cost_category_ids –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è
    const excludedDetailIds = sourceWithdrawals
      .flatMap(sw => sw.detail_cost_category_ids || []);

    const handleAddSource = (selection: {
      cost_category_id: string;
      detail_cost_category_ids?: string[];
    }) => {
      console.log('üîπ Adding source selection:', selection);

      setSourceWithdrawals(prev => [
        ...prev,
        {
          ...selection,
          percent: 10 // –ù–∞—á–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç 10%
        }
      ]);
    };

    const handleRemoveSource = (index: number) => {
      setSourceWithdrawals(prev => prev.filter((_, i) => i !== index));
    };

    const handlePercentUpdate = (index: number, percent: number | null) => {
      if (percent === null || percent === 0) {
        handleRemoveSource(index);
      } else {
        setSourceWithdrawals(prev => prev.map((item, i) =>
          i === index ? { ...item, percent } : item
        ));
      }
    };

    const columns = [
      {
        title: '–í—ã–±–æ—Ä',
        key: 'selection',
        width: '40%',
        render: (_: any, record: any, index: number) => {
          return (
            <div>
              <div><strong>{record.cost_category_name || '–ö–∞—Ç–µ–≥–æ—Ä–∏—è'}</strong></div>
              {record.detail_cost_category_names && record.detail_cost_category_names.length > 0 ? (
                <div>
                  <Text type="secondary">–í–∏–¥—ã –∑–∞—Ç—Ä–∞—Ç: </Text>
                  {record.detail_cost_category_names.map((name: string, i: number) => (
                    <div key={i}>
                      <Text type="secondary">‚Ä¢ {name}</Text>
                    </div>
                  ))}
                </div>
              ) : (
                <Text type="secondary">–í—Å–µ –≤–∏–¥—ã –∑–∞—Ç—Ä–∞—Ç</Text>
              )}
            </div>
          );
        }
      },
      {
        title: '–ü—Ä–æ—Ü–µ–Ω—Ç (%)',
        key: 'percent',
        width: '20%',
        render: (_: any, record: any, index: number) => (
          <InputNumber
            min={0}
            max={100}
            precision={1}
            value={record.percent}
            onChange={(value) => handlePercentUpdate(index, value)}
            style={{ width: '100%' }}
            suffix="%"
          />
        )
      },
      {
        title: '–î–µ–π—Å—Ç–≤–∏–µ',
        key: 'action',
        width: '15%',
        render: (_: any, record: any, index: number) => (
          <Button
            type="link"
            danger
            onClick={() => handleRemoveSource(index)}
          >
            –£–¥–∞–ª–∏—Ç—å
          </Button>
        )
      }
    ];

    return (
      <Space direction="vertical" size="large" style={{ width: '100%' }}>
        {categoriesLoading ? (
          <div style={{ textAlign: 'center', padding: '40px' }}>
            <Spin size="large" tip="–ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π..." />
          </div>
        ) : (
          <>
            {/* –ö–∞—Å–∫–∞–¥–Ω—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π */}
            <Card size="small" title="–î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é">
              <CascadeCostCategorySelector
                onSelect={handleAddSource}
                excludeDetailCategories={excludedDetailIds}
              />
            </Card>

            {/* –¢–∞–±–ª–∏—Ü–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π */}
            {sourceWithdrawals.length > 0 ? (
              <Table
                dataSource={sourceWithdrawals.map((item, index) => ({ ...item, key: index }))}
                columns={columns}
                rowKey="key"
                pagination={false}
                bordered
              />
            ) : (
              <Alert
                message="–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –≤—ã–±—Ä–∞–Ω—ã"
                description="–î–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –≤—ã—á–∏—Ç–∞–Ω–∏—è"
                type="warning"
                showIcon
              />
            )}
          </>
        )}

        {sourceWithdrawals.length > 0 && (
          <Alert
            message={`–í—ã–±—Ä–∞–Ω–æ –∑–∞–ø–∏—Å–µ–π: ${sourceWithdrawals.length}`}
            type="success"
            showIcon
          />
        )}
      </Space>
    );
  };

  // –†–µ–Ω–¥–µ—Ä –±–ª–æ–∫–∞ 2: –í—ã–±–æ—Ä —Ü–µ–ª–µ–≤—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
  const renderStep2 = () => {
    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —É–∂–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö detail_cost_category_ids –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è
    const excludedDetailIds = [
      ...sourceWithdrawals.flatMap(sw => sw.detail_cost_category_ids || []),
      ...targetCategories.flatMap(tc => tc.detail_cost_category_ids || [])
    ];

    const handleAddTarget = (selection: {
      cost_category_id: string;
      detail_cost_category_ids?: string[];
    }) => {
      console.log('üîπ Adding target selection:', selection);

      setTargetCategories(prev => [
        ...prev,
        selection
      ]);
    };

    const handleRemoveTarget = (index: number) => {
      setTargetCategories(prev => prev.filter((_, i) => i !== index));
    };

    const columns = [
      {
        title: '–í—ã–±–æ—Ä',
        key: 'selection',
        width: '60%',
        render: (_: any, record: any, index: number) => {
          return (
            <div>
              <div><strong>{record.cost_category_name || '–ö–∞—Ç–µ–≥–æ—Ä–∏—è'}</strong></div>
              {record.detail_cost_category_names && record.detail_cost_category_names.length > 0 ? (
                <div>
                  <Text type="secondary">–í–∏–¥—ã –∑–∞—Ç—Ä–∞—Ç: </Text>
                  {record.detail_cost_category_names.map((name: string, i: number) => (
                    <div key={i}>
                      <Text type="secondary">‚Ä¢ {name}</Text>
                    </div>
                  ))}
                </div>
              ) : (
                <Text type="secondary">–í—Å–µ –≤–∏–¥—ã –∑–∞—Ç—Ä–∞—Ç</Text>
              )}
            </div>
          );
        }
      },
      {
        title: '–î–µ–π—Å—Ç–≤–∏–µ',
        key: 'action',
        width: '15%',
        render: (_: any, record: any, index: number) => (
          <Button
            type="link"
            danger
            onClick={() => handleRemoveTarget(index)}
          >
            –£–¥–∞–ª–∏—Ç—å
          </Button>
        )
      }
    ];

    return (
      <Space direction="vertical" size="large" style={{ width: '100%' }}>
        {/* –ö–∞—Å–∫–∞–¥–Ω—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π */}
        <Card size="small" title="–î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é">
          <CascadeCostCategorySelector
            onSelect={handleAddTarget}
            excludeDetailCategories={excludedDetailIds}
          />
        </Card>

        {/* –¢–∞–±–ª–∏—Ü–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π */}
        {targetCategories.length > 0 ? (
          <Table
            dataSource={targetCategories.map((item, index) => ({ ...item, key: index }))}
            columns={columns}
            rowKey="key"
            pagination={false}
            bordered
          />
        ) : (
          <Alert
            message="–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –≤—ã–±—Ä–∞–Ω—ã"
            description="–î–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Ü–µ–ª–µ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è"
            type="warning"
            showIcon
          />
        )}

        {targetCategories.length > 0 && (
          <Alert
            message={`–í—ã–±—Ä–∞–Ω–æ –∑–∞–ø–∏—Å–µ–π: ${targetCategories.length}`}
            type="success"
            showIcon
          />
        )}
      </Space>
    );
  };

  return (
    <Space direction="vertical" size="large" style={{ width: '100%' }}>
      {/* –ë–ª–æ–∫ 1: –í—ã—á–∏—Ç–∞–Ω–∏–µ */}
      <Card title={<Title level={4} style={{ margin: 0 }}>1. –ò—Å—Ö–æ–¥–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–≤—ã—á–∏—Ç–∞–Ω–∏–µ)</Title>}>
        {renderStep1()}
      </Card>

      {/* –ë–ª–æ–∫ 2: –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ */}
      <Card title={<Title level={4} style={{ margin: 0 }}>2. –¶–µ–ª–µ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ)</Title>}>
        {renderStep2()}
      </Card>

      {/* –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–Ω–∏–∑—É */}
      <Card>
        <div style={{ display: 'flex', justifyContent: 'flex-end', alignItems: 'center', gap: '12px' }}>
          <Button
            size="large"
            onClick={onCancel}
            icon={<CloseOutlined />}
          >
            –û—Ç–º–µ–Ω–∏—Ç—å
          </Button>
          <Button
            type="primary"
            size="large"
            onClick={handleApply}
            loading={loading}
            icon={<CheckCircleOutlined />}
            disabled={sourceWithdrawals.length === 0 || targetCategories.length === 0}
          >
            –ü–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å—É–º–º—ã
          </Button>
        </div>
      </Card>
    </Space>
  );
};

export default CostRedistributionWizard;
