import React, { useState, useEffect, useCallback, useRef } from 'react';
import { Card, Form, InputNumber, Input, Button, message, Space, Typography, Row, Col, Progress, Statistic, Table } from 'antd';
import { SaveOutlined, ReloadOutlined, InfoCircleOutlined, SettingOutlined, CalculatorOutlined } from '@ant-design/icons';
import { 
  getActiveTenderMarkup, 
  updateTenderMarkup, 
  calculateMarkupFinancials 
} from '../../lib/supabase/api/tender-markup';
import type { TenderMarkupPercentages, UpdateTenderMarkupPercentages } from '../../lib/supabase/types/tender-markup';

const { Title, Text } = Typography;

interface MarkupEditorProps {
  tenderId: string;
  baseCosts: {
    materials: number;
    works: number;
    submaterials: number;
    subworks: number;
  };
  onMarkupChange?: (calculatedFinancials: any) => void;
}

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ–ª–µ–π –¥–ª—è —Ç–∞–±–ª–∏—á–Ω–æ–≥–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è
const markupFields = [
  {
    key: 'works_16_markup',
    name: 'works_16_markup',
    label: '–†–∞–±–æ—Ç—ã 1,6',
    tooltip: '–ü—Ä–æ—Ü–µ–Ω—Ç –Ω–∞–∫—Ä—É—Ç–∫–∏ –Ω–∞ —Ä–∞–±–æ—Ç—ã',
    max: 1000,
    suffix: '%',
    required: true,
    baseType: 'works',
    calculationType: 'percentage'
  },
  {
    key: 'works_cost_growth',
    name: 'works_cost_growth',
    label: '–†–æ—Å—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Ä–∞–±–æ—Ç',
    tooltip: '–ü—Ä–æ—Ü–µ–Ω—Ç —Ä–æ—Å—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Ä–∞–±–æ—Ç (–ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É "–†–∞–±–æ—Ç—ã 1,6")',
    max: 100,
    suffix: '%',
    baseType: 'worksAfter16',
    calculationType: 'percentage'
  },
  {
    key: 'materials_cost_growth',
    name: 'materials_cost_growth',
    label: '–†–æ—Å—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤',
    tooltip: '–ü—Ä–æ—Ü–µ–Ω—Ç —Ä–æ—Å—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤',
    max: 100,
    suffix: '%',
    baseType: 'materials',
    calculationType: 'percentage'
  },
  {
    key: 'subcontract_works_cost_growth',
    name: 'subcontract_works_cost_growth',
    label: '–†–æ—Å—Ç —Ä–∞–±–æ—Ç —Å—É–±–ø–æ–¥—Ä—è–¥–∞',
    tooltip: '–ü—Ä–æ—Ü–µ–Ω—Ç —Ä–æ—Å—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Å—É–±–ø–æ–¥—Ä—è–¥–Ω—ã—Ö —Ä–∞–±–æ—Ç',
    max: 100,
    suffix: '%',
    baseType: 'subworks',
    calculationType: 'percentage'
  },
  {
    key: 'subcontract_materials_cost_growth',
    name: 'subcontract_materials_cost_growth',
    label: '–†–æ—Å—Ç –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ —Å—É–±–ø–æ–¥—Ä—è–¥–∞',
    tooltip: '–ü—Ä–æ—Ü–µ–Ω—Ç —Ä–æ—Å—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Å—É–±–ø–æ–¥—Ä—è–¥–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤',
    max: 100,
    suffix: '%',
    baseType: 'submaterials',
    calculationType: 'percentage'
  },
  {
    key: 'contingency_costs',
    name: 'contingency_costs',
    label: '–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω—ã–µ –∑–∞—Ç—Ä–∞—Ç—ã',
    tooltip: '–†–µ–∑–µ—Ä–≤ –Ω–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω—ã–µ —Å–∏—Ç—É–∞—Ü–∏–∏ (–æ—Ç —Å—É–º–º—ã –†–∞–±–æ—Ç –†–û–°–¢ + –ú–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –†–û–°–¢)',
    max: 20,
    suffix: '%',
    baseType: 'contingencyBase',
    calculationType: 'percentage'
  },
  {
    key: 'overhead_own_forces',
    name: 'overhead_own_forces',
    label: '–û–û–ó —Å–æ–±—Å—Ç–≤. —Å–∏–ª—ã',
    tooltip: '–û–±—â–µ—Ö–æ–∑—è–π—Å—Ç–≤–µ–Ω–Ω—ã–µ –∑–∞—Ç—Ä–∞—Ç—ã —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ —Å–∏–ª–∞–º–∏',
    max: 50,
    suffix: '%',
    baseType: 'ownForcesBase',
    calculationType: 'percentage'
  },
  {
    key: 'overhead_subcontract',
    name: 'overhead_subcontract',
    label: '–û–û–ó –°—É–±–ø–æ–¥—Ä—è–¥',
    tooltip: '–û–±—â–µ—Ö–æ–∑—è–π—Å—Ç–≤–µ–Ω–Ω—ã–µ –∑–∞—Ç—Ä–∞—Ç—ã —Å—É–±–ø–æ–¥—Ä—è–¥–∞ (–æ—Ç —Å—É–º–º—ã –°—É–±–º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –ü–ó + –°—É–±—Ä–∞–±–æ—Ç –ü–ó)',
    max: 50,
    suffix: '%',
    baseType: 'subcontractBaseOriginal',
    calculationType: 'percentage'
  },
  {
    key: 'general_costs_without_subcontract',
    name: 'general_costs_without_subcontract',
    label: '–û–§–ó (–ë–µ–∑ —Å—É–±–ø–æ–¥—Ä—è–¥–∞)',
    tooltip: '–û–±—â–µ—Ñ–∏—Ä–º–µ–Ω–Ω—ã–µ –∑–∞—Ç—Ä–∞—Ç—ã –±–µ–∑ —Å—É–±–ø–æ–¥—Ä—è–¥–∞',
    max: 30,
    suffix: '%',
    baseType: 'ownForcesBase',
    calculationType: 'percentage'
  },
  {
    key: 'profit_own_forces',
    name: 'profit_own_forces',
    label: '–ü—Ä–∏–±—ã–ª—å —Å–æ–±—Å—Ç–≤. —Å–∏–ª—ã',
    tooltip: '–ü—Ä–∏–±—ã–ª—å –æ—Ç —Ä–∞–±–æ—Ç —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ —Å–∏–ª–∞–º–∏',
    max: 50,
    suffix: '%',
    baseType: 'ownForcesBase',
    calculationType: 'percentage'
  },
  {
    key: 'profit_subcontract',
    name: 'profit_subcontract',
    label: '–ü—Ä–∏–±—ã–ª—å –°—É–±–ø–æ–¥—Ä—è–¥',
    tooltip: '–ü—Ä–∏–±—ã–ª—å –æ—Ç —Å—É–±–ø–æ–¥—Ä—è–¥–Ω—ã—Ö —Ä–∞–±–æ—Ç',
    max: 50,
    suffix: '%',
    baseType: 'subcontractBase',
    calculationType: 'percentage'
  }
];

export const MarkupEditor: React.FC<MarkupEditorProps> = ({ 
  tenderId, 
  baseCosts, 
  onMarkupChange 
}) => {
  const [form] = Form.useForm();
  const [loading, setLoading] = useState(false);
  const [saving, setSaving] = useState(false);
  const [autoSaving, setAutoSaving] = useState(false);
  const [markupData, setMarkupData] = useState<TenderMarkupPercentages | null>(null);
  const [calculatedFinancials, setCalculatedFinancials] = useState<any>(null);
  const saveTimeoutRef = useRef<NodeJS.Timeout | null>(null);

  useEffect(() => {
    if (tenderId) {
      loadMarkupData();
    }
  }, [tenderId]);

  useEffect(() => {
    return () => {
      if (saveTimeoutRef.current) {
        clearTimeout(saveTimeoutRef.current);
      }
    };
  }, []);

  const loadMarkupData = async () => {
    setLoading(true);
    try {
      console.log('üöÄ [MarkupEditor] Loading markup data for tender:', tenderId);
      
      const data = await getActiveTenderMarkup(tenderId);
      console.log('üîç [MarkupEditor] Raw data type:', typeof data, 'is array:', Array.isArray(data), 'data:', data);
      
      // –ï—Å–ª–∏ –≤–µ—Ä–Ω—É–ª—Å—è –º–∞—Å—Å–∏–≤, –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç
      const markupObj = Array.isArray(data) ? data[0] : data;
      setMarkupData(markupObj);
      
      if (markupObj) {
        form.setFieldsValue(markupObj);
      }
      
      console.log('‚úÖ [MarkupEditor] Markup data loaded:', data);
    } catch (error) {
      console.error('‚ùå [MarkupEditor] Error loading markup data:', error);
      message.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –Ω–∞–∫—Ä—É—Ç–æ–∫');
    } finally {
      setLoading(false);
    }
  };

  const calculateFinancials = useCallback(() => {
    if (!markupData) return;
    
    console.log('üöÄ [MarkupEditor] Calculating financials with markup:', markupData);
    
    const financials = calculateMarkupFinancials(baseCosts, markupData);
    setCalculatedFinancials(financials);
    
    if (onMarkupChange) {
      onMarkupChange(financials);
    }
    
    console.log('‚úÖ [MarkupEditor] Financials calculated:', financials);
  }, [baseCosts, markupData, onMarkupChange]);

  useEffect(() => {
    if (markupData && baseCosts.materials >= 0) {
      calculateFinancials();
    }
  }, [calculateFinancials, markupData, baseCosts]);

  const handleSave = async () => {
    if (!markupData) return;
    
    try {
      setSaving(true);
      const values = await form.validateFields();
      
      console.log('üöÄ [MarkupEditor] Saving markup updates:', values);
      
      const updateData: UpdateTenderMarkupPercentages = values;
      const updatedData = await updateTenderMarkup(markupData.id, updateData);
      setMarkupData(updatedData);
      
      message.success('‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–∫—Ä—É—Ç–æ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!');
      console.log('‚úÖ [MarkupEditor] Markup saved successfully:', updatedData);
      
    } catch (error) {
      console.error('‚ùå [MarkupEditor] Error saving markup:', error);
      message.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –Ω–∞–∫—Ä—É—Ç–æ–∫');
    } finally {
      setSaving(false);
    }
  };

  const handleReset = () => {
    if (markupData) {
      form.setFieldsValue(markupData);
      message.info('–ó–Ω–∞—á–µ–Ω–∏—è –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–º');
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –Ω–∞–∫—Ä—É—Ç–∫–∏
  const calculateMarkupCost = (field: any, formValues: any) => {
    if (!calculatedFinancials || !formValues[field.name]) return 0;
    
    const value = formValues[field.name];
    const baseValues = {
      works: baseCosts.works,
      materials: baseCosts.materials,
      submaterials: baseCosts.submaterials,
      subworks: baseCosts.subworks,
      worksAfter16: calculatedFinancials.worksAfter16 || 0,
      subtotalAfterGrowth: calculatedFinancials.subtotalAfterGrowth || 0,
      contingencyBase: (calculatedFinancials.worksWithGrowth || 0) + (calculatedFinancials.materialsWithGrowth || 0),
      ownForcesBase: (calculatedFinancials.materialsWithGrowth || 0) + (calculatedFinancials.worksWithGrowth || 0),
      subcontractBase: (calculatedFinancials.submaterialsWithGrowth || 0) + (calculatedFinancials.subworksWithGrowth || 0),
      subcontractBaseOriginal: baseCosts.submaterials + baseCosts.subworks // –ë–∞–∑–æ–≤—ã–µ –ü–ó –¥–ª—è –û–û–ó —Å—É–±–ø–æ–¥—Ä—è–¥–∞
    };
    
    const baseValue = baseValues[field.baseType as keyof typeof baseValues] || 0;
    
    if (field.calculationType === 'coefficient') {
      return baseValue * value;
    } else if (field.calculationType === 'percentage') {
      return baseValue * (value / 100);
    }
    
    return 0;
  };

  const handleFormChange = () => {
    const values = form.getFieldsValue();
    if (markupData && values) {
      const tempMarkupData = { ...markupData, ...values };
      const financials = calculateMarkupFinancials(baseCosts, tempMarkupData);
      setCalculatedFinancials(financials);
      
      if (onMarkupChange) {
        onMarkupChange(financials);
      }

      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π 2 —Å–µ–∫—É–Ω–¥—ã
      if (saveTimeoutRef.current) {
        clearTimeout(saveTimeoutRef.current);
      }
      
      saveTimeoutRef.current = setTimeout(async () => {
        try {
          setAutoSaving(true);
          console.log('üöÄ [MarkupEditor] Auto-saving markup changes. ID:', markupData.id, 'Values:', values);
          
          if (!markupData.id) {
            console.error('‚ùå [MarkupEditor] No ID for auto-save, markupData:', markupData);
            return;
          }
          
          const updateData: UpdateTenderMarkupPercentages = values;
          const updatedData = await updateTenderMarkup(markupData.id, updateData);
          setMarkupData(updatedData);
          console.log('‚úÖ [MarkupEditor] Auto-save successful:', updatedData);
        } catch (error) {
          console.error('‚ùå [MarkupEditor] Auto-save error:', error);
          message.error('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è');
        } finally {
          setAutoSaving(false);
        }
      }, 2000);
    }
  };

  // –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã
  const tableData = markupFields.map(field => {
    const formValues = form.getFieldsValue();
    const currentValue = formValues[field.name] || 0;
    const calculatedCost = calculateMarkupCost(field, formValues);
    
    return {
      key: field.key,
      name: field.name,
      label: field.label,
      tooltip: field.tooltip,
      required: field.required,
      max: field.max,
      suffix: field.suffix,
      currentValue,
      calculatedCost
    };
  });

  // –ö–æ–ª–æ–Ω–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
  const columns = [
    {
      title: '–¢–∏–ø –Ω–∞–∫—Ä—É—Ç–∫–∏',
      dataIndex: 'label',
      key: 'label',
      width: 200,
      render: (text: string, record: any) => (
        <div style={{ display: 'flex', alignItems: 'center', gap: 6 }}>
          <Text strong style={{ fontSize: 13 }}>{text}</Text>
          <InfoCircleOutlined 
            style={{ color: '#8c8c8c', fontSize: 12 }}
            title={record.tooltip}
          />
        </div>
      ),
    },
    {
      title: '–ó–Ω–∞—á–µ–Ω–∏–µ',
      dataIndex: 'currentValue',
      key: 'value',
      width: 150,
      render: (value: number, record: any) => (
        <Form.Item
          name={record.name}
          style={{ margin: 0 }}
          rules={record.required ? [
            { required: true, message: `–£–∫–∞–∂–∏—Ç–µ ${record.label.toLowerCase()}` },
            { type: 'number', min: 0, max: record.max, message: `–ó–Ω–∞—á–µ–Ω–∏–µ –æ—Ç 0 –¥–æ ${record.max}${record.suffix}` }
          ] : [
            { type: 'number', min: 0, max: record.max, message: `–ó–Ω–∞—á–µ–Ω–∏–µ –æ—Ç 0 –¥–æ ${record.max}${record.suffix}` }
          ]}
        >
          <InputNumber
            style={{ width: '100%' }}
            min={0}
            max={record.max}
            step={0.1}
            precision={2}
            suffix={record.suffix}
            placeholder={`0.00${record.suffix}`}
          />
        </Form.Item>
      ),
    },
    {
      title: '–†–∞—Å—á–µ—Ç–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å',
      dataIndex: 'calculatedCost',
      key: 'cost',
      width: 150,
      render: (cost: number) => (
        <Text strong style={{ color: '#1890ff' }}>
          {Math.round(cost).toLocaleString('ru-RU')} ‚ÇΩ
        </Text>
      ),
    },
  ];

  const totalCost = baseCosts.materials + baseCosts.works + baseCosts.submaterials + baseCosts.subworks;

  return (
    <Card 
      loading={loading}
      style={{ 
        borderRadius: 12,
        boxShadow: '0 2px 8px rgba(0,0,0,0.1)'
      }}
    >
      <div style={{ marginBottom: 20 }}>
        <Title level={4} style={{ margin: 0, marginBottom: 8, display: 'flex', alignItems: 'center', gap: 8 }}>
          <SettingOutlined style={{ color: '#1890ff' }} />
          –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞–∫—Ä—É—Ç–æ–∫
          {autoSaving && (
            <Text type="secondary" style={{ fontSize: 12, fontWeight: 'normal' }}>
              ‚Ä¢ –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...
            </Text>
          )}
        </Title>
        <Text type="secondary">
          –û–±—â–∞—è –±–∞–∑–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: <Text strong>{totalCost.toLocaleString('ru-RU')} ‚ÇΩ</Text>
        </Text>
      </div>

      <Form
        form={form}
        layout="vertical"
        onValuesChange={handleFormChange}
      >
        {/* –¢–∞–±–ª–∏—á–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–∫—Ä—É—Ç–æ–∫ */}
        <Table
          dataSource={tableData}
          columns={columns}
          pagination={false}
          size="small"
          bordered
          style={{ marginBottom: 20 }}
        />

        <Row style={{ marginTop: 20 }}>
          <Col span={24}>
            <Form.Item 
              name="notes" 
              label="–ü—Ä–∏–º–µ—á–∞–Ω–∏—è"
              style={{ marginBottom: 16 }}
            >
              <Input.TextArea
                rows={2}
                placeholder="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏..."
              />
            </Form.Item>
          </Col>
        </Row>

        <Row justify="center" style={{ marginTop: 16 }}>
          <Space>
            <Button
              type="primary"
              icon={<SaveOutlined />}
              loading={saving}
              onClick={handleSave}
            >
              –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
            </Button>
            <Button
              icon={<ReloadOutlined />}
              onClick={handleReset}
            >
              –°–±—Ä–æ—Å–∏—Ç—å
            </Button>
          </Space>
        </Row>
      </Form>

      {/* –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç */}
      {calculatedFinancials && (
        <div style={{ 
          marginTop: 20,
          padding: 16,
          background: '#f0f2f5',
          borderRadius: 8,
          borderLeft: '4px solid #1890ff'
        }}>
          <Title level={5} style={{ margin: 0, marginBottom: 12 }}>
            <CalculatorOutlined style={{ marginRight: 8, color: '#1890ff' }} />
            –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç
          </Title>
          
          <Row gutter={16}>
            <Col span={12}>
              <Text type="secondary">–ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:</Text>
              <div style={{ fontSize: 18, fontWeight: 'bold', color: '#1890ff' }}>
                {Math.round(calculatedFinancials.totalCostWithProfit || 0).toLocaleString('ru-RU')} ‚ÇΩ
              </div>
            </Col>
            <Col span={12}>
              <Text type="secondary">–û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å:</Text>
              <div style={{ fontSize: 16, fontWeight: 'bold', color: '#52c41a' }}>
                {Math.round(calculatedFinancials.totalProfit || 0).toLocaleString('ru-RU')} ‚ÇΩ
              </div>
            </Col>
          </Row>
        </div>
      )}
    </Card>
  );
};