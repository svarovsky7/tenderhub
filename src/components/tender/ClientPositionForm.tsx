import React, { useState } from 'react';
import {
  Modal,
  Form,
  Input,
  Select,
  Button,
  message,
  Row,
  Col,
  Divider
} from 'antd';
import { PlusOutlined } from '@ant-design/icons';
import { clientPositionsApi } from '../../lib/supabase/api';
import type { ClientPosition } from '../../lib/supabase/types';

const { TextArea } = Input;
const { Option } = Select;

interface ClientPositionFormProps {
  tenderId: string;
  visible: boolean;
  onCancel: () => void;
  onSuccess: (position: ClientPosition) => void;
  editingPosition?: ClientPosition | null;
}

interface FormData {
  item_no: string;
  work_name: string;
  unit?: string;
  volume?: number;
  client_note?: string;
}

const ClientPositionForm: React.FC<ClientPositionFormProps> = ({
  tenderId,
  visible,
  onCancel,
  onSuccess,
  editingPosition
}) => {
  const [form] = Form.useForm<FormData>();
  const [loading, setLoading] = useState(false);

  const isEditing = !!editingPosition;

  React.useEffect(() => {
    if (visible && editingPosition) {
      form.setFieldsValue({
        item_no: editingPosition.item_no,
        work_name: editingPosition.work_name,
        unit: editingPosition.unit || '',
        volume: editingPosition.volume || undefined,
        client_note: editingPosition.client_note || ''
      });
    } else if (visible) {
      form.resetFields();
    }
  }, [visible, editingPosition, form]);

  const handleSubmit = async (values: FormData) => {
    setLoading(true);

    try {
      if (isEditing && editingPosition) {
        const result = await clientPositionsApi.update(editingPosition.id, values);
        if (result.error) {
          throw new Error(result.error);
        }
        message.success('Позиция заказчика обновлена');
        onSuccess(result.data!);
      } else {
        const positionData = {
          ...values,
          tender_id: tenderId,
          position_number: 0 // Will be auto-generated by database
        };
        
        const result = await clientPositionsApi.create(positionData);
        if (result.error) {
          throw new Error(result.error);
        }
        message.success('Позиция заказчика создана');
        onSuccess(result.data!);
      }
      
      form.resetFields();
    } catch (error) {
      message.error(`Ошибка: ${error}`);
      console.error('Position form error:', error);
    } finally {
      setLoading(false);
    }
  };

  const handleCancel = () => {
    form.resetFields();
    onCancel();
  };

  return (
    <Modal
      title={isEditing ? 'Редактировать позицию заказчика' : 'Добавить позицию заказчика'}
      open={visible}
      onCancel={handleCancel}
      footer={null}
      width={700}
      destroyOnHidden
    >
      <Form
        form={form}
        layout="vertical"
        onFinish={handleSubmit}
        className="mt-4"
      >
        <Row gutter={16}>
          <Col span={6}>
            <Form.Item
              name="item_no"
              label="№ п/п"
              rules={[
                { required: true, message: 'Введите номер пункта' },
                { max: 10, message: 'Максимум 10 символов' }
              ]}
            >
              <Input 
                placeholder="1.1"
                maxLength={10}
              />
            </Form.Item>
          </Col>
          
          <Col span={18}>
            <Form.Item
              name="work_name"
              label="Наименование работ"
              rules={[
                { required: true, message: 'Введите наименование работ' },
                { min: 3, message: 'Наименование должно содержать минимум 3 символа' }
              ]}
            >
              <Input 
                placeholder="Например: Устройство монолитного фундамента"
                maxLength={500}
              />
            </Form.Item>
          </Col>
        </Row>

        <Row gutter={16}>
          <Col span={8}>
            <Form.Item
              name="unit"
              label="Ед. изм."
            >
              <Select 
                placeholder="Выберите единицу"
                allowClear
              >
                <Option value="м³">м³</Option>
                <Option value="м²">м²</Option>
                <Option value="м.п.">м.п.</Option>
                <Option value="шт">шт</Option>
                <Option value="т">т</Option>
                <Option value="кг">кг</Option>
                <Option value="компл.">компл.</Option>
              </Select>
            </Form.Item>
          </Col>
          
          <Col span={8}>
            <Form.Item
              name="volume"
              label="Объем работ"
            >
              <Input 
                type="number"
                step="0.01"
                placeholder="0.00"
              />
            </Form.Item>
          </Col>

          <Col span={8}>
            {/* Empty column for alignment */}
          </Col>
        </Row>

        <Form.Item
          name="client_note"
          label="Примечание заказчика"
        >
          <TextArea 
            rows={3}
            placeholder="Дополнительные требования или пояснения от заказчика"
            maxLength={1000}
            showCount
          />
        </Form.Item>

        <Divider />

        <div className="flex justify-end gap-2">
          <Button onClick={handleCancel}>
            Отмена
          </Button>
          <Button 
            type="primary" 
            htmlType="submit"
            loading={loading}
            icon={<PlusOutlined />}
          >
            {isEditing ? 'Сохранить изменения' : 'Создать позицию'}
          </Button>
        </div>
      </Form>
    </Modal>
  );
};

export default ClientPositionForm;