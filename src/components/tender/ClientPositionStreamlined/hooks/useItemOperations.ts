import { useCallback } from 'react';
import { message } from 'antd';
import { boqApi, clientPositionsApi } from '../../../../lib/supabase/api';

interface UseItemOperationsProps {
  position: any;
  onUpdate: () => void;
  setLoading: (loading: boolean) => void;
}

export const useItemOperations = ({
  position,
  onUpdate,
  setLoading
}: UseItemOperationsProps) => {

  // Handle manual volume change
  const handleManualVolumeChange = useCallback(async (value: number | null) => {
    console.log('‚úèÔ∏è handleManualVolumeChange called:', { positionId: position.id, value });

    try {
      const result = await clientPositionsApi.update(position.id, { manual_volume: value });

      if (result.error) {
        console.error('‚ùå Manual volume update failed:', result.error);
        message.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ì–ü');
      } else {
        console.log('‚úÖ Manual volume updated successfully');
        message.success('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ì–ü –æ–±–Ω–æ–≤–ª–µ–Ω–æ');
        onUpdate();
      }
    } catch (error) {
      console.error('üí• Manual volume update exception:', error);
      message.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ì–ü');
    }
  }, [position.id, onUpdate]);

  // Handle manual note change
  const handleManualNoteChange = useCallback(async (value: string) => {
    console.log('‚úèÔ∏è handleManualNoteChange called:', { positionId: position.id, value });

    try {
      const result = await clientPositionsApi.update(position.id, { manual_note: value || null });

      if (result.error) {
        console.error('‚ùå Manual note update failed:', result.error);
        message.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–∏–º–µ—á–∞–Ω–∏—è –ì–ü');
      } else {
        console.log('‚úÖ Manual note updated successfully');
        message.success('–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ –ì–ü –æ–±–Ω–æ–≤–ª–µ–Ω–æ');
        onUpdate();
      }
    } catch (error) {
      console.error('üí• Manual note update exception:', error);
      message.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–∏–º–µ—á–∞–Ω–∏—è –ì–ü');
    }
  }, [position.id, onUpdate]);

  // Delete BOQ item
  const handleDeleteItem = useCallback(async (itemId: string) => {
    console.log('üóëÔ∏è Deleting BOQ item:', itemId);
    try {
      const result = await boqApi.delete(itemId);
      if (result.error) {
        throw new Error(result.error);
      }
      console.log('‚úÖ BOQ item deleted successfully');
      message.success('–≠–ª–µ–º–µ–Ω—Ç —É–¥–∞–ª–µ–Ω');
      onUpdate();
    } catch (error) {
      console.error('‚ùå Delete item error:', error);
      message.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞');
    }
  }, [onUpdate]);

  // Delete all BOQ items in position
  const handleDeleteAllItems = useCallback(async () => {
    console.log('üóëÔ∏è Deleting all BOQ items in position:', position.id);
    setLoading(true);
    try {
      const items = position.boq_items || [];
      if (items.length === 0) {
        message.info('–ù–µ—Ç —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è');
        return;
      }

      // Delete all items
      const deletePromises = items.map((item: any) => boqApi.delete(item.id));
      const results = await Promise.all(deletePromises);

      // Check for errors
      const errors = results.filter(r => r.error);
      if (errors.length > 0) {
        console.error('‚ùå Some items failed to delete:', errors);
        message.error(`–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è ${errors.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤`);
      } else {
        console.log('‚úÖ All BOQ items deleted successfully');
        message.success(`–£–¥–∞–ª–µ–Ω–æ ${items.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤`);
      }

      onUpdate();
    } catch (error) {
      console.error('‚ùå Delete all items error:', error);
      message.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤');
    } finally {
      setLoading(false);
    }
  }, [position.id, position.boq_items, onUpdate, setLoading]);

  return {
    handleManualVolumeChange,
    handleManualNoteChange,
    handleDeleteItem,
    handleDeleteAllItems
  };
};