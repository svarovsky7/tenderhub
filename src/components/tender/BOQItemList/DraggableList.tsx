import React, { useCallback } from 'react';
import { Empty } from 'antd';
import { FileTextOutlined } from '@ant-design/icons';
import {\n  DndContext,\n  closestCenter,\n  KeyboardSensor,\n  PointerSensor,\n  useSensor,\n  useSensors,\n  type DragEndEvent\n} from '@dnd-kit/core';\nimport {\n  arrayMove,\n  SortableContext,\n  sortableKeyboardCoordinates,\n  verticalListSortingStrategy\n} from '@dnd-kit/sortable';\nimport { message } from 'antd';\nimport { boqApi } from '../../../lib/supabase/api';\nimport SortableItem from './SortableItem';\nimport type { DraggableListProps } from './types';\n\nconst DraggableList: React.FC<DraggableListProps> = ({\n  items,\n  clientPositionId,\n  onReorder,\n  height,\n  editingItem,\n  isLoading,\n  editable,\n  onStartEdit,\n  onSaveEdit,\n  onCancelEdit,\n  onDelete,\n  onDuplicate,\n  setEditingItem\n}) => {\n  console.log('üöÄ DraggableList rendered with:', { \n    itemsCount: items.length, \n    clientPositionId, \n    height \n  });\n\n  const sensors = useSensors(\n    useSensor(PointerSensor, {\n      activationConstraint: {\n        distance: 8,\n      },\n    }),\n    useSensor(KeyboardSensor, {\n      coordinateGetter: sortableKeyboardCoordinates,\n    })\n  );\n\n  const handleDragEnd = useCallback(async (event: DragEndEvent) => {\n    const { active, over } = event;\n    console.log('üéØ Drag end event:', { activeId: active.id, overId: over?.id });\n\n    if (!over) {\n      console.log('‚ö†Ô∏è No drop target found');\n      return;\n    }\n\n    if (active.id !== over.id) {\n      console.log('üîÑ Reordering items...');\n      const oldIndex = items.findIndex(item => item.id === active.id);\n      const newIndex = items.findIndex(item => item.id === over.id);\n      \n      console.log('üìä Reorder details:', { oldIndex, newIndex, activeId: active.id, overId: over.id });\n      \n      if (oldIndex === -1 || newIndex === -1) {\n        console.error('‚ùå Invalid item indices:', { oldIndex, newIndex });\n        return;\n      }\n\n      const newOrder = arrayMove(items, oldIndex, newIndex);\n      console.log('üìã New order calculated:', newOrder.map(item => ({ id: item.id, item_number: item.item_number })));\n      \n      // Optimistically update UI\n      onReorder(newOrder);\n\n      try {\n        // Update sort order in database\n        const itemIds = newOrder.map(item => item.id);\n        console.log('üì° Updating sort order in database:', itemIds);\n        \n        const result = await boqApi.reorderInPosition(clientPositionId, itemIds);\n        console.log('üì¶ Reorder API response:', result);\n        \n        if (result.error) {\n          console.error('‚ùå Failed to reorder items:', result.error);\n          message.error('–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ—Ä—è–¥–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤');\n          // Revert optimistic update on error\n          onReorder(items);\n        } else {\n          console.log('‚úÖ Items reordered successfully');\n          message.success('–ü–æ—Ä—è–¥–æ–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–∑–º–µ–Ω–µ–Ω');\n        }\n      } catch (error) {\n        console.error('üí• Exception during reorder:', error);\n        message.error('–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ—Ä—è–¥–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤');\n        // Revert optimistic update on error\n        onReorder(items);\n      }\n    }\n  }, [items, clientPositionId, onReorder]);\n\n  if (items.length === 0) {\n    return (\n      <div \n        style={{ height }} \n        className=\"flex items-center justify-center border border-gray-200 rounded-lg bg-gray-50\"\n      >\n        <Empty\n          image={<FileTextOutlined style={{ fontSize: 48, color: '#ccc' }} />}\n          description=\"–ù–µ—Ç —ç–ª–µ–º–µ–Ω—Ç–æ–≤ BOQ\"\n        />\n      </div>\n    );\n  }\n\n  return (\n    <DndContext\n      sensors={sensors}\n      collisionDetection={closestCenter}\n      onDragEnd={handleDragEnd}\n    >\n      <SortableContext items={items.map(item => item.id)} strategy={verticalListSortingStrategy}>\n        <div \n          className=\"space-y-2 overflow-y-auto border border-gray-200 rounded-lg p-2 bg-gray-50\"\n          style={{ height }}\n        >\n          {items.map((item) => {\n            console.log('üéØ Rendering draggable item:', item.id);\n            return (\n              <SortableItem\n                key={item.id}\n                item={item}\n                isLoading={isLoading}\n                editingItem={editingItem}\n                editable={editable}\n                onStartEdit={onStartEdit}\n                onSaveEdit={onSaveEdit}\n                onCancelEdit={onCancelEdit}\n                onDelete={onDelete}\n                onDuplicate={onDuplicate}\n                setEditingItem={setEditingItem}\n              />\n            );\n          })}\n        </div>\n      </SortableContext>\n    </DndContext>\n  );\n};\n\nexport default DraggableList;