import React, { useEffect } from 'react';
import { Form, Input, Select, InputNumber, Button, Card, Spin, message } from 'antd';
import { SaveOutlined } from '@ant-design/icons';
import { useMutation, useQuery, useQueryClient } from '@tanstack/react-query';
import { materialsWithNamesApi } from '../../lib/supabase/api/materials-with-names';
import type { Material, MaterialInsert, MaterialUpdate } from '../../lib/supabase/types';

const { Option } = Select;
const { TextArea } = Input;

interface FullMaterialFormProps {
  material?: Material;
  onSuccess?: () => void;
}

const FullMaterialForm: React.FC<FullMaterialFormProps> = ({ material, onSuccess }) => {
  const [form] = Form.useForm();
  const queryClient = useQueryClient();

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–π –¥–ª—è –≤—ã–±–æ—Ä–∞
  const { data: existingNames } = useQuery({
    queryKey: ['material-names'],
    queryFn: async () => {
      const result = await materialsWithNamesApi.getNames();
      return result.data || [];
    },
    staleTime: 5 * 60 * 1000,
  });

  // –ú—É—Ç–∞—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞
  const createMutation = useMutation({
    mutationFn: async (values: MaterialInsert & { name: string }) => {
      const result = await materialsWithNamesApi.create(values);
      if (result.error) throw new Error(result.error);
      return result.data;
    },
    onSuccess: () => {
      message.success('–î–∞–Ω–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã');
      queryClient.invalidateQueries({ queryKey: ['materials'] });
      queryClient.invalidateQueries({ queryKey: ['material-names-list'] });
      form.resetFields();
      onSuccess?.();
    },
    onError: (error) => {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞:', error);
      message.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∞');
    },
  });

  // –ú—É—Ç–∞—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞
  const updateMutation = useMutation({
    mutationFn: async ({ id, ...values }: MaterialUpdate & { id: string; name?: string }) => {
      const result = await materialsWithNamesApi.update(id, values);
      if (result.error) throw new Error(result.error);
      return result.data;
    },
    onSuccess: () => {
      message.success('–î–∞–Ω–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã');
      queryClient.invalidateQueries({ queryKey: ['materials'] });
      queryClient.invalidateQueries({ queryKey: ['material-names-list'] });
      onSuccess?.();
    },
    onError: (error) => {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞:', error);
      message.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∞');
    },
  });

  // –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    if (material) {
      form.setFieldsValue({
        name: material.name,
        description: material.description,
        unit: material.unit,
        category: material.category,
        material_type: material.material_type,
        consumption_coefficient: material.consumption_coefficient || 1,
        unit_rate: material.unit_rate || 0,
        currency_type: material.currency_type || 'RUB',
        delivery_price_type: material.delivery_price_type || 'included',
        delivery_amount: material.delivery_amount || 0,
        quote_link: material.quote_link,
      });
    }
  }, [material, form]);

  const handleSubmit = async (values: any) => {
    console.log('üöÄ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ä–º—ã –º–∞—Ç–µ—Ä–∏–∞–ª–∞:', values);

    // –ù–∞—Ö–æ–¥–∏–º –∏–º—è –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É ID
    const selectedName = existingNames?.find(n => n.id === values.nameId);
    if (!selectedName) {
      message.error('–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞');
      return;
    }

    const submitData = {
      ...values,
      name: selectedName.name,
      nameId: undefined, // –£–±–∏—Ä–∞–µ–º nameId, —Ç–∞–∫ –∫–∞–∫ API –æ–∂–∏–¥–∞–µ—Ç name
    };

    if (material?.id) {
      await updateMutation.mutateAsync({ id: material.id, ...submitData });
    } else {
      await createMutation.mutateAsync(submitData);
    }
  };

  const isLoading = createMutation.isPending || updateMutation.isPending;

  return (
    <Card title="–ó–∞–¥–∞—Ç—å –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—É">
      <Spin spinning={isLoading}>
        <Form
          form={form}
          layout="vertical"
          onFinish={handleSubmit}
          initialValues={{
            unit: '—à—Ç',
            currency_type: 'RUB',
            delivery_price_type: 'included',
            consumption_coefficient: 1,
            unit_rate: 0,
            delivery_amount: 0,
          }}
        >
          <Form.Item
            name="nameId"
            label="–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞"
            rules={[{ required: true, message: '–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞' }]}
          >
            <Select
              placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞"
              showSearch
              optionFilterProp="children"
              filterOption={(input, option) =>
                (option?.children as string).toLowerCase().includes(input.toLowerCase())
              }
            >
              {existingNames?.map(name => (
                <Option key={name.id} value={name.id}>
                  {name.name}
                </Option>
              ))}
            </Select>
          </Form.Item>

          <Form.Item
            name="description"
            label="–û–ø–∏—Å–∞–Ω–∏–µ"
          >
            <TextArea rows={3} placeholder="–û–ø–∏—Å–∞–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞" />
          </Form.Item>

          <div className="grid grid-cols-2 gap-4">
            <Form.Item
              name="unit"
              label="–ï–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è"
              rules={[{ required: true, message: '–í—ã–±–µ—Ä–∏—Ç–µ –µ–¥–∏–Ω–∏—Ü—É –∏–∑–º–µ—Ä–µ–Ω–∏—è' }]}
            >
              <Select placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –µ–¥–∏–Ω–∏—Ü—É">
                <Option value="—à—Ç">—à—Ç</Option>
                <Option value="–º">–º</Option>
                <Option value="–º2">–º¬≤</Option>
                <Option value="–º3">–º¬≥</Option>
                <Option value="–∫–≥">–∫–≥</Option>
                <Option value="—Ç">—Ç</Option>
                <Option value="–ª">–ª</Option>
                <Option value="–∫–æ–º–ø–ª–µ–∫—Ç">–∫–æ–º–ø–ª–µ–∫—Ç</Option>
                <Option value="—É–ø–∞–∫–æ–≤–∫–∞">—É–ø–∞–∫–æ–≤–∫–∞</Option>
              </Select>
            </Form.Item>

            <Form.Item
              name="category"
              label="–ö–∞—Ç–µ–≥–æ—Ä–∏—è"
            >
              <Input placeholder="–ö–∞—Ç–µ–≥–æ—Ä–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞" />
            </Form.Item>
          </div>

          <div className="grid grid-cols-2 gap-4">
            <Form.Item
              name="material_type"
              label="–¢–∏–ø –º–∞—Ç–µ—Ä–∏–∞–ª–∞"
            >
              <Select placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø">
                <Option value="–æ—Å–Ω–æ–≤–Ω–æ–π">–û—Å–Ω–æ–≤–Ω–æ–π</Option>
                <Option value="–≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π">–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π</Option>
                <Option value="—Ä–∞—Å—Ö–æ–¥–Ω—ã–π">–†–∞—Å—Ö–æ–¥–Ω—ã–π</Option>
              </Select>
            </Form.Item>

            <Form.Item
              name="consumption_coefficient"
              label="–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Ä–∞—Å—Ö–æ–¥–∞"
              rules={[{ type: 'number', min: 1, message: '–ó–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 1' }]}
            >
              <InputNumber
                min={1}
                step={0.01}
                placeholder="1.00"
                className="w-full"
              />
            </Form.Item>
          </div>

          <div className="grid grid-cols-3 gap-4">
            <Form.Item
              name="unit_rate"
              label="–¶–µ–Ω–∞ –∑–∞ –µ–¥–∏–Ω–∏—Ü—É"
              rules={[{ type: 'number', min: 0, message: '–¶–µ–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π' }]}
            >
              <InputNumber
                min={0}
                step={0.01}
                placeholder="0.00"
                className="w-full"
              />
            </Form.Item>

            <Form.Item
              name="currency_type"
              label="–í–∞–ª—é—Ç–∞"
            >
              <Select>
                <Option value="RUB">‚ÇΩ RUB</Option>
                <Option value="USD">$ USD</Option>
                <Option value="EUR">‚Ç¨ EUR</Option>
                <Option value="CNY">¬• CNY</Option>
              </Select>
            </Form.Item>

            <Form.Item
              name="delivery_price_type"
              label="–¢–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏"
            >
              <Select>
                <Option value="included">–í–∫–ª—é—á–µ–Ω–æ –≤ —Ü–µ–Ω—É</Option>
                <Option value="not_included">–ù–µ –≤–∫–ª—é—á–µ–Ω–æ (+3%)</Option>
                <Option value="amount">–§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—É–º–º–∞</Option>
              </Select>
            </Form.Item>
          </div>

          <Form.Item
            noStyle
            shouldUpdate={(prevValues, currentValues) => prevValues.delivery_price_type !== currentValues.delivery_price_type}
          >
            {({ getFieldValue }) =>
              getFieldValue('delivery_price_type') === 'amount' && (
                <Form.Item
                  name="delivery_amount"
                  label="–°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ –∑–∞ –µ–¥–∏–Ω–∏—Ü—É"
                  rules={[{ type: 'number', min: 0, message: '–°—É–º–º–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π' }]}
                >
                  <InputNumber
                    min={0}
                    step={0.01}
                    placeholder="0.00"
                    className="w-full"
                  />
                </Form.Item>
              )
            }
          </Form.Item>

          <Form.Item
            name="quote_link"
            label="–°—Å—ã–ª–∫–∞ –Ω–∞ –ö–ü"
          >
            <Input placeholder="https://..." />
          </Form.Item>

          <Form.Item className="mb-0">
            <Button
              type="primary"
              htmlType="submit"
              icon={<SaveOutlined />}
              loading={isLoading}
            >
              –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
            </Button>
          </Form.Item>
        </Form>
      </Spin>
    </Card>
  );
};

export default FullMaterialForm;