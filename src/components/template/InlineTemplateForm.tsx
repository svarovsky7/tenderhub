import React, { useEffect } from 'react';
import { AutoComplete, Button, Form, Select, Space, Tooltip, message } from 'antd';
import { CheckOutlined, CloseOutlined } from '@ant-design/icons';
import { DecimalInput } from '../common';
import { useForm, Controller } from 'react-hook-form';
import { yupResolver } from '@hookform/resolvers/yup';
import * as yup from 'yup';
import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';
import { materialsApi } from '../../lib/supabase/api/materials';
import { worksApi } from '../../lib/supabase/api/works';
import { workMaterialTemplatesApi, type WorkMaterialTemplate } from '../../lib/supabase/api/work-material-templates';

interface InlineTemplateFormProps {
  onCancel: () => void;
  editingTemplate?: WorkMaterialTemplate | null;
}

interface FormValues {
  template_name: string;
  template_description?: string;
  work_item_type: 'work' | 'sub_work';
  work_description: string;
  material_item_type: 'material' | 'sub_material';
  material_description: string;
  conversion_coefficient: number;
  is_linked_to_work: boolean;
  notes?: string;
  work_id?: string;
  material_id?: string;
}

interface LibraryOption {
  value: string;
  label: string;
  item: any;
}

const schema = yup.object({
  template_name: yup.string().required('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞'),
  work_description: yup.string().required('–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–±–æ—Ç—É'),
  material_description: yup.string().required('–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª'),
  conversion_coefficient: yup
    .number()
    .typeError('–í–≤–µ–¥–∏—Ç–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ø–µ—Ä–µ–≤–æ–¥–∞')
    .min(0.0001, '–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ 0')
    .required('–í–≤–µ–¥–∏—Ç–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ø–µ—Ä–µ–≤–æ–¥–∞'),
});

const InlineTemplateForm: React.FC<InlineTemplateFormProps> = ({
  onCancel,
  editingTemplate
}) => {
  console.log('üöÄ InlineTemplateForm render:', { editingTemplate });

  const {
    control,
    handleSubmit,
    reset,
    watch,
    setValue,
    formState: { errors },
  } = useForm<FormValues>({
    defaultValues: {
      template_name: '',
      template_description: '',
      work_item_type: 'work',
      work_description: '',
      material_item_type: 'material',
      material_description: '',
      conversion_coefficient: 1.0,
      is_linked_to_work: true,
      notes: '',
      work_id: undefined,
      material_id: undefined,
    },
    resolver: yupResolver(schema),
  });

  const queryClient = useQueryClient();

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–∞–±–æ—Ç (–≤—Å–µ —Ç–∏–ø—ã)
  const { data: works = [] } = useQuery({
    queryKey: ['works-library'],
    queryFn: async () => {
      const response = await worksApi.getAll();
      if (response.error) throw new Error(response.error);
      return response.data || [];
    }
  });

  // –ó–∞–≥—Ä—É–∑–∫–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ (–≤—Å–µ —Ç–∏–ø—ã)
  const { data: materials = [] } = useQuery({
    queryKey: ['materials-library'],
    queryFn: async () => {
      const response = await materialsApi.getAll();
      if (response.error) throw new Error(response.error);
      return response.data || [];
    }
  });

  // –°–æ–∑–¥–∞–Ω–∏–µ/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞
  const saveMutation = useMutation({
    mutationFn: async (values: WorkMaterialTemplate) => {
      if (editingTemplate?.template_item_id || editingTemplate?.id) {
        const itemId = editingTemplate.template_item_id || editingTemplate.id;
        return await workMaterialTemplatesApi.updateTemplateItem(itemId, values);
      } else {
        return await workMaterialTemplatesApi.createTemplateItem(values);
      }
    },
    onSuccess: () => {
      message.success(editingTemplate ? '–≠–ª–µ–º–µ–Ω—Ç —à–∞–±–ª–æ–Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω' : '–≠–ª–µ–º–µ–Ω—Ç —à–∞–±–ª–æ–Ω–∞ —Å–æ–∑–¥–∞–Ω');
      queryClient.invalidateQueries({ queryKey: ['work-material-templates'] });
      onCancel();
      reset();
    },
    onError: (error: any) => {
      message.error(`–û—à–∏–±–∫–∞: ${error.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
    }
  });

  // –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    if (editingTemplate) {
      console.log('üîÑ Filling form with template data:', editingTemplate);

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–∞–±–æ—Ç—ã
      const workData = editingTemplate.work_library || editingTemplate.sub_work_library;
      const workType = editingTemplate.work_library_id ? 'work' : 'sub_work';

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞
      const materialData = editingTemplate.material_library || editingTemplate.sub_material_library;
      const materialType = editingTemplate.material_library_id ? 'material' : 'sub_material';

      setValue('template_name', editingTemplate.template_name || '');
      setValue('template_description', editingTemplate.template_description || '');
      setValue('work_item_type', workType);
      setValue('work_description', workData?.name || '');
      setValue('work_id', editingTemplate.work_library_id || editingTemplate.sub_work_library_id);
      setValue('material_item_type', materialType);
      setValue('material_description', materialData?.name || '');
      setValue('material_id', editingTemplate.material_library_id || editingTemplate.sub_material_library_id);
      setValue('conversion_coefficient', editingTemplate.conversion_coefficient || 1.0);
      setValue('is_linked_to_work', editingTemplate.is_linked_to_work ?? true);
      setValue('notes', editingTemplate.notes || '');
    } else {
      // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –Ω–æ–≤—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤
      setValue('conversion_coefficient', 1.0);
      setValue('is_linked_to_work', true);
    }
  }, [editingTemplate, setValue]);

  const workItemType = watch('work_item_type');
  const materialItemType = watch('material_item_type');

  // –û–ø—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç
  const workOptions: LibraryOption[] = works
    .filter(work => work.item_type === workItemType)
    .map(work => ({
      value: work.id,
      label: work.name,
      item: work
    }));

  // –û–ø—Ü–∏–∏ –¥–ª—è –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
  const materialOptions: LibraryOption[] = materials
    .filter(material => material.item_type === materialItemType)
    .map(material => ({
      value: material.id,
      label: material.name,
      item: material
    }));

  const handleWorkSelect = (_value: string, option: LibraryOption) => {
    console.log('üñ±Ô∏è Work item selected', { value: _value, item: option.item });
    setValue('work_description', option.item.name);
    setValue('work_id', option.item.id);
  };

  const handleMaterialSelect = (_value: string, option: LibraryOption) => {
    console.log('üñ±Ô∏è Material item selected', { value: _value, item: option.item });
    setValue('material_description', option.item.name);
    setValue('material_id', option.item.id);
  };

  const onSubmit = async (values: FormValues) => {
    console.log('üöÄ Form submitted:', values);

    const templateData: WorkMaterialTemplate = {
      template_name: values.template_name,
      template_description: values.template_description,
      work_library_id: values.work_item_type === 'work' ? values.work_id : undefined,
      sub_work_library_id: values.work_item_type === 'sub_work' ? values.work_id : undefined,
      material_library_id: values.material_item_type === 'material' ? values.material_id : undefined,
      sub_material_library_id: values.material_item_type === 'sub_material' ? values.material_id : undefined,
      conversion_coefficient: values.conversion_coefficient || 1.0,
      is_linked_to_work: values.is_linked_to_work !== false,
      notes: values.notes
    };

    saveMutation.mutate(templateData);
  };

  const handleCancel = () => {
    reset();
    onCancel();
  };

  return (
    <Form layout="inline" onFinish={handleSubmit(onSubmit)} className="mb-4 p-4 bg-gray-50 rounded border">
      {/* –ù–∞–∑–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ */}
      <Form.Item
        validateStatus={errors.template_name ? 'error' : ''}
        help={errors.template_name?.message}
      >
        <Controller
          name="template_name"
          control={control}
          render={({ field }) => (
            <AutoComplete
              {...field}
              placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞"
              style={{ width: 200 }}
            />
          )}
        />
      </Form.Item>

      {/* –û–ø–∏—Å–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ */}
      <Form.Item>
        <Controller
          name="template_description"
          control={control}
          render={({ field }) => (
            <AutoComplete
              {...field}
              placeholder="–û–ø–∏—Å–∞–Ω–∏–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)"
              style={{ width: 180 }}
            />
          )}
        />
      </Form.Item>

      {/* –¢–∏–ø —Ä–∞–±–æ—Ç—ã */}
      <Form.Item>
        <Controller
          name="work_item_type"
          control={control}
          render={({ field }) => (
            <Select
              {...field}
              options={[
                { value: 'work', label: '–†–∞–±–æ—Ç–∞' },
                { value: 'sub_work', label: '–°—É–±-—Ä–∞–±–æ—Ç–∞' },
              ]}
              style={{ width: 100 }}
            />
          )}
        />
      </Form.Item>

      {/* –í—ã–±–æ—Ä —Ä–∞–±–æ—Ç—ã */}
      <Form.Item
        validateStatus={errors.work_description ? 'error' : ''}
        help={errors.work_description?.message}
      >
        <Controller
          name="work_description"
          control={control}
          render={({ field }) => (
            <AutoComplete
              {...field}
              options={workOptions}
              onSelect={handleWorkSelect}
              placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–±–æ—Ç—É"
              style={{ width: 200 }}
            />
          )}
        />
      </Form.Item>

      {/* –¢–∏–ø –º–∞—Ç–µ—Ä–∏–∞–ª–∞ */}
      <Form.Item>
        <Controller
          name="material_item_type"
          control={control}
          render={({ field }) => (
            <Select
              {...field}
              options={[
                { value: 'material', label: '–ú–∞—Ç–µ—Ä–∏–∞–ª' },
                { value: 'sub_material', label: '–°—É–±-–º–∞—Ç–µ—Ä–∏–∞–ª' },
              ]}
              style={{ width: 110 }}
            />
          )}
        />
      </Form.Item>

      {/* –í—ã–±–æ—Ä –º–∞—Ç–µ—Ä–∏–∞–ª–∞ */}
      <Form.Item
        validateStatus={errors.material_description ? 'error' : ''}
        help={errors.material_description?.message}
      >
        <Controller
          name="material_description"
          control={control}
          render={({ field }) => (
            <AutoComplete
              {...field}
              options={materialOptions}
              onSelect={handleMaterialSelect}
              placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª"
              style={{ width: 200 }}
            />
          )}
        />
      </Form.Item>

      {/* –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ø–µ—Ä–µ–≤–æ–¥–∞ */}
      <Form.Item
        validateStatus={errors.conversion_coefficient ? 'error' : ''}
        help={errors.conversion_coefficient?.message}
      >
        <Controller
          name="conversion_coefficient"
          control={control}
          render={({ field }) => (
            <DecimalInput
              {...field}
              min={0.0001}
              precision={4}
              placeholder="–ö–æ—ç—Ñ. –ø–µ—Ä–µ–≤–æ–¥–∞"
              style={{ width: 120 }}
            />
          )}
        />
      </Form.Item>

      {/* –ü—Ä–∏–≤—è–∑–∞–Ω –∫ —Ä–∞–±–æ—Ç–µ */}
      <Form.Item>
        <Controller
          name="is_linked_to_work"
          control={control}
          render={({ field }) => (
            <Select
              {...field}
              options={[
                { value: true, label: '–ü—Ä–∏–≤—è–∑–∞–Ω' },
                { value: false, label: '–ù–µ –ø—Ä–∏–≤—è–∑–∞–Ω' },
              ]}
              style={{ width: 110 }}
            />
          )}
        />
      </Form.Item>

      {/* –ü—Ä–∏–º–µ—á–∞–Ω–∏—è */}
      <Form.Item>
        <Controller
          name="notes"
          control={control}
          render={({ field }) => (
            <AutoComplete
              {...field}
              placeholder="–ü—Ä–∏–º–µ—á–∞–Ω–∏—è"
              style={{ width: 150 }}
            />
          )}
        />
      </Form.Item>

      {/* –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π */}
      <Form.Item>
        <Space>
          <Tooltip title="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å">
            <Button
              htmlType="submit"
              type="text"
              icon={<CheckOutlined />}
              loading={saveMutation.isPending}
            />
          </Tooltip>
          <Tooltip title="–û—Ç–º–µ–Ω–∞">
            <Button onClick={handleCancel} type="text" icon={<CloseOutlined />} />
          </Tooltip>
        </Space>
      </Form.Item>
    </Form>
  );
};

export default InlineTemplateForm;