import React, { useState, useCallback, useEffect } from 'react';
import {
  Card,
  Typography,
  Space,
  Button,
  message,
  Alert,
  Spin
} from 'antd';
import { SwapOutlined, InfoCircleOutlined } from '@ant-design/icons';
import QuickTenderSelector from '../components/common/QuickTenderSelector';
import CostRedistributionWizard from '../components/financial/CostRedistributionWizard';
import { tendersApi } from '../lib/supabase/api';
import type { Tender } from '../lib/supabase/types';

const { Title, Text } = Typography;

/**
 * –°—Ç—Ä–∞–Ω–∏—Ü–∞ "–ü–µ—Ä–µ–∫–∏–¥–∫–∞" - –ø–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–º–º–µ—Ä—á–µ—Å–∫–∏—Ö —Å—Ç–æ–∏–º–æ—Å—Ç–µ–π —Ä–∞–±–æ—Ç
 * –º–µ–∂–¥—É –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ –∑–∞—Ç—Ä–∞—Ç
 */
const CostRedistributionPage: React.FC = () => {
  console.log('üöÄ CostRedistributionPage rendered');

  const [tenders, setTenders] = useState<Tender[]>([]);
  const [tendersLoading, setTendersLoading] = useState(false);
  const [selectedTender, setSelectedTender] = useState<Tender | null>(null);

  // Load tenders on mount
  useEffect(() => {
    const loadTenders = async () => {
      console.log('üì° Loading tenders for redistribution...');
      setTendersLoading(true);
      try {
        const result = await tendersApi.getAll({ includeVersions: true });
        if (result.error) {
          console.error('‚ùå Failed to load tenders:', result.error);
          message.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ–Ω–¥–µ—Ä–æ–≤');
          return;
        }
        console.log('‚úÖ Tenders loaded:', result.data?.length);
        setTenders(result.data || []);
      } catch (error) {
        console.error('üí• Exception loading tenders:', error);
        message.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ–Ω–¥–µ—Ä–æ–≤');
      } finally {
        setTendersLoading(false);
      }
    };

    loadTenders();
  }, []);

  const handleTenderSelect = useCallback((tender: Tender) => {
    console.log('üìã Tender selected for redistribution:', tender.id, tender.title);
    setSelectedTender(tender);
  }, []);

  return (
    <div style={{ padding: '24px' }}>
      {/* Page Header */}
      <Card style={{ marginBottom: 24 }}>
        <Space direction="vertical" size="middle" style={{ width: '100%' }}>
          <div style={{ display: 'flex', alignItems: 'center', gap: '12px' }}>
            <SwapOutlined style={{ fontSize: 32, color: '#1890ff' }} />
            <Title level={2} style={{ margin: 0 }}>
              –ü–µ—Ä–µ–∫–∏–¥–∫–∞ –∫–æ–º–º–µ—Ä—á–µ—Å–∫–∏—Ö —Å—Ç–æ–∏–º–æ—Å—Ç–µ–π
            </Title>
          </div>

          <Alert
            icon={<InfoCircleOutlined />}
            message="–§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç"
            description={
              <Space direction="vertical" size="small">
                <Text>
                  –ü–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–∑–≤–æ–ª—è–µ—Ç –≤—ã—á–µ—Å—Ç—å –ø—Ä–æ—Ü–µ–Ω—Ç –æ—Ç –∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Ä–∞–±–æ—Ç
                  –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∑–∞—Ç—Ä–∞—Ç –∏ –ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å —ç—Ç—É —Å—É–º–º—É
                  –Ω–∞ –¥—Ä—É–≥–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.
                </Text>
                <Text type="secondary">
                  ‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–Ω–¥–µ—Ä –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã
                </Text>
                <Text type="secondary">
                  ‚Ä¢ –£–∫–∞–∂–∏—Ç–µ –∏—Å—Ö–æ–¥–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –ø—Ä–æ—Ü–µ–Ω—Ç—ã –≤—ã—á–∏—Ç–∞–Ω–∏—è
                </Text>
                <Text type="secondary">
                  ‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª–µ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
                </Text>
              </Space>
            }
            type="info"
            showIcon
          />
        </Space>
      </Card>

      {/* Tender Selection */}
      <Card
        title="1. –í—ã–±–æ—Ä —Ç–µ–Ω–¥–µ—Ä–∞"
        style={{ marginBottom: 24 }}
      >
        <Space direction="vertical" size="large" style={{ width: '100%' }}>
          <Text>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–Ω–¥–µ—Ä –¥–ª—è –ø–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–æ–º–º–µ—Ä—á–µ—Å–∫–∏—Ö —Å—Ç–æ–∏–º–æ—Å—Ç–µ–π:</Text>

          {tendersLoading ? (
            <div style={{ textAlign: 'center', padding: '40px' }}>
              <Spin size="large" tip="–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–Ω–¥–µ—Ä–æ–≤..." />
            </div>
          ) : (
            <QuickTenderSelector
              tenders={tenders}
              loading={tendersLoading}
              onTenderSelect={handleTenderSelect}
              selectedTenderId={selectedTender?.id || null}
            />
          )}

          {selectedTender && (
            <Alert
              message={`–í—ã–±—Ä–∞–Ω —Ç–µ–Ω–¥–µ—Ä: ${selectedTender.title}`}
              description={
                <Space direction="vertical">
                  <Text type="secondary">–ó–∞–∫–∞–∑—á–∏–∫: {selectedTender.client_name}</Text>
                  <Text type="secondary">–í–µ—Ä—Å–∏—è: {selectedTender.version || 1}</Text>
                </Space>
              }
              type="success"
              showIcon
              closable
              onClose={() => setSelectedTender(null)}
            />
          )}
        </Space>
      </Card>

      {/* Wizard */}
      {selectedTender && (
        <div>
          <Title level={4} style={{ marginBottom: 16 }}>
            2. –ü–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–æ–∏–º–æ—Å—Ç–µ–π
          </Title>

          <CostRedistributionWizard
            tenderId={selectedTender.id}
            tenderTitle={selectedTender.title}
            onComplete={() => {
              message.success('–ü–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ!');
              setSelectedTender(null);
            }}
            onCancel={() => {
              setSelectedTender(null);
            }}
          />
        </div>
      )}
    </div>
  );
};

export default CostRedistributionPage;
