import React, { useState, useEffect, Key } from 'react';
import {
  Card,
  Button,
  Form,
  message,
  Row,
  Col,
  Alert,
  Space,
  Typography,
  Flex,
  Badge,
  Avatar,
  Modal,
  Divider
} from 'antd';
import * as XLSX from 'xlsx-js-style';
import {
  PlusOutlined,
  EditOutlined,
  ArrowLeftOutlined,
  SaveOutlined,
  DatabaseOutlined,
  ReloadOutlined,
  DownloadOutlined,
  UploadOutlined,
  ClearOutlined
} from '@ant-design/icons';
import { useNavigate } from 'react-router-dom';
import {
  getCategoriesWithDetails,
  deleteCategory,
  deleteDetail,
  deleteLocation,
  createLocation,
  clearAllData
} from '../lib/supabase/api/construction-costs';
import { importConstructionCosts, type ImportRow } from '../lib/supabase/api/import-costs';
import { supabase } from '../lib/supabase/client';
import { useTheme } from '../contexts/ThemeContext';
import EditableTable from '../components/admin/EditableTable';
import ModernImportModal from '../components/admin/ModernImportModal';

const { Title, Text } = Typography;

const ConstructionCostsEditPage: React.FC = () => {
  const navigate = useNavigate();
  const { theme } = useTheme();
  const [loading, setLoading] = useState(false);
  const [categories, setCategories] = useState<any[]>([]);
  const [details, setDetails] = useState<any[]>([]);
  const [editingKey, setEditingKey] = useState<string>('');
  const [combinedData, setCombinedData] = useState<any[]>([]);
  const [expandedRowKeys, setExpandedRowKeys] = useState<Key[]>([]);
  const [form] = Form.useForm();
  const [isImportModalVisible, setIsImportModalVisible] = useState(false);
  const [importProgress, setImportProgress] = useState(0);
  const [importStatus, setImportStatus] = useState<'idle' | 'processing' | 'completed' | 'error'>('idle');
  const [importLog, setImportLog] = useState<string[]>([]);
  const [isClearModalVisible, setIsClearModalVisible] = useState(false);

  useEffect(() => {
    loadData();
  }, []);

  useEffect(() => {
    if (categories.length > 0) {
      const data = getCombinedData();
      setCombinedData(data);
      
      const defaultExpandedKeys: Key[] = data
        .filter(record => record.type === 'category')
        .map(record => record.key);
      
      setExpandedRowKeys(defaultExpandedKeys);
    }
  }, [categories]);

  const loadData = async () => {
    console.log('üöÄ [ConstructionCostsEditPage] Loading data');
    setLoading(true);
    
    try {
      const { data: categoriesData, error: catError } = await getCategoriesWithDetails();
      
      if (catError) {
        message.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: ' + catError.message);
        return;
      }

      if (categoriesData) {
        setCategories(categoriesData);
        
        const allDetails: any[] = [];
        categoriesData.forEach((cat: any) => {
          if (cat.details) {
            allDetails.push(...cat.details);
          }
        });
        setDetails(allDetails);
      }
    } catch (error) {
      console.error('‚ùå [loadData] Error:', error);
      message.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö');
    } finally {
      setLoading(false);
    }
  };

  const getCombinedData = () => {
    const result: any[] = [];

    // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –¥–µ—Ç–∞–ª–∏ —Å –∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
    const allDetailsWithCategories: any[] = [];
    categories.forEach(category => {
      const categoryDetails = category.details || [];
      categoryDetails.forEach((detail: any) => {
        allDetailsWithCategories.push({
          ...detail,
          categoryId: category.id,
          categoryName: category.name,
          categoryDescription: category.description,
          categoryUnit: category.unit
        });
      });
    });

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª–∏ –ø–æ order_num
    allDetailsWithCategories.sort((a, b) => {
      const orderA = a.order_num ?? Number.MAX_SAFE_INTEGER;
      const orderB = b.order_num ?? Number.MAX_SAFE_INTEGER;
      if (orderA !== orderB) return orderA - orderB;
      return a.id.localeCompare(b.id);
    });

    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–µ—Ç–∞–ª–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    const categoriesMap = new Map<string, any>();
    categories.forEach(category => {
      categoriesMap.set(category.id, {
        ...category,
        sortedDetails: []
      });
    });

    allDetailsWithCategories.forEach(detail => {
      const category = categoriesMap.get(detail.categoryId);
      if (category) {
        category.sortedDetails.push(detail);
      }
    });

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ç–æ–º –∂–µ –ø–æ—Ä—è–¥–∫–µ, —á—Ç–æ –∏ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–µ—Ç–∞–ª–∏
    const processedCategories = new Set<string>();

    allDetailsWithCategories.forEach(detail => {
      const categoryId = detail.categoryId;

      // –ï—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –µ—â–µ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞, –¥–æ–±–∞–≤–ª—è–µ–º –µ–µ —É–∑–µ–ª
      if (!processedCategories.has(categoryId)) {
        processedCategories.add(categoryId);
        const category = categoriesMap.get(categoryId);

        if (category) {
          // –ë–µ—Ä–µ–º –Ω–æ–º–µ—Ä –∏–∑ –ø–µ—Ä–≤–æ–π –¥–µ—Ç–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
          const firstDetailOrderNum = category.sortedDetails.length > 0
            ? category.sortedDetails[0].order_num
            : null;

          const categoryNode = {
            key: `cat-${category.id}`,
            id: category.id,
            type: 'category',
            level: 1,
            name: category.name,
            description: category.description || '',
            unit: category.unit || '-',
            location: '-',
            categoryName: '-',
            detailName: '-',
            orderNum: firstDetailOrderNum,
            children: [] as any[]
          };

          // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª–∏ –ø–æ –∏–º–µ–Ω–∏+–µ–¥–∏–Ω–∏—Ü–µ
          const detailGroups = new Map<string, any[]>();
          category.sortedDetails.forEach((detail: any) => {
            const groupKey = `${detail.name}_${detail.unit || ''}`;
            if (!detailGroups.has(groupKey)) {
              detailGroups.set(groupKey, []);
            }
            detailGroups.get(groupKey)!.push(detail);
          });

          detailGroups.forEach((detailGroup) => {
            const firstDetail = detailGroup[0];
            const detailNode = {
              key: `detail-group-${firstDetail.id}`,
              id: firstDetail.id,
              type: 'detail',
              level: 2,
              name: firstDetail.name,
              description: '',
              unit: firstDetail.unit || '-',
              location: '-',
              categoryName: category.name,
              detailName: '-',
              orderNum: firstDetail.order_num,
              children: [] as any[]
            };

            detailGroup.forEach((detail: any) => {
              if (detail.location) {
                const locationNode = {
                  key: `location-${detail.id}-${detail.location.id}`,
                  id: detail.location.id,
                  detailRecordId: detail.id,
                  type: 'location',
                  level: 3,
                  name: [detail.location.country, detail.location.region, detail.location.city]
                    .filter(Boolean).join(', '),
                  description: '',
                  unit: '-',
                  location: [detail.location.country, detail.location.region, detail.location.city]
                    .filter(Boolean).join(', '),
                  categoryName: category.name,
                  detailName: firstDetail.name,
                  country: detail.location.country,
                  region: detail.location.region,
                  city: detail.location.city,
                  orderNum: null
                };

                detailNode.children.push(locationNode);
              }
            });

            if (detailNode.children.length === 0) {
              detailNode.children.push({
                key: `no-location-${firstDetail.id}`,
                id: `no-location-${firstDetail.id}`,
                type: 'no-location',
                level: 3,
                name: '–ë–µ–∑ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏',
                description: '',
                unit: '-',
                location: '-',
                categoryName: category.name,
                detailName: firstDetail.name,
                orderNum: null
              });
            }

            categoryNode.children.push(detailNode);
          });

          if (categoryNode.children.length === 0) {
            categoryNode.children.push({
              key: `no-details-${category.id}`,
              id: `no-details-${category.id}`,
              type: 'no-details',
              level: 2,
              name: '–ù–µ—Ç –≤–∏–¥–æ–≤ –∑–∞—Ç—Ä–∞—Ç',
              description: '',
              unit: '-',
              location: '-',
              categoryName: category.name,
              detailName: '-',
              orderNum: null
            });
          }

          result.push(categoryNode);
        }
      }
    });

    // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –±–µ–∑ –¥–µ—Ç–∞–ª–µ–π –≤ –∫–æ–Ω–µ—Ü
    categories.forEach(category => {
      if (!category.details || category.details.length === 0) {
        result.push({
          key: `cat-${category.id}`,
          id: category.id,
          type: 'category',
          level: 1,
          name: category.name,
          description: category.description || '',
          unit: category.unit || '-',
          location: '-',
          categoryName: '-',
          detailName: '-',
          orderNum: null,
          children: [{
            key: `no-details-${category.id}`,
            id: `no-details-${category.id}`,
            type: 'no-details',
            level: 2,
            name: '–ù–µ—Ç –≤–∏–¥–æ–≤ –∑–∞—Ç—Ä–∞—Ç',
            description: '',
            unit: '-',
            location: '-',
            categoryName: category.name,
            detailName: '-',
            orderNum: null
          }]
        });
      }
    });

    return result;
  };

  const edit = (record: any) => {
    if (record.type === 'no-details' || record.type === 'no-location') {
      return;
    }
    
    form.setFieldsValue({
      name: record.type === 'location' ? record.name : record.name,
      description: record.description,
      unit: record.unit
    });
    setEditingKey(record.key);
  };

  const cancel = () => {
    setEditingKey('');
  };

  const save = async (record: any) => {
    try {
      const row = await form.validateFields();
      console.log('üöÄ [save] Saving:', { record, row });

      if (record.type === 'category') {
        const { error } = await supabase
          .from('cost_categories')
          .update({ 
            name: row.name, 
            description: row.description,
            unit: row.unit !== '-' ? row.unit : null
          })
          .eq('id', record.id);
        
        if (error) throw error;
        message.success('–ö–∞—Ç–µ–≥–æ—Ä–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞');
      } else if (record.type === 'detail') {
        const { error } = await supabase
          .from('detail_cost_categories')
          .update({ 
            name: row.name,
            unit: row.unit !== '-' ? row.unit : null
          })
          .eq('id', record.id);
        
        if (error) throw error;
        message.success('–î–µ—Ç–∞–ª—å–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞');
      } else if (record.type === 'location') {
        const parts = row.name.split(',').map((s: string) => s.trim());
        const locationData: any = {};
        
        if (parts[0]) locationData.country = parts[0];
        if (parts[1]) locationData.region = parts[1];
        if (parts[2]) locationData.city = parts[2];
        
        const locationString = [locationData.country, locationData.region, locationData.city]
          .filter(Boolean).join(', ');
        
        const currentLocationString = [record.country, record.region, record.city]
          .filter(Boolean).join(', ');
        
        if (locationString !== currentLocationString) {
          const { data: existingLocation, error: searchError } = await supabase
            .from('location')
            .select('id')
            .eq('country', locationData.country || null)
            .eq('region', locationData.region || null) 
            .eq('city', locationData.city || null)
            .maybeSingle();
          
          if (searchError && searchError.code !== 'PGRST116') {
            throw searchError;
          }
          
          let locationId = record.id;
          
          if (existingLocation) {
            locationId = existingLocation.id;
            console.log('‚úÖ [save] Using existing location:', locationId);
          } else {
            const { data: newLocation, error: createError } = await createLocation(
              locationData.country, 
              locationData.region, 
              locationData.city
            );
            
            if (createError || !newLocation) {
              throw createError || new Error('Failed to create location');
            }
            
            locationId = newLocation.id;
            console.log('‚úÖ [save] Created new location:', locationId);
            message.success('–°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è');
          }
          
          if (locationId !== record.id) {
            const { error: updateError } = await supabase
              .from('detail_cost_categories')
              .update({ location_id: locationId })
              .eq('id', record.detailRecordId);
              
            if (updateError) throw updateError;
            
            const { data: usageCheck, error: usageError } = await supabase
              .from('detail_cost_categories')
              .select('id')
              .eq('location_id', record.id)
              .limit(1);
              
            if (usageError) throw usageError;
            
            if (!usageCheck || usageCheck.length === 0) {
              const { error: deleteError } = await deleteLocation(record.id);
              if (deleteError) {
                console.warn('‚ö†Ô∏è Failed to delete unused location:', deleteError);
              }
            }
          }
        } else {
          const { error } = await supabase
            .from('location')
            .update(locationData)
            .eq('id', record.id);
          
          if (error) throw error;
        }
        
        message.success('–õ–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞');
      }

      setEditingKey('');
      // –£–±—Ä–∞–Ω–æ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ - –æ–±–Ω–æ–≤–ª—è–π—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤—Ä—É—á–Ω—É—é –∫–Ω–æ–ø–∫–æ–π "–û–±–Ω–æ–≤–∏—Ç—å"
    } catch (errInfo) {
      console.error('‚ùå [save] Error:', errInfo);
      message.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è');
    }
  };

  const handleDelete = async (record: any) => {
    try {
      console.log('üöÄ [handleDelete] Deleting:', record);
      
      if (record.type === 'category') {
        const { error } = await deleteCategory(record.id);
        if (error) throw error;
        message.success('–ö–∞—Ç–µ–≥–æ—Ä–∏—è —É–¥–∞–ª–µ–Ω–∞. –ù–∞–∂–º–∏—Ç–µ "–û–±–Ω–æ–≤–∏—Ç—å" –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö');
      } else if (record.type === 'detail') {
        const { error } = await deleteDetail(record.id);
        if (error) throw error;
        message.success('–î–µ—Ç–∞–ª—å–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è —É–¥–∞–ª–µ–Ω–∞. –ù–∞–∂–º–∏—Ç–µ "–û–±–Ω–æ–≤–∏—Ç—å" –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö');
      } else if (record.type === 'location') {
        const { error } = await deleteLocation(record.id);
        if (error) throw error;
        message.success('–õ–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è —É–¥–∞–ª–µ–Ω–∞. –ù–∞–∂–º–∏—Ç–µ "–û–±–Ω–æ–≤–∏—Ç—å" –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö');
      }

      // –£–±—Ä–∞–Ω–æ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ - –æ–±–Ω–æ–≤–ª—è–π—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤—Ä—É—á–Ω—É—é –∫–Ω–æ–ø–∫–æ–π "–û–±–Ω–æ–≤–∏—Ç—å"
    } catch (error) {
      console.error('‚ùå [handleDelete] Error:', error);
      message.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è');
    }
  };

  // –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel
  const handleExportExcel = () => {
    console.log('üöÄ [ConstructionCostsEditPage] Exporting to Excel');

    const exportData: any[] = [];

    // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –¥–µ—Ç–∞–ª–∏ —Å–æ —Å–≤–æ–∏–º–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
    const allDetails: any[] = [];
    categories.forEach(category => {
      category.details?.forEach((detail: any) => {
        allDetails.push({
          ...detail,
          categoryName: category.name,
          categoryUnit: category.unit || category.description?.replace('–ï–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è: ', '') || ''
        });
      });
    });

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ order_num (–µ—Å–ª–∏ –µ—Å—Ç—å) –∏–ª–∏ –ø–æ ID
    allDetails.sort((a, b) => {
      const orderA = a.order_num ?? Number.MAX_SAFE_INTEGER;
      const orderB = b.order_num ?? Number.MAX_SAFE_INTEGER;
      if (orderA !== orderB) return orderA - orderB;
      return a.id.localeCompare(b.id);
    });

    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –¥–µ—Ç–∞–ª–∏ —Å –æ–¥–∏–Ω–∞–∫–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π
    let currentCategoryName = '';

    allDetails.forEach((detail) => {
      const isNewCategory = detail.categoryName !== currentCategoryName;

      exportData.push({
        '‚Ññ': detail.order_num || '',
        '–ö–∞—Ç–µ–≥–æ—Ä–∏—è': isNewCategory ? detail.categoryName : '',
        '–ï–¥.–∏–∑–º. –∫–∞—Ç–µ–≥–æ—Ä–∏–∏': isNewCategory ? detail.categoryUnit : '',
        '–í–∏–¥ –∑–∞—Ç—Ä–∞—Ç': detail.name || '',
        '–ï–¥.–∏–∑–º. –¥–µ—Ç–∞–ª–∏': detail.unit || '',
        '–õ–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è': detail.location ?
          [detail.location.city, detail.location.region, detail.location.country]
            .filter(Boolean).join(', ') : ''
      });

      if (isNewCategory) {
        currentCategoryName = detail.categoryName;
      }
    });

    // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –±–µ–∑ –¥–µ—Ç–∞–ª–µ–π
    categories.forEach(category => {
      if (!category.details || category.details.length === 0) {
        exportData.push({
          '‚Ññ': '',
          '–ö–∞—Ç–µ–≥–æ—Ä–∏—è': category.name,
          '–ï–¥.–∏–∑–º. –∫–∞—Ç–µ–≥–æ—Ä–∏–∏': category.unit || category.description?.replace('–ï–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è: ', '') || '',
          '–í–∏–¥ –∑–∞—Ç—Ä–∞—Ç': '',
          '–ï–¥.–∏–∑–º. –¥–µ—Ç–∞–ª–∏': '',
          '–õ–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è': ''
        });
      }
    });

    const ws = XLSX.utils.json_to_sheet(exportData);
    const wb = XLSX.utils.book_new();
    XLSX.utils.book_append_sheet(wb, ws, '–ó–∞—Ç—Ä–∞—Ç—ã –Ω–∞ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ');
    XLSX.writeFile(wb, 'construction_costs.xlsx');

    message.success('–î–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã');
    console.log('‚úÖ [ConstructionCostsEditPage] Export complete');
  };

  // –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
  const handleClearAll = async () => {
    console.log('üöÄ [ConstructionCostsEditPage] Clearing all data');
    setLoading(true);

    const { error } = await clearAllData();

    if (error) {
      message.error('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö: ' + error.message);
    } else {
      message.success('–í—Å–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã. –ù–∞–∂–º–∏—Ç–µ "–û–±–Ω–æ–≤–∏—Ç—å" –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã');
      // –£–±—Ä–∞–Ω–æ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ - –æ–±–Ω–æ–≤–ª—è–π—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤—Ä—É—á–Ω—É—é –∫–Ω–æ–ø–∫–æ–π "–û–±–Ω–æ–≤–∏—Ç—å"
    }

    setLoading(false);
    setIsClearModalVisible(false);
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–º–ø–æ—Ä—Ç–∞ Excel
  const handleImportExcel = async (file: File) => {
    console.log('üöÄ [ConstructionCostsEditPage] Import starting:', file.name);
    
    // –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
    setImportProgress(0);
    setImportStatus('processing');
    setImportLog([`–ù–∞—á–∞–ª–æ –∏–º–ø–æ—Ä—Ç–∞ —Ñ–∞–π–ª–∞: ${file.name}`]);
    
    const reader = new FileReader();
    
    reader.onload = async (e) => {
      try {
        setImportLog(prev => [...prev, '–ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞...']);
        const data = new Uint8Array(e.target?.result as ArrayBuffer);
        const workbook = XLSX.read(data, { type: 'array' });
        const sheetName = workbook.SheetNames[0];
        const worksheet = workbook.Sheets[sheetName];
        const jsonData = XLSX.utils.sheet_to_json(worksheet, { header: 1 }) as any[][];
        
        console.log('üì¶ Parsed Excel data:', jsonData);
        
        // –í—ã–≤–æ–¥–∏–º –ø–µ—Ä–≤—ã–µ 10 —Å—Ç—Ä–æ–∫ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        console.log('üìä First 10 rows for analysis:');
        jsonData.slice(0, 10).forEach((row, index) => {
          console.log(`Row ${index + 1}:`, {
            col1: row[0], // ‚Ññ
            col2: row[1], // –ö–∞—Ç–µ–≥–æ—Ä–∏—è
            col3: row[2], // –ï–¥.–∏–∑–º. –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            col4: row[3], // –í–∏–¥ –∑–∞—Ç—Ä–∞—Ç
            col5: row[4], // –ï–¥.–∏–∑–º. –¥–µ—Ç–∞–ª–∏
            col6: row[5]  // –õ–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è
          });
        });
        
        setImportLog(prev => [...prev, `–ù–∞–π–¥–µ–Ω–æ —Å—Ç—Ä–æ–∫: ${jsonData.length}`]);
        
        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
        const importRows: ImportRow[] = jsonData.map((row, index) => ({
          orderNum: row[0] ? Number(row[0]) : null,
          categoryName: row[1] ? String(row[1]).trim() : null,
          categoryUnit: row[2] ? String(row[2]).trim() : null,
          detailName: row[3] ? String(row[3]).trim() : null,
          detailUnit: row[4] ? String(row[4]).trim() : null,
          locationName: row[5] ? String(row[5]).trim() : null
        }));

        setImportLog(prev => [...prev, '–ù–∞—á–∏–Ω–∞–µ–º –∏–º–ø–æ—Ä—Ç...']);
        setImportLog(prev => [...prev, 'üìç –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ ‚Üí cost_categories']);
        setImportLog(prev => [...prev, 'üìç –í–∏–¥—ã –∑–∞—Ç—Ä–∞—Ç ‚Üí detail_cost_categories']);
        setImportLog(prev => [...prev, 'üìç –õ–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏ ‚Üí location']);
        
        console.log('üöÄ Calling importConstructionCosts with rows:', importRows.length);
        console.log('Sample import rows:', importRows.slice(0, 3));
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏–º–ø–æ—Ä—Ç–∞
        const result = await importConstructionCosts(importRows);
        
        console.log('‚úÖ Import function returned:', result);
        
        setImportProgress(100);
        setImportLog(prev => [...prev, 
          '‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ',
          `üìä –ò—Ç–æ–≥–∏ –∏–º–ø–æ—Ä—Ç–∞:`,
          `‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${result.success} –∑–∞–ø–∏—Å–µ–π`,
          `üìÇ –°–æ–∑–¥–∞–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: ${result.categoriesCreated}`,
          `üìã –°–æ–∑–¥–∞–Ω–æ –≤–∏–¥–æ–≤ –∑–∞—Ç—Ä–∞—Ç: ${result.detailsCreated}`,
          `üìç –°–æ–∑–¥–∞–Ω–æ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–π: ${result.locationsCreated}`,
          `‚ùå –û—à–∏–±–æ–∫: ${result.failed}`,
          '‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ'
        ]);
        
        if (result.errors.length > 0) {
          result.errors.forEach(err => {
            setImportLog(prev => [...prev, `‚ö†Ô∏è ${err}`]);
          });
        }
        
        setImportStatus('completed');
        message.success(`–ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω! –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${result.success} –∑–∞–ø–∏—Å–µ–π. –ù–∞–∂–º–∏—Ç–µ "–û–±–Ω–æ–≤–∏—Ç—å" –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞`);

        // –£–±—Ä–∞–Ω–æ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ - –æ–±–Ω–æ–≤–ª—è–π—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤—Ä—É—á–Ω—É—é –∫–Ω–æ–ø–∫–æ–π "–û–±–Ω–æ–≤–∏—Ç—å"
        
      } catch (err: any) {
        console.error('‚ùå Import error:', err);
        setImportLog(prev => [...prev, `‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${err.message}`]);
        setImportStatus('error');
        message.error('–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: ' + err.message);
      } finally {
        setLoading(false);
      }
    };
    
    reader.readAsArrayBuffer(file);
    return false; // Prevent default upload
  };

  return (
    <>
      <style>
        {`
          .edit-page-header {
            background: linear-gradient(135deg, #1e3a8a 0%, #059669 50%, #0d9488 100%);
            border-radius: 16px;
            margin-bottom: 24px;
            padding: 32px;
            color: white;
            position: relative;
            overflow: hidden;
          }
          .edit-page-header.dark {
            background: linear-gradient(135deg, #1e293b 0%, #064e3b 50%, #134e4a 100%);
          }
          .edit-page-header::before {
            content: '';
            position: absolute;
            top: -50%;
            right: -50%;
            width: 200%;
            height: 200%;
            background: radial-gradient(circle, rgba(255,255,255,0.1) 0%, transparent 70%);
            animation: rotate 30s linear infinite;
          }
          @keyframes rotate {
            from { transform: rotate(0deg); }
            to { transform: rotate(360deg); }
          }
          .action-buttons {
            display: flex;
            gap: 12px;
            align-items: center;
          }
          .action-btn {
            height: 42px;
            padding: 0 24px;
            border-radius: 8px;
            font-size: 15px;
            transition: all 0.3s ease;
          }
          .action-btn:hover:not(:disabled) {
            transform: translateY(-2px);
          }
          /* Refresh button dark theme - dark transparent background */
          .action-buttons .action-btn.refresh-dark.ant-btn {
            background: rgba(0, 0, 0, 0.6) !important;
            background-color: rgba(0, 0, 0, 0.6) !important;
            backdrop-filter: blur(10px) !important;
          }
          .action-buttons .action-btn.refresh-dark.ant-btn:not(:hover):not(:disabled) {
            background: rgba(0, 0, 0, 0.6) !important;
            background-color: rgba(0, 0, 0, 0.6) !important;
          }
          /* Back to Structure button hover */
          .action-btn:nth-child(1):hover:not(:disabled) {
            background: ${theme === 'dark' ? 'rgba(255, 255, 255, 0.1)' : 'rgba(255, 255, 255, 0.15)'} !important;
            color: #ffffff !important;
            border-color: ${theme === 'dark' ? '#38bdf8' : '#0ea5e9'} !important;
            border-width: 2px !important;
            box-shadow: 0 0 0 3px ${theme === 'dark' ? 'rgba(56, 189, 248, 0.3)' : 'rgba(14, 165, 233, 0.25)'},
                        0 4px 12px rgba(56, 189, 248, 0.4);
          }
          /* Export button hover */
          .action-btn:nth-child(2):hover:not(:disabled) {
            background: #fbbf24 !important;
            color: #ffffff !important;
            border-color: #fbbf24 !important;
            border-width: 2px !important;
            box-shadow: 0 0 0 3px rgba(251, 191, 36, 0.5),
                        0 4px 12px rgba(251, 191, 36, 0.6);
          }
          /* Export button hover - apply white color to icon */
          .action-btn:nth-child(2):hover:not(:disabled) .anticon {
            color: #ffffff !important;
          }
          /* Import button hover */
          .action-btn:nth-child(3):hover:not(:disabled) {
            background: ${theme === 'dark' ? 'rgba(59, 130, 246, 0.9)' : 'rgba(37, 99, 235, 0.95)'} !important;
            color: #ffffff !important;
            border-color: ${theme === 'dark' ? '#60a5fa' : '#3b82f6'} !important;
            border-width: 2px !important;
            box-shadow: 0 0 0 3px ${theme === 'dark' ? 'rgba(96, 165, 250, 0.3)' : 'rgba(59, 130, 246, 0.25)'},
                        0 4px 16px rgba(59, 130, 246, 0.35);
          }
          /* Import button hover - white icon */
          .action-btn:nth-child(3):hover:not(:disabled) .anticon {
            color: #ffffff !important;
          }
          /* Refresh button hover */
          .action-btn:nth-child(4):hover:not(:disabled) {
            background: #52c41a !important;
            color: #ffffff !important;
            border-color: #52c41a !important;
            box-shadow: 0 0 0 3px rgba(82, 196, 26, 0.5), 0 4px 12px rgba(82, 196, 26, 0.6);
          }
          /* Refresh button hover - white icon */
          .action-btn:nth-child(4):hover:not(:disabled) .anticon {
            color: #ffffff !important;
          }
          /* Clear button hover */
          .action-btn:nth-child(5):hover:not(:disabled) {
            background: #ef4444 !important;
            color: #ffffff !important;
            border-color: #ef4444 !important;
            border-width: 3px !important;
            box-shadow: 0 0 0 3px rgba(239, 68, 68, 0.5),
                        0 4px 12px rgba(239, 68, 68, 0.6);
          }
          /* Clear button hover - apply white color to icon */
          .action-btn:nth-child(5):hover:not(:disabled) .anticon {
            color: #ffffff !important;
          }
          .modern-card {
            background: ${theme === 'dark' ? '#1f1f1f' : 'white'};
            border-radius: 12px;
            border: ${theme === 'dark' ? '1px solid #424242' : '1px solid #f0f0f0'};
          }
          /* –£—Å–∫–æ—Ä–µ–Ω–Ω–∞—è –∞–Ω–∏–º–∞—Ü–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ */
          .ant-modal-mask,
          .ant-modal-wrap {
            transition-duration: 0.15s !important;
          }
          .ant-modal {
            transition-duration: 0.15s !important;
          }
        `}
      </style>

      <div className={`edit-page-header ${theme === 'dark' ? 'dark' : ''}`}>
        <Row align="middle" justify="space-between">
          <Col>
            <Flex align="center" gap={16}>
              <Avatar 
                size={64} 
                icon={<DatabaseOutlined />} 
                style={{ background: 'rgba(255,255,255,0.2)' }}
              />
              <div>
                <Title level={2} style={{ margin: 0, color: 'white' }}>
                  –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞—Ç—Ä–∞—Ç–∞–º–∏ –Ω–∞ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ
                </Title>
                <Text style={{ color: 'rgba(255,255,255,0.8)', fontSize: 16 }}>
                  –ò–º–ø–æ—Ä—Ç, —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –∞–Ω–∞–ª–∏–∑ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã—Ö –∑–∞—Ç—Ä–∞—Ç
                </Text>
              </div>
            </Flex>
          </Col>
          <Col>
            <div className="action-buttons">
              {/* –ö —Å—Ç—Ä—É–∫—Ç—É—Ä–µ (Back to Structure) */}
              <Button
                className="action-btn"
                style={{
                  background: theme === 'dark'
                    ? 'rgba(255, 255, 255, 0.1)'
                    : 'rgba(255, 255, 255, 0.15)',
                  backdropFilter: 'blur(10px)',
                  color: '#ffffff',
                  borderColor: theme === 'dark'
                    ? 'rgba(255, 255, 255, 0.2)'
                    : 'rgba(255, 255, 255, 0.3)',
                  fontWeight: 600
                }}
                icon={<ArrowLeftOutlined style={{ color: '#ffffff' }} />}
                onClick={() => navigate('/construction-costs/management')}
                size="large"
              >
                –ö —Å—Ç—Ä—É–∫—Ç—É—Ä–µ
              </Button>

              {/* –≠–∫—Å–ø–æ—Ä—Ç (Export) */}
              <Button
                className="action-btn"
                style={{
                  background: theme === 'dark'
                    ? 'rgba(0, 0, 0, 0.6)'
                    : 'rgba(255, 255, 255, 0.2)',
                  backdropFilter: 'blur(10px)',
                  color: '#ffffff',
                  borderColor: theme === 'dark' ? '#fbbf24' : '#f59e0b',
                  borderWidth: '2px',
                  fontWeight: 600
                }}
                icon={<DownloadOutlined style={{ color: '#fbbf24' }} />}
                onClick={handleExportExcel}
                disabled={categories.length === 0}
                size="large"
              >
                –≠–∫—Å–ø–æ—Ä—Ç
              </Button>

              {/* –ò–º–ø–æ—Ä—Ç (Import) - Primary CTA */}
              <Button
                className="action-btn"
                style={{
                  background: theme === 'dark'
                    ? 'rgba(0, 0, 0, 0.6)'
                    : 'rgba(255, 255, 255, 0.2)',
                  backdropFilter: 'blur(10px)',
                  color: '#ffffff',
                  borderColor: theme === 'dark' ? '#60a5fa' : '#3b82f6',
                  borderWidth: '2px',
                  fontWeight: 600
                }}
                icon={<UploadOutlined style={{ color: theme === 'dark' ? '#60a5fa' : '#3b82f6' }} />}
                onClick={() => setIsImportModalVisible(true)}
                size="large"
              >
                –ò–º–ø–æ—Ä—Ç
              </Button>

              {/* –û–±–Ω–æ–≤–∏—Ç—å (Refresh) */}
              <Button
                className={`action-btn ${theme === 'dark' ? 'refresh-dark' : ''}`}
                style={{
                  background: theme === 'dark'
                    ? 'rgba(0, 0, 0, 0.6)'
                    : 'rgba(255, 255, 255, 0.15)',
                  backdropFilter: 'blur(10px)',
                  color: '#ffffff',
                  borderColor: theme === 'dark'
                    ? 'rgba(255, 255, 255, 0.2)'
                    : '#52c41a',
                  borderWidth: '2px',
                  fontWeight: 600
                }}
                icon={<ReloadOutlined style={{ color: '#52c41a' }} />}
                onClick={loadData}
                loading={loading}
                size="large"
              >
                –û–±–Ω–æ–≤–∏—Ç—å
              </Button>

              {/* –û—á–∏—Å—Ç–∏—Ç—å (Clear All) - Destructive */}
              <Button
                className="action-btn"
                style={{
                  background: theme === 'dark'
                    ? 'rgba(255, 255, 255, 0.1)'
                    : 'rgba(255, 255, 255, 0.25)',
                  backdropFilter: 'blur(10px)',
                  color: theme === 'dark' ? '#ef4444' : '#ffffff',
                  borderColor: '#ef4444',
                  borderWidth: '3px',
                  fontWeight: 600
                }}
                icon={<ClearOutlined style={{ color: '#ef4444' }} />}
                onClick={() => setIsClearModalVisible(true)}
                disabled={categories.length === 0}
                size="large"
              >
                –û—á–∏—Å—Ç–∏—Ç—å
              </Button>
            </div>
          </Col>
        </Row>
      </div>

      <Card className="modern-card" style={{ overflow: 'hidden' }}>
        <Row gutter={[0, 24]}>
          <Col span={24}>
            <Alert
              message={
                <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', width: '100%' }}>
                  <span>–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞—Ç—Ä–∞—Ç</span>
                  <Space style={{ marginLeft: 'auto' }}>
                    <div style={{ display: 'flex', alignItems: 'center', gap: 8 }}>
                      <Text style={{ fontSize: 14 }}>–í–∏–¥–æ–≤ –∑–∞—Ç—Ä–∞—Ç:</Text>
                      <Badge 
                        count={details.length} 
                        style={{ backgroundColor: '#52c41a' }}
                        showZero
                      />
                    </div>
                    <Divider type="vertical" />
                    <div style={{ display: 'flex', alignItems: 'center', gap: 8 }}>
                      <Text style={{ fontSize: 14 }}>–ö–∞—Ç–µ–≥–æ—Ä–∏–π:</Text>
                      <Badge 
                        count={categories.length} 
                        style={{ backgroundColor: '#1890ff' }}
                        showZero
                      />
                    </div>
                  </Space>
                </div>
              }
              description="–†–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏—è, –µ–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è –∏ –æ–ø–∏—Å–∞–Ω–∏—è –ø—Ä—è–º–æ –≤ —Ç–∞–±–ª–∏—Ü–µ. –ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏."
              type="success"
              showIcon
              style={{ borderRadius: 8 }}
            />
          </Col>
          <Col span={24}>
            <EditableTable
              dataSource={combinedData}
              loading={loading}
              editingKey={editingKey}
              form={form}
              onEdit={edit}
              onSave={save}
              onCancel={cancel}
              onDelete={handleDelete}
              expandedRowKeys={expandedRowKeys}
              onExpandedRowsChange={setExpandedRowKeys}
            />
          </Col>
        </Row>
      </Card>

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∏–º–ø–æ—Ä—Ç–∞ */}
      <ModernImportModal
        visible={isImportModalVisible}
        status={importStatus}
        progress={importProgress}
        logs={importLog}
        onCancel={() => {
          setIsImportModalVisible(false);
          setImportStatus('idle');
          setImportProgress(0);
          setImportLog([]);
        }}
        onUpload={handleImportExcel}
      />

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—á–∏—Å—Ç–∫–∏ */}
      <Modal
        title="–£–¥–∞–ª–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ?"
        open={isClearModalVisible}
        onOk={handleClearAll}
        onCancel={() => setIsClearModalVisible(false)}
        okText="–î–∞, —É–¥–∞–ª–∏—Ç—å"
        cancelText="–û—Ç–º–µ–Ω–∞"
        okButtonProps={{ danger: true, loading: loading }}
        centered
        width={480}
        destroyOnClose
      >
        <Space direction="vertical" size={12} style={{ width: '100%' }}>
          <Text>–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ. –ë—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã:</Text>
          <ul style={{ margin: '0 0 0 20px', padding: 0 }}>
            <li>–í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∑–∞—Ç—Ä–∞—Ç</li>
            <li>–í—Å–µ –¥–µ—Ç–∞–ª—å–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</li>
            <li>–í—Å–µ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏</li>
          </ul>
          <Alert
            message="–°–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ BOQ –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã, –Ω–æ —Å—Å—ã–ª–∫–∏ –Ω–∞ –∑–∞—Ç—Ä–∞—Ç—ã –±—É–¥—É—Ç –æ—á–∏—â–µ–Ω—ã."
            type="warning"
            showIcon
            style={{ marginTop: 8 }}
          />
        </Space>
      </Modal>
    </>
  );
};

export default ConstructionCostsEditPage;