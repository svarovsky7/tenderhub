import React, { useState, useEffect } from 'react';
import {
  Layout,
  Tree,
  Button,
  Space,
  Card,
  Modal,
  Form,
  Input,
  Select,
  Switch,
  message,
  Upload,
  Popconfirm,
  Tag,
  Tooltip,
  Row,
  Col,
  Spin,
  Empty,
  Breadcrumb,
  Progress,
  Table,
  Tabs
} from 'antd';
import {
  PlusOutlined,
  EditOutlined,
  DeleteOutlined,
  UploadOutlined,
  FolderOutlined,
  FileOutlined,
  ReloadOutlined,
  DownloadOutlined,
  DragOutlined,
  FolderAddOutlined,
  GlobalOutlined,
  ClearOutlined
} from '@ant-design/icons';
import type { DataNode, TreeProps } from 'antd/es/tree';
import * as XLSX from 'xlsx';
import { importConstructionCosts, type ImportRow } from '../../lib/supabase/api/import-costs';
import { 
  getCategoriesWithDetails, 
  getLocations,
  deleteCategory,
  deleteDetail,
  deleteLocation,
  clearAllData
} from '../../lib/supabase/api/construction-costs';
import { supabase } from '../../lib/supabase/client';

const { Content } = Layout;
const { TabPane } = Tabs;

interface TreeNode extends DataNode {
  data: any;
  type: 'category' | 'detail';
}

const ConstructionCostsPage: React.FC = () => {
  const [loading, setLoading] = useState(false);
  const [treeData, setTreeData] = useState<TreeNode[]>([]);
  const [expandedKeys, setExpandedKeys] = useState<string[]>([]);
  const [selectedKeys, setSelectedKeys] = useState<string[]>([]);
  const [categories, setCategories] = useState<any[]>([]);
  const [locations, setLocations] = useState<any[]>([]);
  const [details, setDetails] = useState<any[]>([]);
  
  // –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞
  const [isImportModalVisible, setIsImportModalVisible] = useState(false);
  const [importProgress, setImportProgress] = useState(0);
  const [importStatus, setImportStatus] = useState<'idle' | 'processing' | 'completed' | 'error'>('idle');
  const [importLog, setImportLog] = useState<string[]>([]);
  
  const [form] = Form.useForm();

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    loadData();
  }, []);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–µ—Ä–µ–≤–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏ –¥–µ—Ç–∞–ª–µ–π
  const loadData = async () => {
    console.log('üöÄ [ConstructionCostsPage] Loading data');
    setLoading(true);
    
    try {
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å –¥–µ—Ç–∞–ª—è–º–∏
      const { data: categoriesData, error: catError } = await getCategoriesWithDetails();
      const { data: locationsData, error: locError } = await getLocations();
      
      if (catError) {
        message.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: ' + catError.message);
        return;
      }
      
      if (locError) {
        message.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–π: ' + locError.message);
        return;
      }

      if (categoriesData) {
        setCategories(categoriesData);
        
        // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –¥–µ—Ç–∞–ª–∏
        const allDetails: any[] = [];
        categoriesData.forEach((cat: any) => {
          if (cat.details) {
            allDetails.push(...cat.details);
          }
        });
        setDetails(allDetails);
        
        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –¥–µ—Ä–µ–≤–æ
        const tree = categoriesData.map((category: any) => ({
          key: `cat-${category.id}`,
          title: (
            <Space>
              <FolderOutlined />
              <span>{category.name}</span>
              {category.description && (
                <Tag color="blue" style={{ fontSize: '10px' }}>{category.description}</Tag>
              )}
            </Space>
          ),
          children: category.details?.map((detail: any) => ({
            key: `detail-${detail.id}`,
            title: (
              <Space>
                <FileOutlined />
                <span>{detail.name}</span>
                {detail.location && (
                  <Tag color="green" style={{ fontSize: '10px' }}>
                    <GlobalOutlined /> {[detail.location.city, detail.location.country].filter(Boolean).join(', ')}
                  </Tag>
                )}
                {detail.unit_cost && (
                  <Tag color="orange">{detail.unit_cost} ‚ÇΩ</Tag>
                )}
              </Space>
            ),
            data: detail,
            type: 'detail' as const,
            isLeaf: true
          })) || [],
          data: category,
          type: 'category' as const
        }));
        
        setTreeData(tree);
        
        // –†–∞—Å–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        const categoryKeys = categoriesData.map((cat: any) => `cat-${cat.id}`);
        setExpandedKeys(categoryKeys);
      }
      
      if (locationsData) {
        setLocations(locationsData);
      }
      
      console.log('‚úÖ [ConstructionCostsPage] Data loaded');
    } catch (err: any) {
      console.error('‚ùå [ConstructionCostsPage] Error:', err);
      message.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö');
    } finally {
      setLoading(false);
    }
  };

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —É–∑–ª–∞
  const onSelect: TreeProps['onSelect'] = (selectedKeys, info) => {
    console.log('üöÄ [ConstructionCostsPage] Node selected:', selectedKeys);
    setSelectedKeys(selectedKeys as string[]);
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–º–ø–æ—Ä—Ç–∞ Excel
  const handleImportExcel = async (file: File) => {
    console.log('üöÄ [ConstructionCostsPage] Import starting:', file.name);
    
    // –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
    setImportProgress(0);
    setImportStatus('processing');
    setImportLog([`–ù–∞—á–∞–ª–æ –∏–º–ø–æ—Ä—Ç–∞ —Ñ–∞–π–ª–∞: ${file.name}`]);
    
    const reader = new FileReader();
    
    reader.onload = async (e) => {
      try {
        setImportLog(prev => [...prev, '–ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞...']);
        const data = new Uint8Array(e.target?.result as ArrayBuffer);
        const workbook = XLSX.read(data, { type: 'array' });
        const sheetName = workbook.SheetNames[0];
        const worksheet = workbook.Sheets[sheetName];
        const jsonData = XLSX.utils.sheet_to_json(worksheet, { header: 1 }) as any[][];
        
        console.log('üì¶ Parsed Excel data:', jsonData);
        
        // –í—ã–≤–æ–¥–∏–º –ø–µ—Ä–≤—ã–µ 10 —Å—Ç—Ä–æ–∫ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        console.log('üìä First 10 rows for analysis:');
        jsonData.slice(0, 10).forEach((row, index) => {
          console.log(`Row ${index + 1}:`, {
            col1: row[0], // ‚Ññ
            col2: row[1], // –ö–∞—Ç–µ–≥–æ—Ä–∏—è
            col3: row[2], // –ï–¥.–∏–∑–º. –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            col4: row[3], // –í–∏–¥ –∑–∞—Ç—Ä–∞—Ç
            col5: row[4], // –ï–¥.–∏–∑–º. –¥–µ—Ç–∞–ª–∏
            col6: row[5]  // –õ–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è
          });
        });
        
        setImportLog(prev => [...prev, `–ù–∞–π–¥–µ–Ω–æ —Å—Ç—Ä–æ–∫: ${jsonData.length}`]);
        
        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
        const importRows: ImportRow[] = jsonData.map((row, index) => ({
          orderNum: row[0] ? Number(row[0]) : null,
          categoryName: row[1] ? String(row[1]).trim() : null,
          categoryUnit: row[2] ? String(row[2]).trim() : null,
          detailName: row[3] ? String(row[3]).trim() : null,
          detailUnit: row[4] ? String(row[4]).trim() : null,
          locationName: row[5] ? String(row[5]).trim() : null
        }));

        setImportLog(prev => [...prev, '–ù–∞—á–∏–Ω–∞–µ–º –∏–º–ø–æ—Ä—Ç...']);
        setImportLog(prev => [...prev, 'üìç –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ ‚Üí cost_categories']);
        setImportLog(prev => [...prev, 'üìç –í–∏–¥—ã –∑–∞—Ç—Ä–∞—Ç ‚Üí detail_cost_categories']);
        setImportLog(prev => [...prev, 'üìç –õ–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏ ‚Üí location']);
        
        console.log('üöÄ Calling importConstructionCosts with rows:', importRows.length);
        console.log('Sample import rows:', importRows.slice(0, 3));
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏–º–ø–æ—Ä—Ç–∞
        const result = await importConstructionCosts(importRows);
        
        console.log('‚úÖ Import function returned:', result);
        
        setImportProgress(100);
        setImportLog(prev => [...prev, 
          '‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ',
          `üìä –ò—Ç–æ–≥–∏ –∏–º–ø–æ—Ä—Ç–∞:`,
          `‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${result.success} –∑–∞–ø–∏—Å–µ–π`,
          `üìÇ –°–æ–∑–¥–∞–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: ${result.categoriesCreated}`,
          `üìã –°–æ–∑–¥–∞–Ω–æ –≤–∏–¥–æ–≤ –∑–∞—Ç—Ä–∞—Ç: ${result.detailsCreated}`,
          `üìç –°–æ–∑–¥–∞–Ω–æ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–π: ${result.locationsCreated}`,
          `‚ùå –û—à–∏–±–æ–∫: ${result.failed}`,
          '‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ'
        ]);
        
        if (result.errors.length > 0) {
          result.errors.forEach(err => {
            setImportLog(prev => [...prev, `‚ö†Ô∏è ${err}`]);
          });
        }
        
        setImportStatus('completed');
        message.success(`–ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω! –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${result.success} –∑–∞–ø–∏—Å–µ–π`);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        await loadData();
        
      } catch (err: any) {
        console.error('‚ùå Import error:', err);
        setImportLog(prev => [...prev, `‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${err.message}`]);
        setImportStatus('error');
        message.error('–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: ' + err.message);
      } finally {
        setLoading(false);
      }
    };
    
    reader.readAsArrayBuffer(file);
    return false; // Prevent default upload
  };

  // –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel
  const handleExportExcel = () => {
    console.log('üöÄ [ConstructionCostsPage] Exporting to Excel');
    
    const exportData: any[] = [];
    
    categories.forEach(category => {
      // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
      exportData.push({
        '‚Ññ': '',
        '–ö–∞—Ç–µ–≥–æ—Ä–∏—è': category.name,
        '–ï–¥.–∏–∑–º. –∫–∞—Ç–µ–≥–æ—Ä–∏–∏': category.description?.replace('–ï–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è: ', '') || '',
        '–í–∏–¥ –∑–∞—Ç—Ä–∞—Ç': '',
        '–ï–¥.–∏–∑–º. –¥–µ—Ç–∞–ª–∏': '',
        '–õ–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è': ''
      });
      
      // –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
      if (category.details) {
        category.details.forEach((detail: any) => {
          const detailName = detail.name.replace(/ \([^)]*\)$/, ''); // –£–±–∏—Ä–∞–µ–º –µ–¥–∏–Ω–∏—Ü—É –∏–∑–º–µ—Ä–µ–Ω–∏—è –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è
          const detailUnit = detail.name.match(/\(([^)]*)\)$/)?.[1] || ''; // –ò–∑–≤–ª–µ–∫–∞–µ–º –µ–¥–∏–Ω–∏—Ü—É –∏–∑–º–µ—Ä–µ–Ω–∏—è
          
          exportData.push({
            '‚Ññ': '',
            '–ö–∞—Ç–µ–≥–æ—Ä–∏—è': '',
            '–ï–¥.–∏–∑–º. –∫–∞—Ç–µ–≥–æ—Ä–∏–∏': '',
            '–í–∏–¥ –∑–∞—Ç—Ä–∞—Ç': detailName,
            '–ï–¥.–∏–∑–º. –¥–µ—Ç–∞–ª–∏': detailUnit,
            '–õ–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è': detail.location ? 
              [detail.location.city, detail.location.region, detail.location.country]
                .filter(Boolean).join(', ') : ''
          });
        });
      }
    });
    
    const ws = XLSX.utils.json_to_sheet(exportData);
    const wb = XLSX.utils.book_new();
    XLSX.utils.book_append_sheet(wb, ws, '–ó–∞—Ç—Ä–∞—Ç—ã –Ω–∞ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ');
    XLSX.writeFile(wb, 'construction_costs.xlsx');
    
    message.success('–î–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã');
    console.log('‚úÖ [ConstructionCostsPage] Export complete');
  };

  // –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
  const handleClearAll = async () => {
    console.log('üöÄ [ConstructionCostsPage] Clearing all data');
    setLoading(true);
    
    const { error } = await clearAllData();
    
    if (error) {
      message.error('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö: ' + error.message);
    } else {
      message.success('–í—Å–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã');
      await loadData();
    }
    
    setLoading(false);
  };

  // –¢–∞–±–ª–∏—Ü–∞ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–π
  const locationColumns = [
    {
      title: '–°—Ç—Ä–∞–Ω–∞',
      dataIndex: 'country',
      key: 'country',
      render: (text: string) => text || '-'
    },
    {
      title: '–†–µ–≥–∏–æ–Ω',
      dataIndex: 'region',
      key: 'region',
      render: (text: string) => text || '-'
    },
    {
      title: '–ì–æ—Ä–æ–¥',
      dataIndex: 'city',
      key: 'city',
      render: (text: string) => text || '-'
    },
    {
      title: '–î–µ–π—Å—Ç–≤–∏—è',
      key: 'actions',
      width: 100,
      render: (_: any, record: any) => (
        <Popconfirm
          title="–£–¥–∞–ª–∏—Ç—å –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏—é?"
          onConfirm={async () => {
            await deleteLocation(record.id);
            message.success('–õ–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è —É–¥–∞–ª–µ–Ω–∞');
            loadData();
          }}
        >
          <Button type="link" danger size="small" icon={<DeleteOutlined />} />
        </Popconfirm>
      )
    }
  ];

  return (
    <Layout style={{ minHeight: '100vh', background: '#f0f2f5' }}>
      <Content style={{ padding: '24px' }}>
        <Row gutter={[16, 16]}>
          <Col span={24}>
            <Card>
              <Space direction="vertical" style={{ width: '100%' }} size="large">
                <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
                  <h2 style={{ margin: 0 }}>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞—Ç—Ä–∞—Ç–∞–º–∏ –Ω–∞ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ</h2>
                  <Space>
                    <Button
                      icon={<ReloadOutlined />}
                      onClick={loadData}
                      loading={loading}
                    >
                      –û–±–Ω–æ–≤–∏—Ç—å
                    </Button>
                    <Button
                      icon={<DownloadOutlined />}
                      onClick={handleExportExcel}
                      disabled={categories.length === 0}
                    >
                      –≠–∫—Å–ø–æ—Ä—Ç
                    </Button>
                    <Button
                      icon={<UploadOutlined />}
                      onClick={() => setIsImportModalVisible(true)}
                    >
                      –ò–º–ø–æ—Ä—Ç
                    </Button>
                    <Popconfirm
                      title="–£–¥–∞–ª–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ?"
                      description="–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ. –í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –¥–µ—Ç–∞–ª–∏ –∏ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã."
                      onConfirm={handleClearAll}
                      okText="–î–∞, —É–¥–∞–ª–∏—Ç—å"
                      cancelText="–û—Ç–º–µ–Ω–∞"
                    >
                      <Button
                        danger
                        icon={<ClearOutlined />}
                        disabled={categories.length === 0}
                      >
                        –û—á–∏—Å—Ç–∏—Ç—å –≤—Å—ë
                      </Button>
                    </Popconfirm>
                  </Space>
                </div>

                <Tabs defaultActiveKey="1">
                  <TabPane tab={`–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –¥–µ—Ç–∞–ª–∏ (${details.length})`} key="1">
                    <Card>
                      <Spin spinning={loading}>
                        {treeData.length > 0 ? (
                          <Tree
                            showLine
                            showIcon
                            blockNode
                            treeData={treeData}
                            expandedKeys={expandedKeys}
                            selectedKeys={selectedKeys}
                            onExpand={setExpandedKeys}
                            onSelect={onSelect}
                            style={{ minHeight: 400 }}
                          />
                        ) : (
                          <Empty description="–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö. –ò–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ Excel —Ñ–∞–π–ª –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã." />
                        )}
                      </Spin>
                    </Card>
                  </TabPane>
                  
                  <TabPane tab={`–õ–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏ (${locations.length})`} key="2">
                    <Card>
                      <Table
                        dataSource={locations}
                        columns={locationColumns}
                        rowKey="id"
                        loading={loading}
                        pagination={{ pageSize: 20 }}
                        locale={{ emptyText: '–ù–µ—Ç –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–π' }}
                      />
                    </Card>
                  </TabPane>
                  
                  <TabPane tab="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞" key="3">
                    <Row gutter={16}>
                      <Col span={8}>
                        <Card>
                          <div style={{ textAlign: 'center' }}>
                            <div style={{ fontSize: '32px', fontWeight: 'bold', color: '#1890ff' }}>
                              {categories.length}
                            </div>
                            <div style={{ color: '#666', marginTop: '8px' }}>–ö–∞—Ç–µ–≥–æ—Ä–∏–π</div>
                          </div>
                        </Card>
                      </Col>
                      <Col span={8}>
                        <Card>
                          <div style={{ textAlign: 'center' }}>
                            <div style={{ fontSize: '32px', fontWeight: 'bold', color: '#52c41a' }}>
                              {details.length}
                            </div>
                            <div style={{ color: '#666', marginTop: '8px' }}>–í–∏–¥–æ–≤ –∑–∞—Ç—Ä–∞—Ç</div>
                          </div>
                        </Card>
                      </Col>
                      <Col span={8}>
                        <Card>
                          <div style={{ textAlign: 'center' }}>
                            <div style={{ fontSize: '32px', fontWeight: 'bold', color: '#faad14' }}>
                              {locations.length}
                            </div>
                            <div style={{ color: '#666', marginTop: '8px' }}>–õ–æ–∫–∞–ª–∏–∑–∞—Ü–∏–π</div>
                          </div>
                        </Card>
                      </Col>
                    </Row>
                  </TabPane>
                </Tabs>
              </Space>
            </Card>
          </Col>
        </Row>

        {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∏–º–ø–æ—Ä—Ç–∞ */}
        <Modal
          title="–ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∏–∑ Excel"
          open={isImportModalVisible}
          onCancel={() => {
            setIsImportModalVisible(false);
            setImportStatus('idle');
            setImportProgress(0);
            setImportLog([]);
          }}
          footer={
            importStatus === 'completed' || importStatus === 'error' ? [
              <Button 
                key="close" 
                type="primary"
                onClick={() => {
                  setIsImportModalVisible(false);
                  setImportStatus('idle');
                  setImportProgress(0);
                  setImportLog([]);
                }}
              >
                –ó–∞–∫—Ä—ã—Ç—å
              </Button>
            ] : null
          }
          width={700}
        >
          <Space direction="vertical" style={{ width: '100%' }}>
            {importStatus === 'idle' && (
              <>
                <p>
                  <strong>–§–æ—Ä–º–∞—Ç Excel —Ñ–∞–π–ª–∞ (6 –∫–æ–ª–æ–Ω–æ–∫):</strong>
                </p>
                <table style={{ width: '100%', fontSize: '12px', border: '1px solid #d9d9d9' }}>
                  <thead>
                    <tr style={{ backgroundColor: '#fafafa' }}>
                      <th style={{ padding: '8px', border: '1px solid #d9d9d9' }}>A: ‚Ññ</th>
                      <th style={{ padding: '8px', border: '1px solid #d9d9d9' }}>B: –ö–∞—Ç–µ–≥–æ—Ä–∏—è</th>
                      <th style={{ padding: '8px', border: '1px solid #d9d9d9' }}>C: –ï–¥.–∏–∑–º. –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</th>
                      <th style={{ padding: '8px', border: '1px solid #d9d9d9' }}>D: –í–∏–¥ –∑–∞—Ç—Ä–∞—Ç</th>
                      <th style={{ padding: '8px', border: '1px solid #d9d9d9' }}>E: –ï–¥.–∏–∑–º. –¥–µ—Ç–∞–ª–∏</th>
                      <th style={{ padding: '8px', border: '1px solid #d9d9d9' }}>F: –õ–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è</th>
                    </tr>
                  </thead>
                  <tbody>
                    <tr>
                      <td style={{ padding: '8px', border: '1px solid #d9d9d9' }}>1</td>
                      <td style={{ padding: '8px', border: '1px solid #d9d9d9' }}>–ú–∞—Ç–µ—Ä–∏–∞–ª—ã</td>
                      <td style={{ padding: '8px', border: '1px solid #d9d9d9' }}>—Ç</td>
                      <td style={{ padding: '8px', border: '1px solid #d9d9d9' }}></td>
                      <td style={{ padding: '8px', border: '1px solid #d9d9d9' }}></td>
                      <td style={{ padding: '8px', border: '1px solid #d9d9d9' }}></td>
                    </tr>
                    <tr>
                      <td style={{ padding: '8px', border: '1px solid #d9d9d9' }}></td>
                      <td style={{ padding: '8px', border: '1px solid #d9d9d9' }}></td>
                      <td style={{ padding: '8px', border: '1px solid #d9d9d9' }}></td>
                      <td style={{ padding: '8px', border: '1px solid #d9d9d9' }}>–¶–µ–º–µ–Ω—Ç –ú500</td>
                      <td style={{ padding: '8px', border: '1px solid #d9d9d9' }}>–∫–≥</td>
                      <td style={{ padding: '8px', border: '1px solid #d9d9d9' }}>–†–æ—Å—Å–∏—è</td>
                    </tr>
                  </tbody>
                </table>
                <div style={{ backgroundColor: '#e6f7ff', padding: '12px', borderRadius: '4px' }}>
                  <strong>üìç –î–∞–Ω–Ω—ã–µ –∏–º–ø–æ—Ä—Ç–∏—Ä—É—é—Ç—Å—è –≤ —Ç–∞–±–ª–∏—Ü—ã:</strong><br/>
                  ‚Ä¢ <strong>–ö–∞—Ç–µ–≥–æ—Ä–∏—è</strong> (—Å—Ç–æ–ª–±–µ—Ü B) ‚Üí —Ç–∞–±–ª–∏—Ü–∞ <code>cost_categories</code><br/>
                  ‚Ä¢ <strong>–í–∏–¥ –∑–∞—Ç—Ä–∞—Ç</strong> (—Å—Ç–æ–ª–±–µ—Ü D) ‚Üí —Ç–∞–±–ª–∏—Ü–∞ <code>detail_cost_categories</code><br/>
                  ‚Ä¢ <strong>–õ–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è</strong> (—Å—Ç–æ–ª–±–µ—Ü F) ‚Üí —Ç–∞–±–ª–∏—Ü–∞ <code>location</code>
                </div>

                <Upload.Dragger
                  accept=".xlsx,.xls"
                  beforeUpload={handleImportExcel}
                  showUploadList={false}
                >
                  <p className="ant-upload-drag-icon">
                    <UploadOutlined style={{ fontSize: 48 }} />
                  </p>
                  <p className="ant-upload-text">
                    –ù–∞–∂–º–∏—Ç–µ –∏–ª–∏ –ø–µ—Ä–µ—Ç–∞—â–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
                  </p>
                  <p className="ant-upload-hint">
                    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ñ–∞–π–ª—ã Excel (.xlsx, .xls)
                  </p>
                </Upload.Dragger>
              </>
            )}

            {(importStatus === 'processing' || importStatus === 'completed' || importStatus === 'error') && (
              <>
                <div style={{ padding: '20px 0' }}>
                  <Progress
                    percent={importProgress}
                    status={
                      importStatus === 'error' ? 'exception' : 
                      importStatus === 'completed' ? 'success' : 
                      'active'
                    }
                    strokeColor={
                      importStatus === 'error' ? '#ff4d4f' :
                      importStatus === 'completed' ? '#52c41a' :
                      undefined
                    }
                  />
                </div>

                <div style={{ 
                  backgroundColor: '#f5f5f5', 
                  borderRadius: '8px', 
                  padding: '12px',
                  maxHeight: '300px',
                  overflowY: 'auto',
                  fontSize: '12px',
                  fontFamily: 'monospace'
                }}>
                  <div style={{ marginBottom: '8px', fontWeight: 'bold', color: '#1890ff' }}>
                    üìã –ñ—É—Ä–Ω–∞–ª –∏–º–ø–æ—Ä—Ç–∞:
                  </div>
                  {importLog.map((log, index) => (
                    <div 
                      key={index} 
                      style={{ 
                        marginBottom: '4px',
                        color: log.includes('‚ùå') ? '#ff4d4f' : 
                               log.includes('‚úÖ') ? '#52c41a' : 
                               log.includes('üìç') ? '#1890ff' :
                               '#595959'
                      }}
                    >
                      {log}
                    </div>
                  ))}
                  {importStatus === 'processing' && (
                    <div style={{ color: '#1890ff', marginTop: '8px' }}>
                      <Spin size="small" /> –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö...
                    </div>
                  )}
                </div>

                {importStatus === 'completed' && (
                  <div style={{ 
                    marginTop: '16px', 
                    padding: '12px', 
                    backgroundColor: '#f6ffed', 
                    borderRadius: '8px',
                    border: '1px solid #b7eb8f'
                  }}>
                    <div style={{ color: '#52c41a', fontWeight: 'bold' }}>
                      ‚úÖ –ò–º–ø–æ—Ä—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!
                    </div>
                  </div>
                )}

                {importStatus === 'error' && (
                  <div style={{ 
                    marginTop: '16px', 
                    padding: '12px', 
                    backgroundColor: '#fff2f0', 
                    borderRadius: '8px',
                    border: '1px solid #ffccc7'
                  }}>
                    <div style={{ color: '#ff4d4f', fontWeight: 'bold' }}>
                      ‚ùå –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —Å –æ—à–∏–±–∫–∞–º–∏
                    </div>
                  </div>
                )}
              </>
            )}
          </Space>
        </Modal>
      </Content>
    </Layout>
  );
};

export default ConstructionCostsPage;