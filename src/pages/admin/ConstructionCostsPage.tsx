import React, { useState, useEffect } from 'react';
import {
  Layout,
  Tree,
  Button,
  Space,
  Card,
  Modal,
  Input,
  Select,
  Switch,
  message,
  Upload,
  Popconfirm,
  Tag,
  Tooltip,
  Row,
  Col,
  Spin,
  Empty,
  Breadcrumb,
  Progress,
  Table,
  Tabs,
  Typography,
  Divider,
  Badge,
  Statistic,
  Alert,
  Avatar,
  Flex
} from 'antd';
import {
  PlusOutlined,
  EditOutlined,
  DeleteOutlined,
  UploadOutlined,
  FolderOutlined,
  FileOutlined,
  ReloadOutlined,
  DownloadOutlined,
  DragOutlined,
  FolderAddOutlined,
  GlobalOutlined,
  ClearOutlined,
  SaveOutlined,
  CheckOutlined,
  CloseOutlined,
  DatabaseOutlined,
  BarChartOutlined,
  SettingOutlined,
  InfoCircleOutlined,
  ThunderboltOutlined
} from '@ant-design/icons';
import type { DataNode, TreeProps } from 'antd/es/tree';
import * as XLSX from 'xlsx-js-style';
import { importConstructionCosts, type ImportRow } from '../../lib/supabase/api/import-costs';
import { 
  getCategoriesWithDetails, 
  getLocations,
  deleteLocation,
  clearAllData
} from '../../lib/supabase/api/construction-costs';
import { supabase } from '../../lib/supabase/client';
import ModernImportModal from '../../components/admin/ModernImportModal';
import { useTheme } from '../../contexts/ThemeContext';

const { Content } = Layout;
const { TabPane } = Tabs;
const { Text, Title } = Typography;

interface TreeNode extends DataNode {
  data: any;
  type: 'category' | 'detail';
}

const ConstructionCostsPage: React.FC = () => {
  const { theme } = useTheme();
  const [loading, setLoading] = useState(false);
  const [treeData, setTreeData] = useState<TreeNode[]>([]);
  const [expandedKeys, setExpandedKeys] = useState<string[]>([]);
  const [selectedKeys, setSelectedKeys] = useState<string[]>([]);
  const [categories, setCategories] = useState<any[]>([]);
  const [locations, setLocations] = useState<any[]>([]);
  const [details, setDetails] = useState<any[]>([]);
  
  // –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞
  const [isImportModalVisible, setIsImportModalVisible] = useState(false);
  const [importProgress, setImportProgress] = useState(0);
  const [importStatus, setImportStatus] = useState<'idle' | 'processing' | 'completed' | 'error'>('idle');
  const [importLog, setImportLog] = useState<string[]>([]);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    loadData();
  }, []);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–µ—Ä–µ–≤–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏ –¥–µ—Ç–∞–ª–µ–π
  const loadData = async () => {
    console.log('üöÄ [ConstructionCostsPage] Loading data');
    setLoading(true);
    
    try {
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å –¥–µ—Ç–∞–ª—è–º–∏
      const { data: categoriesData, error: catError } = await getCategoriesWithDetails();
      const { data: locationsData, error: locError } = await getLocations();
      
      if (catError) {
        message.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: ' + catError.message);
        return;
      }
      
      if (locError) {
        message.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–π: ' + locError.message);
        return;
      }

      if (categoriesData) {
        setCategories(categoriesData);
        
        // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –¥–µ—Ç–∞–ª–∏
        const allDetails: any[] = [];
        categoriesData.forEach((cat: any) => {
          if (cat.details) {
            allDetails.push(...cat.details);
          }
        });
        setDetails(allDetails);
        
        // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª–∏ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é (—Ç–∞–∫ –∫–∞–∫ –æ–¥–Ω–∞ –¥–µ—Ç–∞–ª—å –º–æ–∂–µ—Ç –∏–º–µ—Ç—å –º–Ω–æ–≥–æ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–π)
        const detailsByName = new Map<string, any[]>();
        allDetails.forEach(detail => {
          const key = detail.name;
          if (!detailsByName.has(key)) {
            detailsByName.set(key, []);
          }
          detailsByName.get(key)!.push(detail);
        });
        
        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –¥–µ—Ä–µ–≤–æ
        const tree = categoriesData.map((category: any) => {
          // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
          const categoryDetailsByName = new Map<string, any[]>();
          category.details?.forEach((detail: any) => {
            const key = detail.name;
            if (!categoryDetailsByName.has(key)) {
              categoryDetailsByName.set(key, []);
            }
            categoryDetailsByName.get(key)!.push(detail);
          });
          
          // –°–æ–∑–¥–∞–µ–º —É–∑–ª—ã –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –¥–µ—Ç–∞–ª–µ–π
          const detailNodes: any[] = [];
          categoryDetailsByName.forEach((detailGroup, detailName) => {
            const locations = detailGroup.map(d => d.location).filter(Boolean);
            const uniqueLocations = locations.filter((loc, index, self) => 
              index === self.findIndex(l => 
                l?.id === loc?.id
              )
            );
            
            detailNodes.push({
              key: `detail-${detailGroup[0].id}-group`,
              title: (
                <Space>
                  <FileOutlined />
                  <span>
                    {detailName}
                    {detailGroup[0].unit && (
                      <span style={{ color: '#666' }}> ({detailGroup[0].unit})</span>
                    )}
                  </span>
                  {uniqueLocations.length > 0 && (
                    <Tag color="blue">{uniqueLocations.length} –ª–æ–∫–∞–ª–∏–∑.</Tag>
                  )}
                </Space>
              ),
              data: detailGroup[0],
              type: 'detail',
              children: uniqueLocations.map(loc => ({
                key: `location-${loc.id}`,
                title: (
                  <Space>
                    <GlobalOutlined />
                    <span>
                      {[loc.city, loc.region, loc.country].filter(Boolean).join(', ') || '–õ–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è'}
                    </span>
                  </Space>
                ),
                data: loc,
                isLeaf: true
              }))
            });
          });
          
          return {
            key: `category-${category.id}`,
            title: (
              <Space>
                <FolderOutlined />
                <span style={{ fontWeight: 500 }}>
                  {category.name}
                  {category.unit && (
                    <span style={{ color: '#666' }}> ({category.unit})</span>
                  )}
                </span>
                <Tag color="green">{category.details?.length || 0} –≤–∏–¥–æ–≤</Tag>
              </Space>
            ),
            data: category,
            type: 'category',
            children: detailNodes
          };
        });
        
        setTreeData(tree);
        
        // –†–∞—Å–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —É–∑–ª—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        const allKeys: string[] = [];
        const extractKeys = (nodes: any[]) => {
          nodes.forEach(node => {
            allKeys.push(node.key);
            if (node.children) {
              extractKeys(node.children);
            }
          });
        };
        extractKeys(tree);
        setExpandedKeys(allKeys);
      }
      
      if (locationsData) {
        setLocations(locationsData);
      }
    } catch (error) {
      console.error('‚ùå [loadData] Error:', error);
      message.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö');
    } finally {
      setLoading(false);
    }
  };

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞—Å–∫—Ä—ã—Ç–∏—è/—Å–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è —É–∑–ª–æ–≤
  const onExpand: TreeProps['onExpand'] = (expandedKeysValue) => {
    console.log('üöÄ [ConstructionCostsPage] Expanded keys:', expandedKeysValue);
    setExpandedKeys(expandedKeysValue as string[]);
  };

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —É–∑–ª–∞
  const onSelect: TreeProps['onSelect'] = (selectedKeys, info) => {
    console.log('üöÄ [ConstructionCostsPage] Node selected:', selectedKeys);
    setSelectedKeys(selectedKeys as string[]);
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–º–ø–æ—Ä—Ç–∞ Excel
  const handleImportExcel = async (file: File) => {
    console.log('üöÄ [ConstructionCostsPage] Import starting:', file.name);
    
    // –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
    setImportProgress(0);
    setImportStatus('processing');
    setImportLog([`–ù–∞—á–∞–ª–æ –∏–º–ø–æ—Ä—Ç–∞ —Ñ–∞–π–ª–∞: ${file.name}`]);
    
    const reader = new FileReader();
    
    reader.onload = async (e) => {
      try {
        setImportLog(prev => [...prev, '–ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞...']);
        const data = new Uint8Array(e.target?.result as ArrayBuffer);
        const workbook = XLSX.read(data, { type: 'array' });
        const sheetName = workbook.SheetNames[0];
        const worksheet = workbook.Sheets[sheetName];
        const jsonData = XLSX.utils.sheet_to_json(worksheet, { header: 1 }) as any[][];
        
        console.log('üì¶ Parsed Excel data:', jsonData);
        
        // –í—ã–≤–æ–¥–∏–º –ø–µ—Ä–≤—ã–µ 10 —Å—Ç—Ä–æ–∫ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        console.log('üìä First 10 rows for analysis:');
        jsonData.slice(0, 10).forEach((row, index) => {
          console.log(`Row ${index + 1}:`, {
            col1: row[0], // ‚Ññ
            col2: row[1], // –ö–∞—Ç–µ–≥–æ—Ä–∏—è
            col3: row[2], // –ï–¥.–∏–∑–º. –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            col4: row[3], // –í–∏–¥ –∑–∞—Ç—Ä–∞—Ç
            col5: row[4], // –ï–¥.–∏–∑–º. –¥–µ—Ç–∞–ª–∏
            col6: row[5]  // –õ–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è
          });
        });
        
        setImportLog(prev => [...prev, `–ù–∞–π–¥–µ–Ω–æ —Å—Ç—Ä–æ–∫: ${jsonData.length}`]);
        
        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
        const importRows: ImportRow[] = jsonData.map((row, index) => ({
          orderNum: row[0] ? Number(row[0]) : null,
          categoryName: row[1] ? String(row[1]).trim() : null,
          categoryUnit: row[2] ? String(row[2]).trim() : null,
          detailName: row[3] ? String(row[3]).trim() : null,
          detailUnit: row[4] ? String(row[4]).trim() : null,
          locationName: row[5] ? String(row[5]).trim() : null
        }));

        setImportLog(prev => [...prev, '–ù–∞—á–∏–Ω–∞–µ–º –∏–º–ø–æ—Ä—Ç...']);
        setImportLog(prev => [...prev, 'üìç –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ ‚Üí cost_categories']);
        setImportLog(prev => [...prev, 'üìç –í–∏–¥—ã –∑–∞—Ç—Ä–∞—Ç ‚Üí detail_cost_categories']);
        setImportLog(prev => [...prev, 'üìç –õ–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏ ‚Üí location']);
        
        console.log('üöÄ Calling importConstructionCosts with rows:', importRows.length);
        console.log('Sample import rows:', importRows.slice(0, 3));
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏–º–ø–æ—Ä—Ç–∞
        const result = await importConstructionCosts(importRows);
        
        console.log('‚úÖ Import function returned:', result);
        
        setImportProgress(100);
        setImportLog(prev => [...prev, 
          '‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ',
          `üìä –ò—Ç–æ–≥–∏ –∏–º–ø–æ—Ä—Ç–∞:`,
          `‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${result.success} –∑–∞–ø–∏—Å–µ–π`,
          `üìÇ –°–æ–∑–¥–∞–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: ${result.categoriesCreated}`,
          `üìã –°–æ–∑–¥–∞–Ω–æ –≤–∏–¥–æ–≤ –∑–∞—Ç—Ä–∞—Ç: ${result.detailsCreated}`,
          `üìç –°–æ–∑–¥–∞–Ω–æ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–π: ${result.locationsCreated}`,
          `‚ùå –û—à–∏–±–æ–∫: ${result.failed}`,
          '‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ'
        ]);
        
        if (result.errors.length > 0) {
          result.errors.forEach(err => {
            setImportLog(prev => [...prev, `‚ö†Ô∏è ${err}`]);
          });
        }
        
        setImportStatus('completed');
        message.success(`–ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω! –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${result.success} –∑–∞–ø–∏—Å–µ–π`);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        await loadData();
        
      } catch (err: any) {
        console.error('‚ùå Import error:', err);
        setImportLog(prev => [...prev, `‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${err.message}`]);
        setImportStatus('error');
        message.error('–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: ' + err.message);
      } finally {
        setLoading(false);
      }
    };
    
    reader.readAsArrayBuffer(file);
    return false; // Prevent default upload
  };

  // –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel
  const handleExportExcel = () => {
    console.log('üöÄ [ConstructionCostsPage] Exporting to Excel');
    
    const exportData: any[] = [];
    let rowNumber = 1;
    
    categories.forEach(category => {
      // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª–∏ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
      const detailsByName = new Map<string, any[]>();
      category.details?.forEach((detail: any) => {
        const key = detail.name;
        if (!detailsByName.has(key)) {
          detailsByName.set(key, []);
        }
        detailsByName.get(key)!.push(detail);
      });
      
      // –î–ª—è –∫–∞–∂–¥–æ–π —É–Ω–∏–∫–∞–ª—å–Ω–æ–π –¥–µ—Ç–∞–ª–∏ –¥–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É —Å –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π
      let isFirstDetail = true;
      detailsByName.forEach((detailGroup, detailName) => {
        detailGroup.forEach((detail, index) => {
          const detailNameClean = detailName.replace(/ \([^)]*\)$/, ''); // –£–±–∏—Ä–∞–µ–º –µ–¥–∏–Ω–∏—Ü—É –∏–∑–º–µ—Ä–µ–Ω–∏—è –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è
          const detailUnit = detailName.match(/\(([^)]*)\)$/)?.[1] || ''; // –ò–∑–≤–ª–µ–∫–∞–µ–º –µ–¥–∏–Ω–∏—Ü—É –∏–∑–º–µ—Ä–µ–Ω–∏—è
          
          exportData.push({
            '‚Ññ': index === 0 ? rowNumber++ : '',
            '–ö–∞—Ç–µ–≥–æ—Ä–∏—è': isFirstDetail ? category.name : '',
            '–ï–¥.–∏–∑–º. –∫–∞—Ç–µ–≥–æ—Ä–∏–∏': isFirstDetail ? (category.description?.replace('–ï–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è: ', '') || '') : '',
            '–í–∏–¥ –∑–∞—Ç—Ä–∞—Ç': index === 0 ? detailNameClean : '',
            '–ï–¥.–∏–∑–º. –¥–µ—Ç–∞–ª–∏': index === 0 ? detailUnit : '',
            '–õ–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è': detail.location ? 
              [detail.location.city, detail.location.region, detail.location.country]
                .filter(Boolean).join(', ') : ''
          });
          
          if (isFirstDetail) {
            isFirstDetail = false;
          }
        });
      });
      
      // –ï—Å–ª–∏ —É –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ—Ç –¥–µ—Ç–∞–ª–µ–π, –¥–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É —Å –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π
      if (!category.details || category.details.length === 0) {
        exportData.push({
          '‚Ññ': rowNumber++,
          '–ö–∞—Ç–µ–≥–æ—Ä–∏—è': category.name,
          '–ï–¥.–∏–∑–º. –∫–∞—Ç–µ–≥–æ—Ä–∏–∏': category.description?.replace('–ï–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è: ', '') || '',
          '–í–∏–¥ –∑–∞—Ç—Ä–∞—Ç': '',
          '–ï–¥.–∏–∑–º. –¥–µ—Ç–∞–ª–∏': '',
          '–õ–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è': ''
        });
      }
    });
    
    const ws = XLSX.utils.json_to_sheet(exportData);
    const wb = XLSX.utils.book_new();
    XLSX.utils.book_append_sheet(wb, ws, '–ó–∞—Ç—Ä–∞—Ç—ã –Ω–∞ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ');
    XLSX.writeFile(wb, 'construction_costs.xlsx');
    
    message.success('–î–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã');
    console.log('‚úÖ [ConstructionCostsPage] Export complete');
  };

  // –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
  const handleClearAll = async () => {
    console.log('üöÄ [ConstructionCostsPage] Clearing all data');
    setLoading(true);
    
    const { error } = await clearAllData();
    
    if (error) {
      message.error('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö: ' + error.message);
    } else {
      message.success('–í—Å–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã');
      await loadData();
    }
    
    setLoading(false);
  };

  return (
    <>
      <style>
        {`
          /* –°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ */
          .modern-card {
            background: ${theme === 'dark' ? '#1f1f1f' : 'white'};
            border-radius: 12px;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.12), 0 1px 2px rgba(0, 0, 0, 0.06);
            border: ${theme === 'dark' ? '1px solid #424242' : 'none'};
            transition: all 0.3s ease;
          }

          .modern-card:hover {
            box-shadow: 0 10px 20px rgba(0, 0, 0, ${theme === 'dark' ? '0.3' : '0.1'});
          }

          /* –°—Ç–∏–ª–∏–∑–∞—Ü–∏—è –¥–µ—Ä–µ–≤–∞ */
          .ant-tree {
            background: transparent;
            font-size: 15px;
          }

          .ant-tree-node-content-wrapper {
            transition: all 0.2s;
            padding: 6px 12px;
            border-radius: 6px;
          }

          .ant-tree-node-content-wrapper:hover {
            background: ${theme === 'dark' ? '#262626' : '#f0f2f5'};
          }

          .ant-tree-node-selected .ant-tree-node-content-wrapper {
            background: ${theme === 'dark' ? '#003a70' : '#e6f7ff'};
          }

          /* –ë—ã—Å—Ç—Ä–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */
          .stats-card {
            background: ${theme === 'dark' ? '#1f1f1f' : 'white'};
            border-radius: 12px;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.08);
            border: ${theme === 'dark' ? '1px solid #424242' : 'none'};
            transition: all 0.3s ease;
            height: 100%;
          }

          .stats-card:hover {
            transform: translateY(-4px);
            box-shadow: 0 4px 12px rgba(0, 0, 0, ${theme === 'dark' ? '0.3' : '0.15'});
          }
        `}
      </style>

      <Content style={{ background: theme === 'dark' ? '#141414' : '#f0f2f5', minHeight: 'calc(100vh - 64px)' }}>
        <div style={{ padding: '24px', maxWidth: 1600, margin: '0 auto' }}>
          {/* –ë—ã—Å—Ç—Ä–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
          <Row gutter={[16, 16]} style={{ marginBottom: 24 }}>
            <Col xs={24} sm={8}>
              <Card className="stats-card">
                <Statistic
                  title="–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∑–∞—Ç—Ä–∞—Ç"
                  value={categories.length}
                  prefix={<FolderOutlined style={{ color: '#1890ff', fontSize: 24 }} />}
                  valueStyle={{ color: '#1890ff', fontSize: 36, fontWeight: 'bold', lineHeight: 1.2 }}
                />
              </Card>
            </Col>
            <Col xs={24} sm={8}>
              <Card className="stats-card">
                <Statistic
                  title="–í–∏–¥—ã –∑–∞—Ç—Ä–∞—Ç"
                  value={details.length}
                  prefix={<FileOutlined style={{ color: '#52c41a', fontSize: 24 }} />}
                  valueStyle={{ color: '#52c41a', fontSize: 36, fontWeight: 'bold', lineHeight: 1.2 }}
                />
              </Card>
            </Col>
            <Col xs={24} sm={8}>
              <Card className="stats-card">
                <Statistic
                  title="–õ–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏"
                  value={locations.length}
                  prefix={<GlobalOutlined style={{ color: '#faad14', fontSize: 24 }} />}
                  valueStyle={{ color: '#faad14', fontSize: 36, fontWeight: 'bold', lineHeight: 1.2 }}
                />
              </Card>
            </Col>
          </Row>

          {/* –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç */}
          <Card className="modern-card">
            {treeData.length > 0 ? (
              <>
                <Alert
                  message="–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∑–∞—Ç—Ä–∞—Ç"
                  description="–ò–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π, –≤–∏–¥–æ–≤ –∑–∞—Ç—Ä–∞—Ç –∏ –∏—Ö –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–π. –ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π."
                  type="info"
                  showIcon
                  style={{ marginBottom: 16, borderRadius: 8 }}
                />
                
                <Tree
                  showLine={{ showLeafIcon: false }}
                  showIcon
                  defaultExpandAll
                  expandedKeys={expandedKeys}
                  selectedKeys={selectedKeys}
                  onExpand={onExpand}
                  onSelect={onSelect}
                  treeData={treeData}
                  style={{ padding: '8px 0' }}
                />
              </>
            ) : (
              <Empty
                image={Empty.PRESENTED_IMAGE_SIMPLE}
                description="–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"
                style={{ padding: '80px 0' }}
              >
                <Button 
                  type="primary" 
                  icon={<UploadOutlined />}
                  onClick={() => setIsImportModalVisible(true)}
                  size="large"
                >
                  –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ
                </Button>
              </Empty>
            )}
          </Card>

          {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∏–º–ø–æ—Ä—Ç–∞ */}
          <ModernImportModal
            visible={isImportModalVisible}
            onCancel={() => {
              setIsImportModalVisible(false);
              setImportStatus('idle');
              setImportProgress(0);
              setImportLog([]);
            }}
            onImport={handleImportExcel}
            importProgress={importProgress}
            importStatus={importStatus}
            importLog={importLog}
          />
        </div>
      </Content>
    </>
  );
};

export default ConstructionCostsPage;