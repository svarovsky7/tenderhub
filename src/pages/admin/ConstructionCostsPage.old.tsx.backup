import React, { useState, useEffect } from 'react';
import {
  Layout,
  Tree,
  Button,
  Space,
  Card,
  Modal,
  Form,
  Input,
  Select,
  Switch,
  message,
  Upload,
  Popconfirm,
  Tag,
  Tooltip,
  Row,
  Col,
  Spin,
  Empty,
  Breadcrumb,
  Progress
} from 'antd';
import {
  PlusOutlined,
  EditOutlined,
  DeleteOutlined,
  UploadOutlined,
  FolderOutlined,
  FileOutlined,
  ReloadOutlined,
  DownloadOutlined,
  DragOutlined,
  FolderAddOutlined
} from '@ant-design/icons';
import type { DataNode, TreeProps } from 'antd/es/tree';
import * as XLSX from 'xlsx';
import {
  getCostNodesTree,
  createCostNode,
  updateCostNode,
  deleteCostNode,
  moveCostNode,
  getUnits,
  getLocations,
  importCostNodesFromExcel,
  type CostNode,
  type CreateCostNodeDto,
  type UpdateCostNodeDto
} from '../../lib/supabase/api/cost-nodes';
import { importConstructionCosts, type ImportRow } from '../../lib/supabase/api/import-costs';
import { supabase } from '../../lib/supabase/client';

const { Content } = Layout;
const { Option } = Select;

interface TreeNode extends DataNode {
  data: CostNode;
}

const ConstructionCostsPage: React.FC = () => {
  const [loading, setLoading] = useState(false);
  const [treeData, setTreeData] = useState<TreeNode[]>([]);
  const [expandedKeys, setExpandedKeys] = useState<string[]>([]);
  const [selectedKeys, setSelectedKeys] = useState<string[]>([]);
  const [selectedNode, setSelectedNode] = useState<CostNode | null>(null);
  const [units, setUnits] = useState<any[]>([]);
  const [locations, setLocations] = useState<any[]>([]);
  
  // –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞
  const [isNodeModalVisible, setIsNodeModalVisible] = useState(false);
  const [isEditMode, setIsEditMode] = useState(false);
  const [isImportModalVisible, setIsImportModalVisible] = useState(false);
  const [importProgress, setImportProgress] = useState(0);
  const [importStatus, setImportStatus] = useState<'idle' | 'processing' | 'completed' | 'error'>('idle');
  const [importLog, setImportLog] = useState<string[]>([]);
  
  const [form] = Form.useForm();

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    loadData();
    loadDictionaries();
  }, []);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–µ—Ä–µ–≤–∞
  const loadData = async () => {
    console.log('üöÄ [ConstructionCostsPage] Loading data');
    setLoading(true);
    
    try {
      const { data, error } = await getCostNodesTree();
      
      if (error) {
        message.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: ' + error.message);
        return;
      }

      if (data) {
        const tree = convertToTreeData(data);
        setTreeData(tree);
        
        // –†–∞—Å–∫—Ä—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–π —É—Ä–æ–≤–µ–Ω—å
        const firstLevelKeys = data
          .filter(node => !node.parent_id)
          .map(node => node.id);
        setExpandedKeys(firstLevelKeys);
      }
      
      console.log('‚úÖ [ConstructionCostsPage] Data loaded');
    } catch (err: any) {
      console.error('‚ùå [ConstructionCostsPage] Error:', err);
      message.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö');
    } finally {
      setLoading(false);
    }
  };

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤
  const loadDictionaries = async () => {
    console.log('üöÄ [ConstructionCostsPage] Loading dictionaries');
    
    try {
      const [unitsRes, locationsRes] = await Promise.all([
        getUnits(),
        getLocations()
      ]);

      if (unitsRes.data) setUnits(unitsRes.data);
      if (locationsRes.data) setLocations(locationsRes.data);
      
      console.log('‚úÖ [ConstructionCostsPage] Dictionaries loaded');
    } catch (err) {
      console.error('‚ùå [ConstructionCostsPage] Error loading dictionaries:', err);
    }
  };

  // –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è Tree –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  const convertToTreeData = (nodes: CostNode[]): TreeNode[] => {
    return nodes.map(node => ({
      key: node.id,
      title: (
        <Space>
          {node.kind === 'group' ? <FolderOutlined /> : <FileOutlined />}
          <span>{node.name}</span>
          {node.code && <Tag color="blue">{node.code}</Tag>}
          {node.unit && <Tag color="green">{node.unit.code}</Tag>}
          {!node.is_active && <Tag color="red">–ù–µ–∞–∫—Ç–∏–≤–Ω–æ</Tag>}
        </Space>
      ),
      icon: node.kind === 'group' ? <FolderOutlined /> : <FileOutlined />,
      children: node.children ? convertToTreeData(node.children) : undefined,
      data: node
    }));
  };

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —É–∑–ª–∞
  const onSelect: TreeProps['onSelect'] = (selectedKeys, info) => {
    console.log('üöÄ [ConstructionCostsPage] Node selected:', selectedKeys);
    setSelectedKeys(selectedKeys as string[]);
    
    if (info.selected) {
      const node = (info.node as TreeNode).data;
      setSelectedNode(node);
    } else {
      setSelectedNode(null);
    }
  };

  // –û—Ç–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  const showNodeModal = (editMode: boolean = false, parentNode?: CostNode) => {
    console.log('üöÄ [ConstructionCostsPage] Show modal:', { editMode, parentNode });
    
    setIsEditMode(editMode);
    
    if (editMode && selectedNode) {
      // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
      form.setFieldsValue({
        kind: selectedNode.kind,
        name: selectedNode.name,
        code: selectedNode.code,
        unit_id: selectedNode.unit_id,
        location_id: selectedNode.location_id,
        sort_order: selectedNode.sort_order,
        is_active: selectedNode.is_active
      });
    } else {
      // –°–æ–∑–¥–∞–Ω–∏–µ
      form.resetFields();
      form.setFieldsValue({
        kind: parentNode ? 'item' : 'group',
        parent_id: parentNode?.id || selectedNode?.id,
        is_active: true,
        sort_order: 100
      });
    }
    
    setIsNodeModalVisible(true);
  };

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —É–∑–ª–∞
  const handleSaveNode = async () => {
    console.log('üöÄ [ConstructionCostsPage] Saving node');
    
    try {
      const values = await form.validateFields();
      setLoading(true);

      if (isEditMode && selectedNode) {
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        const updates: UpdateCostNodeDto = {
          name: values.name,
          code: values.code,
          unit_id: values.unit_id,
          location_id: values.location_id,
          sort_order: values.sort_order,
          is_active: values.is_active
        };

        const { error } = await updateCostNode(selectedNode.id, updates);
        
        if (error) {
          message.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: ' + error.message);
          return;
        }
        
        message.success('–£–∑–µ–ª —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω');
      } else {
        // –°–æ–∑–¥–∞–Ω–∏–µ
        const newNode: CreateCostNodeDto = {
          parent_id: values.parent_id || null,
          kind: values.kind,
          name: values.name,
          code: values.code,
          unit_id: values.unit_id,
          location_id: values.location_id,
          sort_order: values.sort_order,
          is_active: values.is_active
        };

        const { error } = await createCostNode(newNode);
        
        if (error) {
          message.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è: ' + error.message);
          return;
        }
        
        message.success('–£–∑–µ–ª —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω');
      }

      setIsNodeModalVisible(false);
      form.resetFields();
      await loadData();
      
      console.log('‚úÖ [ConstructionCostsPage] Node saved');
    } catch (err: any) {
      console.error('‚ùå [ConstructionCostsPage] Error saving:', err);
      message.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è');
    } finally {
      setLoading(false);
    }
  };

  // –£–¥–∞–ª–µ–Ω–∏–µ —É–∑–ª–∞
  const handleDeleteNode = async () => {
    if (!selectedNode) return;
    
    console.log('üöÄ [ConstructionCostsPage] Deleting node:', selectedNode.id);
    setLoading(true);
    
    try {
      const { error } = await deleteCostNode(selectedNode.id);
      
      if (error) {
        message.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: ' + error.message);
        return;
      }
      
      message.success('–£–∑–µ–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω');
      setSelectedNode(null);
      setSelectedKeys([]);
      await loadData();
      
      console.log('‚úÖ [ConstructionCostsPage] Node deleted');
    } catch (err: any) {
      console.error('‚ùå [ConstructionCostsPage] Error deleting:', err);
      message.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è');
    } finally {
      setLoading(false);
    }
  };

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
  const onDrop: TreeProps['onDrop'] = async (info) => {
    console.log('üöÄ [ConstructionCostsPage] Drop:', info);
    
    const dragNode = info.dragNode as TreeNode;
    const dropNode = info.node as TreeNode;
    const dropPos = info.node.pos.split('-');
    const dropPosition = info.dropPosition - Number(dropPos[dropPos.length - 1]);

    setLoading(true);
    
    try {
      let newParentId: string | null = null;
      let newSortOrder: number | undefined;

      if (dropPosition === 0) {
        // –í—Å—Ç–∞–≤–∫–∞ –≤–Ω—É—Ç—Ä—å —É–∑–ª–∞
        newParentId = dropNode.data.id;
      } else {
        // –í—Å—Ç–∞–≤–∫–∞ –¥–æ –∏–ª–∏ –ø–æ—Å–ª–µ —É–∑–ª–∞
        newParentId = dropNode.data.parent_id;
        newSortOrder = dropNode.data.sort_order + (dropPosition > 0 ? 10 : -10);
      }

      const { error } = await moveCostNode(dragNode.data.id, newParentId, newSortOrder);
      
      if (error) {
        message.error('–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è: ' + error.message);
        return;
      }
      
      message.success('–£–∑–µ–ª —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–º–µ—â–µ–Ω');
      await loadData();
      
      console.log('‚úÖ [ConstructionCostsPage] Node moved');
    } catch (err: any) {
      console.error('‚ùå [ConstructionCostsPage] Error moving:', err);
      message.error('–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è');
    } finally {
      setLoading(false);
    }
  };

  // –ò–º–ø–æ—Ä—Ç –∏–∑ Excel —Å –Ω–æ–≤–æ–π –ª–æ–≥–∏–∫–æ–π –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü
  const handleImportExcel = async (file: File) => {
    console.log('üöÄ [ConstructionCostsPage] Importing Excel with new logic:', file.name);
    
    // –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
    setImportProgress(0);
    setImportStatus('processing');
    setImportLog([`–ù–∞—á–∞–ª–æ –∏–º–ø–æ—Ä—Ç–∞ —Ñ–∞–π–ª–∞: ${file.name}`]);
    
    const reader = new FileReader();
    
    reader.onload = async (e) => {
      try {
        setImportLog(prev => [...prev, '–ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞...']);
        const data = new Uint8Array(e.target?.result as ArrayBuffer);
        const workbook = XLSX.read(data, { type: 'array' });
        const sheetName = workbook.SheetNames[0];
        const worksheet = workbook.Sheets[sheetName];
        const jsonData = XLSX.utils.sheet_to_json(worksheet, { header: 1 }) as any[][];
        
        console.log('üì¶ [ConstructionCostsPage] Parsed Excel data:', jsonData);
        setImportLog(prev => [...prev, `–ù–∞–π–¥–µ–Ω–æ —Å—Ç—Ä–æ–∫: ${jsonData.length}`]);
        
        setLoading(true);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö
        if (jsonData.length > 0 && jsonData[0].length >= 6) {
          // –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–º–ø–æ—Ä—Ç–∞ (6 –∫–æ–ª–æ–Ω–æ–∫)
          const errors: string[] = [];
          let successCount = 0;
          let skipCount = 0;
          
          // –°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏
          setImportLog(prev => [...prev, '–ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤...']);
          const { data: unitsData } = await supabase.from('units').select('*');
          const { data: locationsData } = await supabase.from('location').select('*');
          const { data: costCategoriesData } = await supabase.from('cost_categories').select('*');
          const { data: detailCategoriesData } = await supabase.from('detail_cost_categories').select('*');
          
          const units = unitsData || [];
          const locations = locationsData || [];
          const costCategories = costCategoriesData || [];
          const detailCategories = detailCategoriesData || [];
          
          setImportLog(prev => [...prev, `–ó–∞–≥—Ä—É–∂–µ–Ω–æ: ${units.length} –µ–¥–∏–Ω–∏—Ü –∏–∑–º–µ—Ä–µ–Ω–∏—è, ${locations.length} –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–π, ${costCategories.length} –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∑–∞—Ç—Ä–∞—Ç, ${detailCategories.length} –¥–µ—Ç–∞–ª—å–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π`]);
          
          // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
          const categoriesMap = new Map<string, string>();
          
          const totalRows = jsonData.length;
          for (let i = 0; i < totalRows; i++) {
            const row = jsonData[i];
            if (!row || row.length === 0) continue;
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
            const progress = Math.round((i / totalRows) * 100);
            setImportProgress(progress);
            
            const catOrder = row[0] ? Number(row[0]) : null;
            const catName = row[1] ? String(row[1]).trim() : null;
            const catUnit = row[2] ? String(row[2]).trim() : null;
            const detName = row[3] ? String(row[3]).trim() : null;
            const detUnit = row[4] ? String(row[4]).trim() : null;
            const locName = row[5] ? String(row[5]).trim() : null;
            
            console.log(`üîç –°—Ç—Ä–æ–∫–∞ ${i + 1}:`, { catOrder, catName, catUnit, detName, detUnit, locName });
            
            // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
            if (i === 0 && catName === '–ö–∞—Ç–µ–≥–æ—Ä–∏—è') {
              console.log(`‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫`);
              continue;
            }
            
            // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
            if (!catName && !detName) {
              skipCount++;
              continue;
            }
            
            // –í–∞–ª–∏–¥–∞—Ü–∏—è
            if (detName && !catName) {
              errors.push(`–°—Ç—Ä–æ–∫–∞ ${i + 1}: –í–∏–¥ –∑–∞—Ç—Ä–∞—Ç –±–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏`);
              continue;
            }
            
            try {
              // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∑–∞—Ç—Ä–∞—Ç (—Å—Ç–æ–ª–±–µ—Ü 2 -> cost_categories)
              if (catName && !categoriesMap.has(catName)) {
                // –ò—â–µ–º –µ–¥–∏–Ω–∏—Ü—É –∏–∑–º–µ—Ä–µ–Ω–∏—è
                let unitId = null;
                if (catUnit) {
                  const unit = units.find(u => u.title === catUnit || u.code === catUnit);
                  if (unit) {
                    unitId = unit.id;
                    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–∞ –µ–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è: ${catUnit} -> ${unit.id}`);
                  } else {
                    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –µ–¥–∏–Ω–∏—Ü—É –∏–∑–º–µ—Ä–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
                    const proposedCode = catUnit.substring(0, 10);
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–¥ –Ω–µ –¥—É–±–ª–∏—Ä—É–µ—Ç—Å—è
                    const existingByCode = units.find(u => u.code === proposedCode);
                    if (existingByCode) {
                      console.log(`‚ö†Ô∏è –ï–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è —Å –∫–æ–¥–æ–º ${proposedCode} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ—ë`);
                      unitId = existingByCode.id;
                    } else {
                      try {
                        const { data: newUnitArray, error: unitError } = await supabase
                          .from('units')
                          .insert({ title: catUnit, code: proposedCode })
                          .select();
                        
                        if (unitError) {
                          console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –µ–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è ${catUnit}:`, unitError);
                          // –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å —Ç–∞–∫–∏–º –∫–æ–¥–æ–º
                          const { data: existingUnit } = await supabase
                            .from('units')
                            .select('*')
                            .eq('code', proposedCode)
                            .limit(1);
                          
                          if (existingUnit && existingUnit.length > 0) {
                            unitId = existingUnit[0].id;
                            units.push(existingUnit[0]);
                            console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –µ–¥–∏–Ω–∏—Ü–∞: ${proposedCode}`);
                          }
                        } else if (newUnitArray && newUnitArray.length > 0) {
                          const newUnit = newUnitArray[0];
                          unitId = newUnit.id;
                          units.push(newUnit);
                          console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –µ–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è: ${catUnit} -> ${newUnit.id}`);
                        }
                      } catch (err: any) {
                        console.error(`‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –µ–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è:`, err);
                      }
                    }
                  }
                }
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (—É—á–∏—Ç—ã–≤–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ parent_id + name)
                const { data: existingCats, error: checkError } = await supabase
                  .from('cost_nodes')
                  .select('*')
                  .eq('name', catName)
                  .is('parent_id', null)
                  .eq('kind', 'group')
                  .limit(1);
                
                if (checkError) {
                  console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ${catName}:`, checkError);
                }
                
                const existingCat = existingCats && existingCats.length > 0 ? existingCats[0] : null;
                
                if (existingCat) {
                  categoriesMap.set(catName, existingCat.id);
                  console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è: ${catName}`);
                } else {
                  // –°–æ–∑–¥–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
                  console.log(`üîç –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é:`, { 
                    parent_id: null,
                    kind: 'group',
                    name: catName,
                    unit_id: unitId,
                    sort_order: catOrder || 100
                  });
                  
                  const { data: newCatArray, error: catError } = await supabase
                    .from('cost_nodes')
                    .insert({
                      parent_id: null,
                      kind: 'group',
                      name: catName,
                      unit_id: unitId,
                      sort_order: catOrder || 100,
                      is_active: true  // –î–æ–±–∞–≤–ª—è–µ–º —è–≤–Ω–æ, –µ—Å–ª–∏ —ç—Ç–æ –ø–æ–ª–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ
                    })
                    .select();
                  
                  const newCat = newCatArray && newCatArray.length > 0 ? newCatArray[0] : null;
                  
                  if (catError) {
                    console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ${catName}:`, catError);
                    
                    // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –∏–∑-–∑–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è, –ø–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
                    if (catError.code === '23505') { // –∫–æ–¥ –æ—à–∏–±–∫–∏ unique violation
                      console.log(`üîç –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é ${catName} –∏–∑-–∑–∞ –Ω–∞—Ä—É—à–µ–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏`);
                      const { data: foundCats } = await supabase
                        .from('cost_nodes')
                        .select('*')
                        .eq('name', catName)
                        .is('parent_id', null)
                        .eq('kind', 'group')
                        .limit(1);
                      
                      if (foundCats && foundCats.length > 0) {
                        categoriesMap.set(catName, foundCats[0].id);
                        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è –ø–æ—Å–ª–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞: ${catName}`);
                      } else {
                        errors.push(`–°—Ç—Ä–æ–∫–∞ ${i + 1}: –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é "${catName}": ${catError.message}`);
                        continue;
                      }
                    } else {
                      errors.push(`–°—Ç—Ä–æ–∫–∞ ${i + 1}: –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é "${catName}": ${catError.message}`);
                      continue;
                    }
                  }
                  
                  if (newCat) {
                    categoriesMap.set(catName, newCat.id);
                    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è: ${catName}`);
                  }
                }
              }
              
              // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª—å
              if (detName && catName) {
                const categoryId = categoriesMap.get(catName);
                if (!categoryId) {
                  errors.push(`–°—Ç—Ä–æ–∫–∞ ${i + 1}: –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é`);
                  continue;
                }
                
                // –ò—â–µ–º –µ–¥–∏–Ω–∏—Ü—É –∏–∑–º–µ—Ä–µ–Ω–∏—è –¥–ª—è –¥–µ—Ç–∞–ª–∏
                let detailUnitId = null;
                if (detUnit) {
                  const unit = units.find(u => u.title === detUnit || u.code === detUnit);
                  if (unit) {
                    detailUnitId = unit.id;
                  } else {
                    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –µ–¥–∏–Ω–∏—Ü—É –∏–∑–º–µ—Ä–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
                    const proposedCode = detUnit.substring(0, 10);
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–¥ –Ω–µ –¥—É–±–ª–∏—Ä—É–µ—Ç—Å—è
                    const existingByCode = units.find(u => u.code === proposedCode);
                    if (existingByCode) {
                      detailUnitId = existingByCode.id;
                    } else {
                      try {
                        const { data: newUnitArray, error: unitError } = await supabase
                          .from('units')
                          .insert({ title: detUnit, code: proposedCode })
                          .select();
                        
                        if (unitError) {
                          // –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å —Ç–∞–∫–∏–º –∫–æ–¥–æ–º
                          const { data: existingUnit } = await supabase
                            .from('units')
                            .select('*')
                            .eq('code', proposedCode)
                            .limit(1);
                          
                          if (existingUnit && existingUnit.length > 0) {
                            detailUnitId = existingUnit[0].id;
                            units.push(existingUnit[0]);
                          }
                        } else if (newUnitArray && newUnitArray.length > 0) {
                          const newUnit = newUnitArray[0];
                          detailUnitId = newUnit.id;
                          units.push(newUnit);
                        }
                      } catch (err: any) {
                        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –µ–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è –¥–µ—Ç–∞–ª–∏:`, err);
                      }
                    }
                  }
                }
                
                // –ò—â–µ–º –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏—é (–Ω–µ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ)
                let locationId = null;
                if (locName) {
                  const location = locations.find(l => l.title === locName);
                  if (location) {
                    locationId = location.id;
                  }
                }
                
                // –°–æ–∑–¥–∞–µ–º –¥–µ—Ç–∞–ª—å (–¥—É–±–ª–∏–∫–∞—Ç—ã —Ä–∞–∑—Ä–µ—à–µ–Ω—ã –¥–ª—è –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏)
                try {
                  const { error: detailError } = await supabase
                    .from('cost_nodes')
                    .insert({
                      parent_id: categoryId,
                      kind: 'item',
                      name: detName,
                      unit_id: detailUnitId,
                      location_id: locationId,
                      sort_order: 100,
                      is_active: true
                    });
                  
                  if (detailError) {
                    console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–µ—Ç–∞–ª–∏ ${detName}:`, detailError);
                    
                    // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏, –Ω–æ —É –Ω–∞—Å –µ—Å—Ç—å –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è - –ø–æ–ø—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å —Å –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∏–º–µ–Ω–µ–º
                    if (detailError.code === '23505' && locationId) {
                      console.log(`üîç –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å –¥–µ—Ç–∞–ª—å —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –∏–º–µ–Ω–µ–º –¥–ª—è –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏`);
                      const uniqueName = `${detName} (${locName})`;
                      const { error: uniqueDetailError } = await supabase
                        .from('cost_nodes')
                        .insert({
                          parent_id: categoryId,
                          kind: 'item',
                          name: uniqueName,
                          unit_id: detailUnitId,
                          location_id: locationId,
                          sort_order: 100,
                          is_active: true
                        });
                      
                      if (uniqueDetailError) {
                        console.error(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –¥–µ—Ç–∞–ª—å –¥–∞–∂–µ —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –∏–º–µ–Ω–µ–º:`, uniqueDetailError);
                        throw uniqueDetailError;
                      } else {
                        console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–∞ –¥–µ—Ç–∞–ª—å —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –∏–º–µ–Ω–µ–º: ${uniqueName}`);
                      }
                    } else {
                      throw detailError;
                    }
                  } else {
                    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–∞ –¥–µ—Ç–∞–ª—å: ${detName}`);
                  }
                } catch (err: any) {
                  console.error(`‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–µ—Ç–∞–ª–∏ ${detName}:`, err);
                  throw err;
                }
              }
              
              successCount++;
              // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–∞–∂–¥—É—é 10-—é —É—Å–ø–µ—à–Ω—É—é —Å—Ç—Ä–æ–∫—É –¥–ª—è –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤
              if (totalRows <= 50 || successCount % 10 === 0 || successCount === 1) {
                setImportLog(prev => [...prev, `‚úÖ –°—Ç—Ä–æ–∫–∞ ${i + 1}: –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ`]);
              }
            } catch (err: any) {
              errors.push(`–°—Ç—Ä–æ–∫–∞ ${i + 1}: ${err.message}`);
              setImportLog(prev => [...prev, `‚ùå –°—Ç—Ä–æ–∫–∞ ${i + 1}: ${err.message}`]);
            }
          }
          
          setImportProgress(100);
          setImportLog(prev => [...prev, 
            '‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ',
            `üìä –ò—Ç–æ–≥–∏ –∏–º–ø–æ—Ä—Ç–∞:`,
            `‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${successCount} –∑–∞–ø–∏—Å–µ–π`,
            `‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ –ø—É—Å—Ç—ã—Ö —Å—Ç—Ä–æ–∫: ${skipCount}`,
            `‚ùå –û—à–∏–±–æ–∫: ${errors.length}`,
            '‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ'
          ]);
          
          if (errors.length > 0) {
            Modal.warning({
              title: '–ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏',
              content: (
                <div>
                  <p>–£—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: {successCount}</p>
                  <p>–ü—Ä–æ–ø—É—â–µ–Ω–æ –ø—É—Å—Ç—ã—Ö: {skipCount}</p>
                  <p>–û—à–∏–±–æ–∫: {errors.length}</p>
                  {errors.length > 0 && (
                    <div>
                      <p>–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–æ–∫:</p>
                      <ul style={{ maxHeight: 200, overflow: 'auto' }}>
                        {errors.slice(0, 10).map((err, idx) => (
                          <li key={idx}>{err}</li>
                        ))}
                      </ul>
                    </div>
                  )}
                </div>
              )
            });
          } else {
            message.success(`–£—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ ${successCount} –∑–∞–ø–∏—Å–µ–π`);
          }
        } else {
          // –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–º–ø–æ—Ä—Ç–∞
          const jsonObjects = XLSX.utils.sheet_to_json(worksheet);
          const result = await importCostNodesFromExcel(jsonObjects);
          
          if (result.failed > 0) {
            Modal.warning({
              title: '–ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —Å –æ—à–∏–±–∫–∞–º–∏',
              content: (
                <div>
                  <p>–£—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: {result.success}</p>
                  <p>–û—à–∏–±–æ–∫: {result.failed}</p>
                  {result.errors.length > 0 && (
                    <div>
                      <p>–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–æ–∫:</p>
                      <ul>
                        {result.errors.slice(0, 5).map((err, idx) => (
                          <li key={idx}>{err}</li>
                        ))}
                      </ul>
                    </div>
                  )}
                </div>
              )
            });
          } else {
            message.success(`–£—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ ${result.success} –∑–∞–ø–∏—Å–µ–π`);
          }
        }
        
        await loadData();
        setImportStatus('completed');
        console.log('‚úÖ [ConstructionCostsPage] Import complete');
      } catch (err: any) {
        console.error('‚ùå [ConstructionCostsPage] Import error:', err);
        message.error('–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: ' + err.message);
        setImportLog(prev => [...prev, `‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${err.message}`]);
        setImportStatus('error');
      } finally {
        setLoading(false);
      }
    };
    
    reader.readAsArrayBuffer(file);
    return false; // Prevent default upload
  };

  // –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel
  const handleExportExcel = () => {
    console.log('üöÄ [ConstructionCostsPage] Exporting to Excel');
    
    const exportData = flattenTree(treeData);
    const ws = XLSX.utils.json_to_sheet(exportData);
    const wb = XLSX.utils.book_new();
    XLSX.utils.book_append_sheet(wb, ws, '–ó–∞—Ç—Ä–∞—Ç—ã –Ω–∞ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ');
    XLSX.writeFile(wb, 'construction_costs.xlsx');
    
    message.success('–î–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã');
    console.log('‚úÖ [ConstructionCostsPage] Export complete');
  };

  // –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–µ—Ä–µ–≤–∞ –≤ –ø–ª–æ—Å–∫–∏–π —Å–ø–∏—Å–æ–∫ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
  const flattenTree = (nodes: TreeNode[], parentPath: string = ''): any[] => {
    const result: any[] = [];
    
    nodes.forEach(node => {
      const path = parentPath ? `${parentPath} / ${node.data.name}` : node.data.name;
      
      result.push({
        '–ü—É—Ç—å': path,
        '–¢–∏–ø': node.data.kind === 'group' ? '–ö–∞—Ç–µ–≥–æ—Ä–∏—è' : '–≠–ª–µ–º–µ–Ω—Ç',
        '–ù–∞–∑–≤–∞–Ω–∏–µ': node.data.name,
        '–ö–æ–¥': node.data.code || '',
        '–ï–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è': node.data.unit?.title || '',
        '–õ–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è': node.data.location?.title || '',
        '–ü–æ—Ä—è–¥–æ–∫': node.data.sort_order,
        '–ê–∫—Ç–∏–≤–Ω–æ': node.data.is_active ? '–î–∞' : '–ù–µ—Ç'
      });
      
      if (node.children) {
        result.push(...flattenTree(node.children, path));
      }
    });
    
    return result;
  };

  return (
    <Layout style={{ minHeight: '100vh', background: '#f0f2f5' }}>
      <Content style={{ padding: '24px' }}>
        <Row gutter={[16, 16]}>
          <Col span={24}>
            <Card>
              <Space direction="vertical" style={{ width: '100%' }} size="large">
                <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
                  <h2 style={{ margin: 0 }}>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞—Ç—Ä–∞—Ç–∞–º–∏ –Ω–∞ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ</h2>
                  <Space>
                    <Button
                      icon={<ReloadOutlined />}
                      onClick={loadData}
                      loading={loading}
                    >
                      –û–±–Ω–æ–≤–∏—Ç—å
                    </Button>
                    <Button
                      onClick={async () => {
                        console.log('üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏...');
                        const { data, error } = await supabase
                          .from('cost_nodes')
                          .insert({
                            parent_id: null,
                            kind: 'group',
                            name: '–¢–µ—Å—Ç–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è –∏–∑ UI',
                            sort_order: 100,
                            is_active: true
                          })
                          .select()
                          .single();
                        
                        if (error) {
                          console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è:', error);
                          message.error(`–û—à–∏–±–∫–∞: ${error.message}`);
                        } else {
                          console.log('‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ:', data);
                          message.success('–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å–æ–∑–¥–∞–Ω–∞!');
                          loadData();
                        }
                      }}
                    >
                      –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è
                    </Button>
                    <Button
                      icon={<DownloadOutlined />}
                      onClick={handleExportExcel}
                    >
                      –≠–∫—Å–ø–æ—Ä—Ç
                    </Button>
                    <Button
                      icon={<UploadOutlined />}
                      onClick={() => setIsImportModalVisible(true)}
                    >
                      –ò–º–ø–æ—Ä—Ç
                    </Button>
                    <Button
                      type="primary"
                      icon={<FolderAddOutlined />}
                      onClick={() => showNodeModal(false)}
                    >
                      –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é
                    </Button>
                  </Space>
                </div>

                <Row gutter={16}>
                  <Col span={16}>
                    <Card
                      title="–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∑–∞—Ç—Ä–∞—Ç"
                      extra={
                        selectedNode && (
                          <Space>
                            <Button
                              size="small"
                              icon={<PlusOutlined />}
                              onClick={() => showNodeModal(false, selectedNode)}
                            >
                              –î–æ–±–∞–≤–∏—Ç—å –¥–æ—á–µ—Ä–Ω–∏–π
                            </Button>
                            <Button
                              size="small"
                              icon={<EditOutlined />}
                              onClick={() => showNodeModal(true)}
                            >
                              –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
                            </Button>
                            <Popconfirm
                              title="–£–¥–∞–ª–∏—Ç—å —É–∑–µ–ª?"
                              description="–≠—Ç–æ —Ç–∞–∫–∂–µ —É–¥–∞–ª–∏—Ç –≤—Å–µ –¥–æ—á–µ—Ä–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã"
                              onConfirm={handleDeleteNode}
                              okText="–î–∞"
                              cancelText="–ù–µ—Ç"
                            >
                              <Button
                                size="small"
                                danger
                                icon={<DeleteOutlined />}
                              >
                                –£–¥–∞–ª–∏—Ç—å
                              </Button>
                            </Popconfirm>
                          </Space>
                        )
                      }
                    >
                      <Spin spinning={loading}>
                        {treeData.length > 0 ? (
                          <Tree
                            showLine
                            showIcon
                            draggable
                            blockNode
                            treeData={treeData}
                            expandedKeys={expandedKeys}
                            selectedKeys={selectedKeys}
                            onExpand={setExpandedKeys}
                            onSelect={onSelect}
                            onDrop={onDrop}
                            style={{ minHeight: 400 }}
                          />
                        ) : (
                          <Empty description="–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö" />
                        )}
                      </Spin>
                    </Card>
                  </Col>

                  <Col span={8}>
                    {selectedNode && (
                      <Card title="–î–µ—Ç–∞–ª–∏ —É–∑–ª–∞">
                        <Space direction="vertical" style={{ width: '100%' }}>
                          <div>
                            <strong>–¢–∏–ø:</strong>{' '}
                            <Tag color={selectedNode.kind === 'group' ? 'blue' : 'green'}>
                              {selectedNode.kind === 'group' ? '–ö–∞—Ç–µ–≥–æ—Ä–∏—è' : '–≠–ª–µ–º–µ–Ω—Ç'}
                            </Tag>
                          </div>
                          <div>
                            <strong>–ù–∞–∑–≤–∞–Ω–∏–µ:</strong> {selectedNode.name}
                          </div>
                          {selectedNode.code && (
                            <div>
                              <strong>–ö–æ–¥:</strong> {selectedNode.code}
                            </div>
                          )}
                          {selectedNode.unit && (
                            <div>
                              <strong>–ï–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è:</strong> {selectedNode.unit.title}
                            </div>
                          )}
                          {selectedNode.location && (
                            <div>
                              <strong>–õ–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è:</strong> {selectedNode.location.title}
                            </div>
                          )}
                          <div>
                            <strong>–ü–æ—Ä—è–¥–æ–∫ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏:</strong> {selectedNode.sort_order}
                          </div>
                          <div>
                            <strong>–°—Ç–∞—Ç—É—Å:</strong>{' '}
                            <Tag color={selectedNode.is_active ? 'green' : 'red'}>
                              {selectedNode.is_active ? '–ê–∫—Ç–∏–≤–Ω–æ' : '–ù–µ–∞–∫—Ç–∏–≤–Ω–æ'}
                            </Tag>
                          </div>
                          <div>
                            <strong>–ü—É—Ç—å:</strong> <code>{selectedNode.path}</code>
                          </div>
                          <div>
                            <strong>–°–æ–∑–¥–∞–Ω–æ:</strong>{' '}
                            {new Date(selectedNode.created_at).toLocaleString('ru-RU')}
                          </div>
                          <div>
                            <strong>–û–±–Ω–æ–≤–ª–µ–Ω–æ:</strong>{' '}
                            {new Date(selectedNode.updated_at).toLocaleString('ru-RU')}
                          </div>
                        </Space>
                      </Card>
                    )}
                  </Col>
                </Row>
              </Space>
            </Card>
          </Col>
        </Row>

        {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è */}
        <Modal
          title={isEditMode ? '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–∑–ª–∞' : '–°–æ–∑–¥–∞–Ω–∏–µ —É–∑–ª–∞'}
          open={isNodeModalVisible}
          onOk={handleSaveNode}
          onCancel={() => {
            setIsNodeModalVisible(false);
            form.resetFields();
          }}
          confirmLoading={loading}
          width={600}
        >
          <Form form={form} layout="vertical">
            <Form.Item name="parent_id" hidden>
              <Input />
            </Form.Item>

            <Form.Item
              name="kind"
              label="–¢–∏–ø"
              rules={[{ required: true, message: '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø' }]}
            >
              <Select disabled={isEditMode}>
                <Option value="group">–ö–∞—Ç–µ–≥–æ—Ä–∏—è</Option>
                <Option value="item">–≠–ª–µ–º–µ–Ω—Ç</Option>
              </Select>
            </Form.Item>

            <Form.Item
              name="name"
              label="–ù–∞–∑–≤–∞–Ω–∏–µ"
              rules={[{ required: true, message: '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ' }]}
            >
              <Input placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ" />
            </Form.Item>

            <Form.Item name="code" label="–ö–æ–¥">
              <Input placeholder="–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)" />
            </Form.Item>

            <Form.Item
              noStyle
              shouldUpdate={(prevValues, currentValues) =>
                prevValues.kind !== currentValues.kind
              }
            >
              {({ getFieldValue }) =>
                getFieldValue('kind') === 'item' && (
                  <>
                    <Form.Item name="unit_id" label="–ï–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è">
                      <Select placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –µ–¥–∏–Ω–∏—Ü—É –∏–∑–º–µ—Ä–µ–Ω–∏—è" allowClear>
                        {units.map(unit => (
                          <Option key={unit.id} value={unit.id}>
                            {unit.title} ({unit.code})
                          </Option>
                        ))}
                      </Select>
                    </Form.Item>

                    <Form.Item name="location_id" label="–õ–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è">
                      <Select placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏—é" allowClear>
                        {locations.map(loc => (
                          <Option key={loc.id} value={loc.id}>
                            {loc.title || loc.code}
                          </Option>
                        ))}
                      </Select>
                    </Form.Item>
                  </>
                )
              }
            </Form.Item>

            <Form.Item name="sort_order" label="–ü–æ—Ä—è–¥–æ–∫ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏">
              <Input type="number" placeholder="100" />
            </Form.Item>

            <Form.Item name="is_active" label="–ê–∫—Ç–∏–≤–Ω–æ" valuePropName="checked">
              <Switch />
            </Form.Item>
          </Form>
        </Modal>

        {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∏–º–ø–æ—Ä—Ç–∞ */}
        <Modal
          title="–ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∏–∑ Excel"
          open={isImportModalVisible}
          onCancel={() => {
            setIsImportModalVisible(false);
            setImportStatus('idle');
            setImportProgress(0);
            setImportLog([]);
          }}
          footer={
            importStatus === 'completed' || importStatus === 'error' ? [
              <Button 
                key="close" 
                type="primary"
                onClick={() => {
                  setIsImportModalVisible(false);
                  setImportStatus('idle');
                  setImportProgress(0);
                  setImportLog([]);
                }}
              >
                –ó–∞–∫—Ä—ã—Ç—å
              </Button>
            ] : null
          }
          width={700}
        >
          <Space direction="vertical" style={{ width: '100%' }}>
            {importStatus === 'idle' && (
              <>
                <p>
                  <strong>–§–æ—Ä–º–∞—Ç Excel —Ñ–∞–π–ª–∞ (6 –∫–æ–ª–æ–Ω–æ–∫):</strong>
                </p>
                <table style={{ width: '100%', fontSize: '12px', border: '1px solid #d9d9d9' }}>
                  <thead>
                    <tr style={{ backgroundColor: '#fafafa' }}>
                      <th style={{ padding: '8px', border: '1px solid #d9d9d9' }}>A: ‚Ññ</th>
                      <th style={{ padding: '8px', border: '1px solid #d9d9d9' }}>B: –ö–∞—Ç–µ–≥–æ—Ä–∏—è</th>
                      <th style={{ padding: '8px', border: '1px solid #d9d9d9' }}>C: –ï–¥.–∏–∑–º. –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</th>
                      <th style={{ padding: '8px', border: '1px solid #d9d9d9' }}>D: –í–∏–¥ –∑–∞—Ç—Ä–∞—Ç</th>
                      <th style={{ padding: '8px', border: '1px solid #d9d9d9' }}>E: –ï–¥.–∏–∑–º. –¥–µ—Ç–∞–ª–∏</th>
                      <th style={{ padding: '8px', border: '1px solid #d9d9d9' }}>F: –õ–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è</th>
                    </tr>
                  </thead>
                  <tbody>
                    <tr>
                      <td style={{ padding: '8px', border: '1px solid #d9d9d9' }}>1</td>
                      <td style={{ padding: '8px', border: '1px solid #d9d9d9' }}>–ú–∞—Ç–µ—Ä–∏–∞–ª—ã</td>
                      <td style={{ padding: '8px', border: '1px solid #d9d9d9' }}>—Ç</td>
                      <td style={{ padding: '8px', border: '1px solid #d9d9d9' }}></td>
                      <td style={{ padding: '8px', border: '1px solid #d9d9d9' }}></td>
                      <td style={{ padding: '8px', border: '1px solid #d9d9d9' }}></td>
                    </tr>
                    <tr>
                      <td style={{ padding: '8px', border: '1px solid #d9d9d9' }}></td>
                      <td style={{ padding: '8px', border: '1px solid #d9d9d9' }}></td>
                      <td style={{ padding: '8px', border: '1px solid #d9d9d9' }}></td>
                      <td style={{ padding: '8px', border: '1px solid #d9d9d9' }}>–¶–µ–º–µ–Ω—Ç –ú500</td>
                      <td style={{ padding: '8px', border: '1px solid #d9d9d9' }}>–∫–≥</td>
                      <td style={{ padding: '8px', border: '1px solid #d9d9d9' }}>–†–æ—Å—Å–∏—è</td>
                    </tr>
                  </tbody>
                </table>
                <p style={{ fontSize: '12px', color: '#666' }}>
                  <strong>–ü—Ä–∞–≤–∏–ª–∞ –∏–º–ø–æ—Ä—Ç–∞:</strong><br/>
                  ‚Ä¢ –ï—Å–ª–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ —Ç–æ–ª—å–∫–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è - —Å–æ–∑–¥–∞–µ—Ç—Å—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è<br/>
                  ‚Ä¢ –ï—Å–ª–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –∫–∞—Ç–µ–≥–æ—Ä–∏—è –∏ –≤–∏–¥ –∑–∞—Ç—Ä–∞—Ç - —Å–æ–∑–¥–∞–µ—Ç—Å—è –≤–∏–¥ –∑–∞—Ç—Ä–∞—Ç –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏<br/>
                  ‚Ä¢ –í–∏–¥—ã –∑–∞—Ç—Ä–∞—Ç –±–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –±—É–¥—É—Ç –ø—Ä–æ–ø—É—â–µ–Ω—ã
                </p>

                <Upload.Dragger
                  accept=".xlsx,.xls"
                  beforeUpload={handleImportExcel}
                  showUploadList={false}
                >
                  <p className="ant-upload-drag-icon">
                    <UploadOutlined style={{ fontSize: 48 }} />
                  </p>
                  <p className="ant-upload-text">
                    –ù–∞–∂–º–∏—Ç–µ –∏–ª–∏ –ø–µ—Ä–µ—Ç–∞—â–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
                  </p>
                  <p className="ant-upload-hint">
                    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ñ–∞–π–ª—ã Excel (.xlsx, .xls)
                  </p>
                </Upload.Dragger>
              </>
            )}

            {(importStatus === 'processing' || importStatus === 'completed' || importStatus === 'error') && (
              <>
                <div style={{ padding: '20px 0' }}>
                  <Progress
                    percent={importProgress}
                    status={
                      importStatus === 'error' ? 'exception' : 
                      importStatus === 'completed' ? 'success' : 
                      'active'
                    }
                    strokeColor={
                      importStatus === 'error' ? '#ff4d4f' :
                      importStatus === 'completed' ? '#52c41a' :
                      undefined
                    }
                  />
                </div>

                <div style={{ 
                  backgroundColor: '#f5f5f5', 
                  borderRadius: '8px', 
                  padding: '12px',
                  maxHeight: '300px',
                  overflowY: 'auto',
                  fontSize: '12px',
                  fontFamily: 'monospace'
                }}>
                  <div style={{ marginBottom: '8px', fontWeight: 'bold', color: '#1890ff' }}>
                    üìã –ñ—É—Ä–Ω–∞–ª –∏–º–ø–æ—Ä—Ç–∞:
                  </div>
                  {importLog.map((log, index) => (
                    <div 
                      key={index} 
                      style={{ 
                        marginBottom: '4px',
                        color: log.includes('‚ùå') ? '#ff4d4f' : 
                               log.includes('‚úÖ') ? '#52c41a' : 
                               '#595959'
                      }}
                    >
                      {log}
                    </div>
                  ))}
                  {importStatus === 'processing' && (
                    <div style={{ color: '#1890ff', marginTop: '8px' }}>
                      <Spin size="small" /> –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö...
                    </div>
                  )}
                </div>

                {importStatus === 'completed' && (
                  <div style={{ 
                    marginTop: '16px', 
                    padding: '12px', 
                    backgroundColor: '#f6ffed', 
                    borderRadius: '8px',
                    border: '1px solid #b7eb8f'
                  }}>
                    <div style={{ color: '#52c41a', fontWeight: 'bold' }}>
                      ‚úÖ –ò–º–ø–æ—Ä—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!
                    </div>
                  </div>
                )}

                {importStatus === 'error' && (
                  <div style={{ 
                    marginTop: '16px', 
                    padding: '12px', 
                    backgroundColor: '#fff2f0', 
                    borderRadius: '8px',
                    border: '1px solid #ffccc7'
                  }}>
                    <div style={{ color: '#ff4d4f', fontWeight: 'bold' }}>
                      ‚ùå –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —Å –æ—à–∏–±–∫–∞–º–∏
                    </div>
                  </div>
                )}
              </>
            )}
          </Space>
        </Modal>
      </Content>
    </Layout>
  );
};

export default ConstructionCostsPage;