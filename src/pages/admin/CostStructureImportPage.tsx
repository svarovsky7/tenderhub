import React, { useState } from 'react';
import {
  Card,
  Button,
  Upload,
  Table,
  Space,
  Alert,
  Progress,
  Typography,
  Tag,
  message,
  Steps,
  Row,
  Col,
  Statistic,
  Divider,
  Tooltip,
  Badge
} from 'antd';
import {
  UploadOutlined,
  FileExcelOutlined,
  CheckCircleOutlined,
  CloseCircleOutlined,
  DownloadOutlined,
  ImportOutlined,
  FolderOutlined,
  PartitionOutlined,
  EnvironmentOutlined
} from '@ant-design/icons';
import * as XLSX from 'xlsx';
import { costStructureApi } from '../../lib/supabase/api/cost-structure';
import type { ImportCostRow, ImportResult } from '../../lib/supabase/types/new-cost-structure';

const { Text } = Typography;
const { Dragger } = Upload;
const { Step } = Steps;

interface ParsedRow {
  rowNumber: number;
  // Category columns (1-3)
  col1_categoryCode: string;
  col2_categoryName: string;
  col3_categoryDescription: string;
  // Detail columns (4-5)
  col4_detailCode: string;
  col5_detailName: string;
  // Location column (6)
  col6_locationCode: string;
  col7_locationName: string;
  // Additional data
  col8_quantity?: number;
  col9_unitPrice?: number;
  col10_unit?: string;
  // Validation
  isValid: boolean;
  errors: string[];
  // Visual grouping
  categoryGroup?: string;
  isNewCategory?: boolean;
  isNewDetail?: boolean;
  isNewLocation?: boolean;
}

export const CostStructureImportPage: React.FC = () => {
  console.log('üöÄ [CostStructureImportPage] Component mounted');

  const [currentStep, setCurrentStep] = useState(0);
  const [fileList, setFileList] = useState<any[]>([]);
  const [parsedData, setParsedData] = useState<ParsedRow[]>([]);
  const [importing, setImporting] = useState(false);
  const [importProgress, setImportProgress] = useState(0);
  const [importProgressMessage, setImportProgressMessage] = useState('');
  const [importResult, setImportResult] = useState<ImportResult | null>(null);

  const handleFileUpload = (file: File) => {
    console.log('üìÅ [handleFileUpload] Processing file:', file.name);
    
    const reader = new FileReader();
    reader.onload = (e) => {
      try {
        const data = new Uint8Array(e.target?.result as ArrayBuffer);
        const workbook = XLSX.read(data, { type: 'array' });
        const sheetName = workbook.SheetNames[0];
        const worksheet = workbook.Sheets[sheetName];
        const jsonData = XLSX.utils.sheet_to_json(worksheet, { header: 1 });
        
        console.log('üìä [handleFileUpload] Parsed rows:', jsonData.length);
        
        // Parse rows with validation
        let currentCategory = '';
        const parsed: ParsedRow[] = jsonData
          .slice(1) // Skip header row
          .map((row: any, index: number) => {
            const errors: string[] = [];
            
            // Extract columns
            // –°—Ç–æ–ª–±—Ü—ã 1-3: –ö–∞—Ç–µ–≥–æ—Ä–∏—è (–∫–æ–¥, –Ω–∞–∑–≤–∞–Ω–∏–µ, –æ–ø–∏—Å–∞–Ω–∏–µ)
            const col1 = String(row[0] || '').trim(); // –ö–æ–¥ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            const col2 = String(row[1] || '').trim(); // –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            const col3 = String(row[2] || '').trim(); // –û–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            // –°—Ç–æ–ª–±—Ü—ã 4-5: –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è (–∫–æ–¥, –Ω–∞–∑–≤–∞–Ω–∏–µ)
            const col4 = String(row[3] || '').trim(); // –ö–æ–¥ –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏
            const col5 = String(row[4] || '').trim(); // –ù–∞–∑–≤–∞–Ω–∏–µ –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏
            // –°—Ç–æ–ª–±–µ—Ü 6: –õ–æ–∫–∞—Ü–∏—è (–Ω–∞–∑–≤–∞–Ω–∏–µ)
            const col6 = String(row[5] || '').trim(); // –ù–∞–∑–≤–∞–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–∏
            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            const col7 = String(row[6] || '').trim(); // –†–µ–∑–µ—Ä–≤ (–º–æ–∂–µ—Ç –±—ã—Ç—å –∫–æ–¥ –ª–æ–∫–∞—Ü–∏–∏)
            const col8 = parseFloat(row[7]) || undefined; // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ
            const col9 = parseFloat(row[8]) || undefined; // –¶–µ–Ω–∞
            const col10 = String(row[9] || '').trim() || undefined; // –ï–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è
            
            // Track current category for grouping
            if (col1 && col2) {
              currentCategory = col1;
            }
            
            // Validation
            if (!col1 && !col4 && !col6) {
              errors.push('–°—Ç—Ä–æ–∫–∞ –ø—É—Å—Ç–∞—è');
            }
            
            if (col4 && !currentCategory) {
              errors.push('–î–µ—Ç–∞–ª—å–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è –±–µ–∑ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏');
            }
            
            if (col6 && !col4) {
              errors.push('–õ–æ–∫–∞—Ü–∏—è –±–µ–∑ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏');
            }
            
            return {
              rowNumber: index + 2, // +2 because Excel rows start at 1 and we skipped header
              col1_categoryCode: col1,
              col2_categoryName: col2,
              col3_categoryDescription: col3,
              col4_detailCode: col4,
              col5_detailName: col5,
              col6_locationCode: col7 || '', // –°—Ç–æ–ª–±–µ—Ü 7 - –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–¥ –ª–æ–∫–∞—Ü–∏–∏
              col7_locationName: col6, // –°—Ç–æ–ª–±–µ—Ü 6 - –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–∏ (–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û–ï)
              col8_quantity: col8,
              col9_unitPrice: col9,
              col10_unit: col10,
              isValid: errors.length === 0,
              errors,
              categoryGroup: currentCategory,
              isNewCategory: !!col1,
              isNewDetail: !!col4,
              isNewLocation: !!col6
            };
          })
          .filter(row => row.col1_categoryCode || row.col4_detailCode || row.col6_locationCode);
        
        setParsedData(parsed);
        setCurrentStep(1);
        
        const validCount = parsed.filter(r => r.isValid).length;
        const invalidCount = parsed.length - validCount;
        
        if (invalidCount > 0) {
          message.warning(`–ù–∞–π–¥–µ–Ω–æ ${invalidCount} —Å—Ç—Ä–æ–∫ —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏`);
        } else {
          message.success(`–£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ ${validCount} —Å—Ç—Ä–æ–∫`);
        }
        
      } catch (error) {
        console.error('‚ùå [handleFileUpload] Parse error:', error);
        message.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞');
      }
    };
    
    reader.readAsArrayBuffer(file);
  };

  const handleImport = async () => {
    console.log('üöÄ [handleImport] Starting import');
    setImporting(true);
    setImportProgress(0);
    setImportProgressMessage('–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö...');
    
    try {
      // Convert parsed data to import format
      const importRows: ImportCostRow[] = parsedData.map(row => ({
        rowNumber: row.rowNumber,
        categoryCode: row.col1_categoryCode,
        categoryName: row.col2_categoryName,
        categoryDescription: row.col3_categoryDescription,
        detailCode: row.col4_detailCode,
        detailName: row.col5_detailName,
        detailUnit: row.col10_unit,
        detailPrice: row.col9_unitPrice,
        locationCode: row.col6_locationCode,
        locationName: row.col7_locationName,
        quantity: row.col8_quantity,
        unitPrice: row.col9_unitPrice
      }));
      
      // Import data with real progress
      const result = await costStructureApi.importCostStructure(
        importRows,
        (progress, message) => {
          setImportProgress(progress);
          setImportProgressMessage(message);
        }
      );
      setImportResult(result);
      setCurrentStep(2);
      
      if (result.success) {
        message.success('–ò–º–ø–æ—Ä—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!');
      } else {
        message.error('–ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —Å –æ—à–∏–±–∫–∞–º–∏');
      }
      
    } catch (error) {
      console.error('‚ùå [handleImport] Import error:', error);
      message.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –¥–∞–Ω–Ω—ã—Ö');
    } finally {
      setImporting(false);
    }
  };

  const downloadTemplate = () => {
    console.log('üì• [downloadTemplate] Downloading template');
    
    const templateData = [
      ['–ö–æ–¥ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏', '–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏', '–û–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏', '–ö–æ–¥ –¥–µ—Ç–∞–ª–∏', '–ù–∞–∑–≤–∞–Ω–∏–µ –¥–µ—Ç–∞–ª–∏', '–õ–æ–∫–∞—Ü–∏—è', '', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ', '–¶–µ–Ω–∞ –∑–∞ –µ–¥.', '–ï–¥. –∏–∑–º.'],
      // –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–æ–Ω–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è - –≤—Å–µ –Ω–∞ –£–ª–∏—Ü–µ
      ['001', '–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–æ–Ω–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è', '–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω–æ–π –ø–ª–æ—â–∞–¥–∫–∏', '001.001', '–ë—ã—Ç–æ–≤–æ–π –≥–æ—Ä–æ–¥–æ–∫', '–£–ª–∏—Ü–∞', '', 1, 150000, '–º–µ—Å'],
      ['', '', '', '001.002', '–í—Ä–µ–º–µ–Ω–Ω—ã–µ –∑–¥–∞–Ω–∏—è –∏ —Å–æ–æ—Ä—É–∂–µ–Ω–∏—è', '–£–ª–∏—Ü–∞', '', 100, 5000, '–º2'],
      ['', '', '', '001.003', '–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω–æ–π –ø–ª–æ—â–∞–¥–∫–∏ (–∞—Ä–µ–Ω–¥–∞ –î–ì–£)', '–£–ª–∏—Ü–∞', '', 1, 200000, '–º–µ—Å'],
      ['', '', '', '001.004', '–û—Ö—Ä–∞–Ω–∞ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω–æ–π –ø–ª–æ—â–∞–¥–∫–∏', '–£–ª–∏—Ü–∞', '', 12, 180000, '–º–µ—Å'],
      // –ü—Ä–æ–µ–∫—Ç–Ω—ã–µ —Ä–∞–±–æ—Ç—ã - –≤ –ó–¥–∞–Ω–∏–∏
      ['002', '–ü—Ä–æ–µ–∫—Ç–Ω—ã–µ —Ä–∞–±–æ—Ç—ã', '–ü—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –∞–≤—Ç–æ—Ä—Å–∫–∏–π –Ω–∞–¥–∑–æ—Ä', '002.001', '–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –†–î (–≤–∫–ª—é—á–∞—è –ö–ú–î –Ω–∞ —Ñ–∞—Å–∞–¥—ã)', '–ó–¥–∞–Ω–∏–µ', '', 1, 5000000, '–∫–æ–º–ø–ª'],
      ['', '', '', '002.002', '–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –ê–ò –Ω–∞ –ú–û–ü—ã –∏ –ø–∞—Ä–∫–∏–Ω–≥', '–ó–¥–∞–Ω–∏–µ', '', 1, 2000000, '–∫–æ–º–ø–ª'],
      ['', '', '', '002.003', '–ê–≤—Ç–æ—Ä—Å–∫–∏–π –Ω–∞–¥–∑–æ—Ä', '–ó–¥–∞–Ω–∏–µ', '', 1, 1500000, '–∫–æ–º–ø–ª'],
      // –û—Ç–¥–µ–ª–æ—á–Ω—ã–µ —Ä–∞–±–æ—Ç—ã - –ø–æ –ª–æ–∫–∞—Ü–∏—è–º
      ['003', '–û—Ç–¥–µ–ª–æ—á–Ω—ã–µ —Ä–∞–±–æ—Ç—ã', '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—Ç–¥–µ–ª–∫–∞', '003.001', '–û—Ç–¥–µ–ª–∫–∞ –∫–≤–∞—Ä—Ç–∏—Ä', '–ö–≤–∞—Ä—Ç–∏—Ä–∞', '', 100, 25000, '–º2'],
      ['', '', '', '003.002', '–°–ª–∞–±–æ—Ç–æ—á–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã –≤ –∫–≤–∞—Ä—Ç–∏—Ä–∞—Ö', '–ö–≤–∞—Ä—Ç–∏—Ä–∞', '', 100, 5000, '–º2'],
      ['', '', '', '003.003', '–û—Ç–¥–µ–ª–∫–∞ –ú–û–ü', '–ú–û–ü –ù–ß', '', 500, 3500, '–º2'],
      ['', '', '', '003.004', '–û—Ç–¥–µ–ª–∫–∞ –ø–∞—Ä–∫–∏–Ω–≥–∞', '–ü–∞—Ä–∫–∏–Ω–≥', '', 1000, 1500, '–º2'],
      // –ë–ª–∞–≥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ - –Ω–∞ –£–ª–∏—Ü–µ
      ['004', '–ë–ª–∞–≥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ', '–ë–ª–∞–≥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏', '004.001', '–û–∑–µ–ª–µ–Ω–µ–Ω–∏–µ', '–£–ª–∏—Ü–∞', '', 1000, 2500, '–º2'],
      ['', '', '', '004.002', '–î–æ—Ä–æ–∂–Ω—ã–µ –ø–æ–∫—Ä—ã—Ç–∏—è', '–£–ª–∏—Ü–∞', '', 2000, 3000, '–º2'],
      ['', '', '', '004.003', '–ú–∞–ª—ã–µ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–µ —Ñ–æ—Ä–º—ã', '–£–ª–∏—Ü–∞', '', 1, 500000, '–∫–æ–º–ø–ª'],
      // –¢–µ—Å—Ç–æ–≤—ã–π –±–ª–æ–∫ - –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–≤—è–∑–∏ —Å –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–º–∏—Å—è –ª–æ–∫–∞—Ü–∏—è–º–∏
      ['005', '–¢–µ—Å—Ç–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è', '–¢–µ—Å—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å–≤—è–∑–µ–π', '005.001', '–ú–æ–Ω—Ç–∞–∂ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–≥—Ä–∞–∂–¥–µ–Ω–∏–π', '–£–ª–∏—Ü–∞', '', 100, 1000, '–º.–ø.'],
      ['', '', '', '005.002', '–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–æ—Ä–æ–≥', '–£–ª–∏—Ü–∞', '', 500, 2000, '–º2'],
      ['', '', '', '005.003', '–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –±—ã—Ç–æ–≤–æ–∫', '–£–ª–∏—Ü–∞', '', 10, 15000, '—à—Ç'],
      ['', '', '', '005.004', '–ú–æ–Ω–æ–ª–∏—Ç–Ω—ã–µ —Ä–∞–±–æ—Ç—ã', '–ó–¥–∞–Ω–∏–µ', '', 1000, 4000, '–º3'],
      ['', '', '', '005.005', '–ö–∏—Ä–ø–∏—á–Ω–∞—è –∫–ª–∞–¥–∫–∞', '–ó–¥–∞–Ω–∏–µ', '', 2000, 3000, '–º2'],
      ['', '', '', '005.006', '–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –∫—Ä–æ–≤–ª–∏', '–ó–¥–∞–Ω–∏–µ', '', 1500, 2500, '–º2'],
      ['', '', '', '005.007', '–û—Ç–¥–µ–ª–∫–∞ –∫–≤–∞—Ä—Ç–∏—Ä —á–µ—Ä–Ω–æ–≤–∞—è', '–ö–≤–∞—Ä—Ç–∏—Ä–∞', '', 5000, 3500, '–º2'],
      ['', '', '', '005.008', '–û—Ç–¥–µ–ª–∫–∞ –∫–≤–∞—Ä—Ç–∏—Ä —á–∏—Å—Ç–æ–≤–∞—è', '–ö–≤–∞—Ä—Ç–∏—Ä–∞', '', 5000, 5500, '–º2'],
      ['', '', '', '005.009', '–≠–ª–µ–∫—Ç—Ä–æ–º–æ–Ω—Ç–∞–∂ –≤ –∫–≤–∞—Ä—Ç–∏—Ä–∞—Ö', '–ö–≤–∞—Ä—Ç–∏—Ä–∞', '', 100, 25000, '—à—Ç'],
      ['', '', '', '005.010', '–ë–ª–∞–≥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏', '–£–ª–∏—Ü–∞', '', 2000, 1500, '–º2'],
      ['', '', '', '005.011', '–û–∑–µ–ª–µ–Ω–µ–Ω–∏–µ', '–£–ª–∏—Ü–∞', '', 1000, 2000, '–º2'],
      ['', '', '', '005.012', '–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ú–ê–§', '–£–ª–∏—Ü–∞', '', 15, 50000, '—à—Ç']
    ];
    
    const ws = XLSX.utils.aoa_to_sheet(templateData);
    const wb = XLSX.utils.book_new();
    
    // Set column widths
    ws['!cols'] = [
      { wch: 15 }, // –ö–æ–¥ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
      { wch: 25 }, // –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
      { wch: 30 }, // –û–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
      { wch: 15 }, // –ö–æ–¥ –¥–µ—Ç–∞–ª–∏
      { wch: 35 }, // –ù–∞–∑–≤–∞–Ω–∏–µ –¥–µ—Ç–∞–ª–∏
      { wch: 20 }, // –õ–æ–∫–∞—Ü–∏—è
      { wch: 10 }, // –†–µ–∑–µ—Ä–≤
      { wch: 12 }, // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ
      { wch: 15 }, // –¶–µ–Ω–∞
      { wch: 10 }  // –ï–¥. –∏–∑–º.
    ];
    
    XLSX.utils.book_append_sheet(wb, ws, '–ò–º–ø–æ—Ä—Ç –∑–∞—Ç—Ä–∞—Ç');
    XLSX.writeFile(wb, '–®–∞–±–ª–æ–Ω_–∏–º–ø–æ—Ä—Ç_—Å—Ç—Ä—É–∫—Ç—É—Ä—ã_–∑–∞—Ç—Ä–∞—Ç.xlsx');
    
    message.success('–®–∞–±–ª–æ–Ω –∑–∞–≥—Ä—É–∂–µ–Ω');
  };

  // Calculate statistics
  const stats = {
    categories: new Set(parsedData.filter(r => r.col1_categoryCode).map(r => r.col1_categoryCode)).size,
    details: new Set(parsedData.filter(r => r.col4_detailCode).map(r => r.col4_detailCode)).size,
    locations: new Set(parsedData.filter(r => r.col6_locationCode).map(r => r.col6_locationCode)).size,
    mappings: parsedData.filter(r => r.col4_detailCode && r.col6_locationCode).length
  };

  const columns = [
    {
      title: '‚Ññ',
      dataIndex: 'rowNumber',
      key: 'rowNumber',
      width: 60,
      fixed: 'left' as const
    },
    {
      title: '–ö–∞—Ç–µ–≥–æ—Ä–∏—è',
      key: 'category',
      width: 300,
      render: (_: any, record: ParsedRow) => (
        <Space direction="vertical" size={0}>
          {record.isNewCategory && (
            <Space>
              <Badge status="processing" />
              <Tag icon={<FolderOutlined />} color="blue">
                {record.col1_categoryCode}
              </Tag>
              <Text strong>{record.col2_categoryName}</Text>
            </Space>
          )}
          {record.col3_categoryDescription && (
            <Text type="secondary" style={{ fontSize: 12, marginLeft: 20 }}>
              {record.col3_categoryDescription}
            </Text>
          )}
        </Space>
      )
    },
    {
      title: '–î–µ—Ç–∞–ª—å–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è',
      key: 'detail',
      width: 250,
      render: (_: any, record: ParsedRow) => (
        record.isNewDetail && (
          <Space>
            <Tag icon={<PartitionOutlined />} color="green">
              {record.col4_detailCode}
            </Tag>
            <Text>{record.col5_detailName}</Text>
            {record.col10_unit && (
              <Tag>{record.col10_unit}</Tag>
            )}
          </Space>
        )
      )
    },
    {
      title: '–õ–æ–∫–∞—Ü–∏—è',
      key: 'location',
      width: 250,
      render: (_: any, record: ParsedRow) => (
        record.isNewLocation && (
          <Space>
            <Tag icon={<EnvironmentOutlined />} color="orange">
              {record.col6_locationCode}
            </Tag>
            <Text>{record.col7_locationName}</Text>
          </Space>
        )
      )
    },
    {
      title: '–ö–æ–ª-–≤–æ',
      dataIndex: 'col8_quantity',
      key: 'quantity',
      width: 80,
      render: (val: number) => val?.toLocaleString('ru-RU')
    },
    {
      title: '–¶–µ–Ω–∞',
      dataIndex: 'col9_unitPrice',
      key: 'price',
      width: 100,
      render: (val: number) => val ? `${val.toLocaleString('ru-RU')} ‚ÇΩ` : '-'
    },
    {
      title: '–°—Ç–∞—Ç—É—Å',
      key: 'status',
      width: 80,
      fixed: 'right' as const,
      render: (_: any, record: ParsedRow) => (
        record.isValid ? (
          <CheckCircleOutlined style={{ color: '#52c41a', fontSize: 20 }} />
        ) : (
          <Tooltip title={record.errors.join(', ')}>
            <CloseCircleOutlined style={{ color: '#ff4d4f', fontSize: 20 }} />
          </Tooltip>
        )
      )
    }
  ];

  return (
    <div style={{ padding: 24 }}>
      <Card
        title={
          <Space>
            <ImportOutlined />
            <span>–ò–º–ø–æ—Ä—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∑–∞—Ç—Ä–∞—Ç</span>
          </Space>
        }
        extra={
          <Button
            icon={<DownloadOutlined />}
            onClick={downloadTemplate}
          >
            –°–∫–∞—á–∞—Ç—å —à–∞–±–ª–æ–Ω
          </Button>
        }
      >
        <Steps current={currentStep} style={{ marginBottom: 24 }}>
          <Step title="–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞" icon={<UploadOutlined />} />
          <Step title="–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö" icon={<CheckCircleOutlined />} />
          <Step title="–†–µ–∑—É–ª—å—Ç–∞—Ç –∏–º–ø–æ—Ä—Ç–∞" icon={<ImportOutlined />} />
        </Steps>

        {currentStep === 0 && (
          <>
            <Alert
              message="–§–æ—Ä–º–∞—Ç –∏–º–ø–æ—Ä—Ç–∞"
              description={
                <div>
                  <p>Excel —Ñ–∞–π–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏:</p>
                  <ol>
                    <li><strong>–°—Ç–æ–ª–±—Ü—ã 1-3:</strong> –ö–æ–¥, –ù–∞–∑–≤–∞–Ω–∏–µ –∏ –û–ø–∏—Å–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</li>
                    <li><strong>–°—Ç–æ–ª–±—Ü—ã 4-5:</strong> –ö–æ–¥ –∏ –ù–∞–∑–≤–∞–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</li>
                    <li><strong>–°—Ç–æ–ª–±–µ—Ü 6:</strong> –ù–∞–∑–≤–∞–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ó–¥–∞–Ω–∏–µ, –£–ª–∏—Ü–∞, –ö–≤–∞—Ä—Ç–∏—Ä–∞)</li>
                    <li><strong>–°—Ç–æ–ª–±–µ—Ü 7:</strong> –ö–æ–¥ –ª–æ–∫–∞—Ü–∏–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω - —Å–æ–∑–¥–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è)</li>
                    <li><strong>–°—Ç–æ–ª–±—Ü—ã 8-10:</strong> –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ, –¶–µ–Ω–∞, –ï–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)</li>
                  </ol>
                  <p><strong>–í–∞–∂–Ω–æ:</strong> –ö–∞–∂–¥–∞—è —Å—Ç—Ä–æ–∫–∞ —Å –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–µ–π –∏ –ª–æ–∫–∞—Ü–∏–µ–π —Å–æ–∑–¥–∞–µ—Ç —Å–≤—è–∑—å –º–µ–∂–¥—É –Ω–∏–º–∏.</p>
                  <p><strong>–ü—Ä–∏–º–µ—Ä:</strong> –°—Ç—Ä–æ–∫–∞ —Å –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–µ–π "–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –ø–ª–æ—â–∞–¥–∫–∏" –∏ –ª–æ–∫–∞—Ü–∏–µ–π "–£–ª–∏—Ü–∞" —Å–æ–∑–¥–∞—Å—Ç —Å–≤—è–∑—å –º–µ–∂–¥—É –Ω–∏–º–∏.</p>
                  <p><strong>–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:</strong> –û–¥–Ω–∞ –ª–æ–∫–∞—Ü–∏—è –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–≤—è–∑–∞–Ω–∞ —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è–º–∏.</p>
                </div>
              }
              type="info"
              showIcon
              style={{ marginBottom: 24 }}
            />

            <Dragger
              fileList={fileList}
              beforeUpload={(file) => {
                handleFileUpload(file);
                setFileList([file]);
                return false;
              }}
              onRemove={() => {
                setFileList([]);
                setParsedData([]);
                setCurrentStep(0);
              }}
              accept=".xlsx,.xls"
              maxCount={1}
            >
              <p className="ant-upload-drag-icon">
                <FileExcelOutlined style={{ fontSize: 48, color: '#52c41a' }} />
              </p>
              <p className="ant-upload-text">
                –ù–∞–∂–º–∏—Ç–µ –∏–ª–∏ –ø–µ—Ä–µ—Ç–∞—â–∏—Ç–µ Excel —Ñ–∞–π–ª –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
              </p>
              <p className="ant-upload-hint">
                –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ñ–∞–π–ª—ã .xlsx –∏ .xls
              </p>
            </Dragger>
          </>
        )}

        {currentStep === 1 && (
          <>
            <Row gutter={16} style={{ marginBottom: 24 }}>
              <Col span={6}>
                <Card bordered={false}>
                  <Statistic
                    title="–ö–∞—Ç–µ–≥–æ—Ä–∏–π"
                    value={stats.categories}
                    prefix={<FolderOutlined />}
                    valueStyle={{ color: '#1890ff' }}
                  />
                </Card>
              </Col>
              <Col span={6}>
                <Card bordered={false}>
                  <Statistic
                    title="–î–µ—Ç–∞–ª—å–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π"
                    value={stats.details}
                    prefix={<PartitionOutlined />}
                    valueStyle={{ color: '#52c41a' }}
                  />
                </Card>
              </Col>
              <Col span={6}>
                <Card bordered={false}>
                  <Statistic
                    title="–õ–æ–∫–∞—Ü–∏–π"
                    value={stats.locations}
                    prefix={<EnvironmentOutlined />}
                    valueStyle={{ color: '#fa8c16' }}
                  />
                </Card>
              </Col>
              <Col span={6}>
                <Card bordered={false}>
                  <Statistic
                    title="–°–≤—è–∑–µ–π"
                    value={stats.mappings}
                    valueStyle={{ color: '#a0d911' }}
                  />
                </Card>
              </Col>
            </Row>

            {importing && (
              <div style={{ marginBottom: 16 }}>
                <Progress
                  percent={importProgress}
                  status="active"
                />
                {importProgressMessage && (
                  <Text type="secondary" style={{ display: 'block', marginTop: 8, textAlign: 'center' }}>
                    {importProgressMessage}
                  </Text>
                )}
              </div>
            )}

            <Table
              columns={columns}
              dataSource={parsedData}
              rowKey="rowNumber"
              pagination={{ pageSize: 50 }}
              scroll={{ x: 1200, y: 400 }}
              size="small"
              rowClassName={(record) => {
                if (record.isNewCategory) return 'category-row';
                if (!record.isValid) return 'error-row';
                return '';
              }}
            />

            <Divider />

            <Space style={{ width: '100%', justifyContent: 'flex-end' }}>
              <Button onClick={() => setCurrentStep(0)}>
                –ù–∞–∑–∞–¥
              </Button>
              <Button
                type="primary"
                icon={<ImportOutlined />}
                onClick={handleImport}
                loading={importing}
                disabled={parsedData.length === 0}
              >
                –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å
              </Button>
            </Space>
          </>
        )}

        {currentStep === 2 && importResult && (
          <>
            <Alert
              message={importResult.success ? '–ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!' : '–ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —Å –æ—à–∏–±–∫–∞–º–∏'}
              type={importResult.success ? 'success' : 'error'}
              showIcon
              style={{ marginBottom: 24 }}
            />

            <Row gutter={16} style={{ marginBottom: 24 }}>
              <Col span={6}>
                <Card bordered={false}>
                  <Statistic
                    title="–ö–∞—Ç–µ–≥–æ—Ä–∏–π —Å–æ–∑–¥–∞–Ω–æ"
                    value={importResult.categoriesCreated}
                    prefix={<CheckCircleOutlined />}
                    valueStyle={{ color: '#52c41a' }}
                  />
                </Card>
              </Col>
              <Col span={6}>
                <Card bordered={false}>
                  <Statistic
                    title="–î–µ—Ç–∞–ª—å–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å–æ–∑–¥–∞–Ω–æ"
                    value={importResult.detailCategoriesCreated}
                    prefix={<CheckCircleOutlined />}
                    valueStyle={{ color: '#52c41a' }}
                  />
                </Card>
              </Col>
              <Col span={6}>
                <Card bordered={false}>
                  <Statistic
                    title="–õ–æ–∫–∞—Ü–∏–π —Å–æ–∑–¥–∞–Ω–æ"
                    value={importResult.locationsCreated}
                    prefix={<CheckCircleOutlined />}
                    valueStyle={{ color: '#52c41a' }}
                  />
                </Card>
              </Col>
              <Col span={6}>
                <Card bordered={false}>
                  <Statistic
                    title="–°–≤—è–∑–µ–π —Å–æ–∑–¥–∞–Ω–æ"
                    value={importResult.mappingsCreated}
                    prefix={<CheckCircleOutlined />}
                    valueStyle={{ color: '#52c41a' }}
                  />
                </Card>
              </Col>
            </Row>

            <div style={{ textAlign: 'center', marginBottom: 24 }}>
              <Button
                type="primary"
                size="large"
                icon={<CheckCircleOutlined />}
                onClick={() => window.open('/admin/cost-structure-view', '_blank')}
              >
                –ü–µ—Ä–µ–π—Ç–∏ –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∑–∞—Ç—Ä–∞—Ç
              </Button>
            </div>

            {importResult.errors.length > 0 && (
              <Alert
                message="–û—à–∏–±–∫–∏ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ"
                description={
                  <ul>
                    {importResult.errors.map((error, idx) => (
                      <li key={idx}>{error}</li>
                    ))}
                  </ul>
                }
                type="error"
                showIcon
              />
            )}

            <Divider />

            <Space style={{ width: '100%', justifyContent: 'center' }}>
              <Button
                type="primary"
                onClick={() => {
                  setCurrentStep(0);
                  setParsedData([]);
                  setFileList([]);
                  setImportResult(null);
                }}
              >
                –ù–æ–≤—ã–π –∏–º–ø–æ—Ä—Ç
              </Button>
            </Space>
          </>
        )}
      </Card>

      <style>{`
        .category-row {
          background-color: #e6f7ff;
          font-weight: 500;
        }
        .error-row {
          background-color: #fff2e8;
        }
      `}</style>
    </div>
  );
};