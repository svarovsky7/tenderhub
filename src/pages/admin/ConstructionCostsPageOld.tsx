import React, { useState, useEffect } from 'react';
import {
  Layout,
  Tree,
  Button,
  Space,
  Card,
  Modal,
  Input,
  Select,
  Switch,
  message,
  Upload,
  Popconfirm,
  Tag,
  Tooltip,
  Row,
  Col,
  Spin,
  Empty,
  Breadcrumb,
  Progress,
  Table,
  Tabs,
  Typography,
  Divider,
  Badge,
  Statistic,
  Alert,
  Avatar,
  Flex
} from 'antd';
import {
  PlusOutlined,
  EditOutlined,
  DeleteOutlined,
  UploadOutlined,
  FolderOutlined,
  FileOutlined,
  ReloadOutlined,
  DownloadOutlined,
  DragOutlined,
  FolderAddOutlined,
  GlobalOutlined,
  ClearOutlined,
  SaveOutlined,
  CheckOutlined,
  CloseOutlined,
  DatabaseOutlined,
  BarChartOutlined,
  SettingOutlined,
  InfoCircleOutlined,
  ThunderboltOutlined
} from '@ant-design/icons';
import type { DataNode, TreeProps } from 'antd/es/tree';
import * as XLSX from 'xlsx-js-style';
import { importConstructionCosts, type ImportRow } from '../../lib/supabase/api/import-costs';
import { 
  getCategoriesWithDetails, 
  getLocations,
  deleteLocation,
  clearAllData
} from '../../lib/supabase/api/construction-costs';
import { supabase } from '../../lib/supabase/client';
import ModernImportModal from '../../components/admin/ModernImportModal';

const { Content } = Layout;
const { TabPane } = Tabs;
const { Text, Title } = Typography;

interface TreeNode extends DataNode {
  data: any;
  type: 'category' | 'detail';
}

const ConstructionCostsPage: React.FC = () => {
  const [loading, setLoading] = useState(false);
  const [treeData, setTreeData] = useState<TreeNode[]>([]);
  const [expandedKeys, setExpandedKeys] = useState<string[]>([]);
  const [selectedKeys, setSelectedKeys] = useState<string[]>([]);
  const [categories, setCategories] = useState<any[]>([]);
  const [locations, setLocations] = useState<any[]>([]);
  const [details, setDetails] = useState<any[]>([]);
  
  // –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞
  const [isImportModalVisible, setIsImportModalVisible] = useState(false);
  const [importProgress, setImportProgress] = useState(0);
  const [importStatus, setImportStatus] = useState<'idle' | 'processing' | 'completed' | 'error'>('idle');
  const [importLog, setImportLog] = useState<string[]>([]);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    loadData();
  }, []);


  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–µ—Ä–µ–≤–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏ –¥–µ—Ç–∞–ª–µ–π
  const loadData = async () => {
    console.log('üöÄ [ConstructionCostsPage] Loading data');
    setLoading(true);
    
    
    try {
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å –¥–µ—Ç–∞–ª—è–º–∏
      const { data: categoriesData, error: catError } = await getCategoriesWithDetails();
      const { data: locationsData, error: locError } = await getLocations();
      
      if (catError) {
        message.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: ' + catError.message);
        return;
      }
      
      if (locError) {
        message.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–π: ' + locError.message);
        return;
      }

      if (categoriesData) {
        setCategories(categoriesData);
        
        // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –¥–µ—Ç–∞–ª–∏
        const allDetails: any[] = [];
        categoriesData.forEach((cat: any) => {
          if (cat.details) {
            allDetails.push(...cat.details);
          }
        });
        setDetails(allDetails);
        
        
        // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª–∏ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é (—Ç–∞–∫ –∫–∞–∫ –æ–¥–Ω–∞ –¥–µ—Ç–∞–ª—å –º–æ–∂–µ—Ç –∏–º–µ—Ç—å –º–Ω–æ–≥–æ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–π)
        const detailsByName = new Map<string, any[]>();
        allDetails.forEach(detail => {
          const key = detail.name;
          if (!detailsByName.has(key)) {
            detailsByName.set(key, []);
          }
          detailsByName.get(key)!.push(detail);
        });
        
        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –¥–µ—Ä–µ–≤–æ
        const tree = categoriesData.map((category: any) => {
          // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
          const categoryDetailsByName = new Map<string, any[]>();
          category.details?.forEach((detail: any) => {
            const key = detail.name;
            if (!categoryDetailsByName.has(key)) {
              categoryDetailsByName.set(key, []);
            }
            categoryDetailsByName.get(key)!.push(detail);
          });
          
          // –°–æ–∑–¥–∞–µ–º —É–∑–ª—ã –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –¥–µ—Ç–∞–ª–µ–π
          const detailNodes: any[] = [];
          categoryDetailsByName.forEach((detailGroup, detailName) => {
            const locations = detailGroup.map(d => d.location).filter(Boolean);
            const uniqueLocations = locations.filter((loc, index, self) => 
              index === self.findIndex(l => 
                l?.id === loc?.id
              )
            );
            
            
            detailNodes.push({
              key: `detail-${detailGroup[0].id}-group`,
              title: (
                <Space>
                  <FileOutlined />
                  <span>
                    {detailName}
                    {detailGroup[0].unit && (
                      <span style={{ color: '#666' }}> ({detailGroup[0].unit})</span>
                    )}
                  </span>
                  {uniqueLocations.length > 0 && (
                    <Space size={4}>
                      <GlobalOutlined style={{ color: '#52c41a' }} />
                      <span style={{ fontSize: '12px', color: '#52c41a' }}>
                        {uniqueLocations.length} –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏{uniqueLocations.length === 1 ? '—è' : uniqueLocations.length < 5 ? '–∏' : '–π'}
                      </span>
                    </Space>
                  )}
                  {detailGroup[0].unit_cost && (
                    <Tag color="orange">{detailGroup[0].unit_cost} ‚ÇΩ</Tag>
                  )}
                </Space>
              ),
              children: uniqueLocations.map((loc, idx) => {
                // –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏
                const locationName = [loc.city, loc.region, loc.country].filter(Boolean).join(', ') || '–ù–µ —É–∫–∞–∑–∞–Ω–æ';
                
                return {
                  key: `detail-${detailGroup[0].id}-loc-${idx}`,
                  title: (
                    <Tag color="green" style={{ fontSize: '11px' }}>
                      <GlobalOutlined /> {locationName}
                    </Tag>
                  ),
                  isLeaf: true
                };
              }),
              data: detailGroup[0],
              type: 'detail' as const,
              isLeaf: uniqueLocations.length === 0
            });
          });
          
          return {
            key: `cat-${category.id}`,
            title: (
              <Space>
                <FolderOutlined />
                <span style={{ fontWeight: 'bold' }}>
                  {category.name}
                  {category.unit && (
                    <span style={{ fontWeight: 'normal', color: '#666' }}> ({category.unit})</span>
                  )}
                </span>
                <span style={{ fontSize: '12px', color: '#999' }}>
                  ({detailNodes.length} –≤–∏–¥{detailNodes.length === 1 ? '' : detailNodes.length < 5 ? '–∞' : '–æ–≤'} –∑–∞—Ç—Ä–∞—Ç)
                </span>
              </Space>
            ),
            children: detailNodes,
            data: category,
            type: 'category' as const
          };
        });
        
        setTreeData(tree);
        
        // –†–∞—Å–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        const categoryKeys = categoriesData.map((cat: any) => `cat-${cat.id}`);
        setExpandedKeys(categoryKeys);
      }
      
      if (locationsData) {
        setLocations(locationsData);
      }
      
      console.log('‚úÖ [ConstructionCostsPage] Data loaded');
    } catch (err: any) {
      console.error('‚ùå [ConstructionCostsPage] Error:', err);
      message.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö');
    } finally {
      setLoading(false);
    }
  };

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —É–∑–ª–∞
  const onSelect: TreeProps['onSelect'] = (selectedKeys, info) => {
    console.log('üöÄ [ConstructionCostsPage] Node selected:', selectedKeys);
    setSelectedKeys(selectedKeys as string[]);
  };


  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–º–ø–æ—Ä—Ç–∞ Excel
  const handleImportExcel = async (file: File) => {
    console.log('üöÄ [ConstructionCostsPage] Import starting:', file.name);
    
    // –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
    setImportProgress(0);
    setImportStatus('processing');
    setImportLog([`–ù–∞—á–∞–ª–æ –∏–º–ø–æ—Ä—Ç–∞ —Ñ–∞–π–ª–∞: ${file.name}`]);
    
    const reader = new FileReader();
    
    reader.onload = async (e) => {
      try {
        setImportLog(prev => [...prev, '–ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞...']);
        const data = new Uint8Array(e.target?.result as ArrayBuffer);
        const workbook = XLSX.read(data, { type: 'array' });
        const sheetName = workbook.SheetNames[0];
        const worksheet = workbook.Sheets[sheetName];
        const jsonData = XLSX.utils.sheet_to_json(worksheet, { header: 1 }) as any[][];
        
        console.log('üì¶ Parsed Excel data:', jsonData);
        
        // –í—ã–≤–æ–¥–∏–º –ø–µ—Ä–≤—ã–µ 10 —Å—Ç—Ä–æ–∫ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        console.log('üìä First 10 rows for analysis:');
        jsonData.slice(0, 10).forEach((row, index) => {
          console.log(`Row ${index + 1}:`, {
            col1: row[0], // ‚Ññ
            col2: row[1], // –ö–∞—Ç–µ–≥–æ—Ä–∏—è
            col3: row[2], // –ï–¥.–∏–∑–º. –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            col4: row[3], // –í–∏–¥ –∑–∞—Ç—Ä–∞—Ç
            col5: row[4], // –ï–¥.–∏–∑–º. –¥–µ—Ç–∞–ª–∏
            col6: row[5]  // –õ–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è
          });
        });
        
        setImportLog(prev => [...prev, `–ù–∞–π–¥–µ–Ω–æ —Å—Ç—Ä–æ–∫: ${jsonData.length}`]);
        
        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
        const importRows: ImportRow[] = jsonData.map((row, index) => ({
          orderNum: row[0] ? Number(row[0]) : null,
          categoryName: row[1] ? String(row[1]).trim() : null,
          categoryUnit: row[2] ? String(row[2]).trim() : null,
          detailName: row[3] ? String(row[3]).trim() : null,
          detailUnit: row[4] ? String(row[4]).trim() : null,
          locationName: row[5] ? String(row[5]).trim() : null
        }));

        setImportLog(prev => [...prev, '–ù–∞—á–∏–Ω–∞–µ–º –∏–º–ø–æ—Ä—Ç...']);
        setImportLog(prev => [...prev, 'üìç –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ ‚Üí cost_categories']);
        setImportLog(prev => [...prev, 'üìç –í–∏–¥—ã –∑–∞—Ç—Ä–∞—Ç ‚Üí detail_cost_categories']);
        setImportLog(prev => [...prev, 'üìç –õ–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏ ‚Üí location']);
        
        console.log('üöÄ Calling importConstructionCosts with rows:', importRows.length);
        console.log('Sample import rows:', importRows.slice(0, 3));
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏–º–ø–æ—Ä—Ç–∞
        const result = await importConstructionCosts(importRows);
        
        console.log('‚úÖ Import function returned:', result);
        
        setImportProgress(100);
        setImportLog(prev => [...prev, 
          '‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ',
          `üìä –ò—Ç–æ–≥–∏ –∏–º–ø–æ—Ä—Ç–∞:`,
          `‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${result.success} –∑–∞–ø–∏—Å–µ–π`,
          `üìÇ –°–æ–∑–¥–∞–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: ${result.categoriesCreated}`,
          `üìã –°–æ–∑–¥–∞–Ω–æ –≤–∏–¥–æ–≤ –∑–∞—Ç—Ä–∞—Ç: ${result.detailsCreated}`,
          `üìç –°–æ–∑–¥–∞–Ω–æ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–π: ${result.locationsCreated}`,
          `‚ùå –û—à–∏–±–æ–∫: ${result.failed}`,
          '‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ'
        ]);
        
        if (result.errors.length > 0) {
          result.errors.forEach(err => {
            setImportLog(prev => [...prev, `‚ö†Ô∏è ${err}`]);
          });
        }
        
        setImportStatus('completed');
        message.success(`–ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω! –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${result.success} –∑–∞–ø–∏—Å–µ–π`);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        await loadData();
        
      } catch (err: any) {
        console.error('‚ùå Import error:', err);
        setImportLog(prev => [...prev, `‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${err.message}`]);
        setImportStatus('error');
        message.error('–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: ' + err.message);
      } finally {
        setLoading(false);
      }
    };
    
    reader.readAsArrayBuffer(file);
    return false; // Prevent default upload
  };

  // –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel
  const handleExportExcel = () => {
    console.log('üöÄ [ConstructionCostsPage] Exporting to Excel');
    
    const exportData: any[] = [];
    let rowNumber = 1;
    
    categories.forEach(category => {
      // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª–∏ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
      const detailsByName = new Map<string, any[]>();
      category.details?.forEach((detail: any) => {
        const key = detail.name;
        if (!detailsByName.has(key)) {
          detailsByName.set(key, []);
        }
        detailsByName.get(key)!.push(detail);
      });
      
      // –î–ª—è –∫–∞–∂–¥–æ–π —É–Ω–∏–∫–∞–ª—å–Ω–æ–π –¥–µ—Ç–∞–ª–∏ –¥–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É —Å –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π
      let isFirstDetail = true;
      detailsByName.forEach((detailGroup, detailName) => {
        detailGroup.forEach((detail, index) => {
          const detailNameClean = detailName.replace(/ \([^)]*\)$/, ''); // –£–±–∏—Ä–∞–µ–º –µ–¥–∏–Ω–∏—Ü—É –∏–∑–º–µ—Ä–µ–Ω–∏—è –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è
          const detailUnit = detailName.match(/\(([^)]*)\)$/)?.[1] || ''; // –ò–∑–≤–ª–µ–∫–∞–µ–º –µ–¥–∏–Ω–∏—Ü—É –∏–∑–º–µ—Ä–µ–Ω–∏—è
          
          exportData.push({
            '‚Ññ': index === 0 ? rowNumber++ : '',
            '–ö–∞—Ç–µ–≥–æ—Ä–∏—è': isFirstDetail ? category.name : '',
            '–ï–¥.–∏–∑–º. –∫–∞—Ç–µ–≥–æ—Ä–∏–∏': isFirstDetail ? (category.description?.replace('–ï–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è: ', '') || '') : '',
            '–í–∏–¥ –∑–∞—Ç—Ä–∞—Ç': index === 0 ? detailNameClean : '',
            '–ï–¥.–∏–∑–º. –¥–µ—Ç–∞–ª–∏': index === 0 ? detailUnit : '',
            '–õ–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è': detail.location ? 
              [detail.location.city, detail.location.region, detail.location.country]
                .filter(Boolean).join(', ') : ''
          });
          
          if (isFirstDetail) {
            isFirstDetail = false;
          }
        });
      });
      
      // –ï—Å–ª–∏ —É –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ—Ç –¥–µ—Ç–∞–ª–µ–π, –¥–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É —Å –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π
      if (!category.details || category.details.length === 0) {
        exportData.push({
          '‚Ññ': rowNumber++,
          '–ö–∞—Ç–µ–≥–æ—Ä–∏—è': category.name,
          '–ï–¥.–∏–∑–º. –∫–∞—Ç–µ–≥–æ—Ä–∏–∏': category.description?.replace('–ï–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è: ', '') || '',
          '–í–∏–¥ –∑–∞—Ç—Ä–∞—Ç': '',
          '–ï–¥.–∏–∑–º. –¥–µ—Ç–∞–ª–∏': '',
          '–õ–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è': ''
        });
      }
    });
    
    const ws = XLSX.utils.json_to_sheet(exportData);
    const wb = XLSX.utils.book_new();
    XLSX.utils.book_append_sheet(wb, ws, '–ó–∞—Ç—Ä–∞—Ç—ã –Ω–∞ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ');
    XLSX.writeFile(wb, 'construction_costs.xlsx');
    
    message.success('–î–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã');
    console.log('‚úÖ [ConstructionCostsPage] Export complete');
  };

  // –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
  const handleClearAll = async () => {
    console.log('üöÄ [ConstructionCostsPage] Clearing all data');
    setLoading(true);
    
    const { error } = await clearAllData();
    
    if (error) {
      message.error('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö: ' + error.message);
    } else {
      message.success('–í—Å–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã');
      await loadData();
    }
    
    setLoading(false);
  };

  // –¢–∞–±–ª–∏—Ü–∞ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–π
  const locationColumns = [
    {
      title: '–°—Ç—Ä–∞–Ω–∞',
      dataIndex: 'country',
      key: 'country',
      render: (text: string) => text || '-'
    },
    {
      title: '–†–µ–≥–∏–æ–Ω',
      dataIndex: 'region',
      key: 'region',
      render: (text: string) => text || '-'
    },
    {
      title: '–ì–æ—Ä–æ–¥',
      dataIndex: 'city',
      key: 'city',
      render: (text: string) => text || '-'
    },
    {
      title: '–î–µ–π—Å—Ç–≤–∏—è',
      key: 'actions',
      width: 100,
      render: (_: any, record: any) => (
        <Popconfirm
          title="–£–¥–∞–ª–∏—Ç—å –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏—é?"
          onConfirm={async () => {
            await deleteLocation(record.id);
            message.success('–õ–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è —É–¥–∞–ª–µ–Ω–∞');
            loadData();
          }}
        >
          <Button type="link" danger size="small" icon={<DeleteOutlined />} />
        </Popconfirm>
      )
    }
  ];

  return (
    <>
      <style>
        {`
          /* –°—Ç–∏–ª–∏–∑–∞—Ü–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ */
          .page-header {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            border-radius: 16px;
            margin-bottom: 24px;
            padding: 32px;
            color: white;
            position: relative;
            overflow: hidden;
          }
          .page-header::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><defs><pattern id="grain" width="100" height="100" patternUnits="userSpaceOnUse"><circle cx="25" cy="25" r="1" fill="%23ffffff" opacity="0.1"/><circle cx="75" cy="75" r="1" fill="%23ffffff" opacity="0.1"/><circle cx="50" cy="10" r="1" fill="%23ffffff" opacity="0.05"/><circle cx="10" cy="90" r="1" fill="%23ffffff" opacity="0.05"/></pattern></defs><rect width="100" height="100" fill="url(%23grain)"/></svg>') repeat;
            pointer-events: none;
          }
          .page-header .ant-typography {
            color: white !important;
            position: relative;
            z-index: 1;
          }
          
          /* –£–ª—É—á—à–µ–Ω–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏ */
          .modern-card {
            border-radius: 12px;
            box-shadow: 0 4px 12px rgba(0,0,0,0.05);
            border: 1px solid #f0f0f0;
            transition: all 0.3s ease;
          }
          .modern-card:hover {
            box-shadow: 0 8px 24px rgba(0,0,0,0.1);
            transform: translateY(-2px);
          }
          
          /* –°—Ç–∏–ª–∏–∑–∞—Ü–∏—è –≤–∫–ª–∞–¥–æ–∫ */
          .ant-tabs-nav {
            margin-bottom: 0 !important;
            padding: 0 24px;
            background: white;
            border-radius: 12px 12px 0 0;
            box-shadow: 0 2px 8px rgba(0,0,0,0.06);
          }
          .ant-tabs-tab {
            font-weight: 500 !important;
            margin: 0 8px !important;
          }
          .ant-tabs-content-holder {
            background: white;
            border-radius: 0 0 12px 12px;
            border: 1px solid #f0f0f0;
            border-top: none;
          }
          
          /* –°—Ç–∏–ª–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü */
          .category-row {
            background: linear-gradient(90deg, #f8f9ff 0%, #f0f5ff 100%) !important;
            font-weight: 500;
            border-left: 4px solid #1890ff;
            transition: all 0.2s ease;
          }
          .category-row:hover td {
            background: linear-gradient(90deg, #e6f7ff 0%, #d9efff 100%) !important;
            transform: translateX(2px);
            box-shadow: 0 2px 8px rgba(24, 144, 255, 0.15);
          }
          .detail-row {
            background: linear-gradient(90deg, #f9fff9 0%, #f0fff0 100%) !important;
            border-left: 4px solid #52c41a;
            transition: all 0.2s ease;
          }
          .detail-row:hover td {
            background: linear-gradient(90deg, #eaffcc 0%, #d9f7be 100%) !important;
            transform: translateX(2px);
            box-shadow: 0 2px 8px rgba(82, 196, 26, 0.15);
          }
          .location-row {
            background: linear-gradient(90deg, #fffaf0 0%, #fff2e6 100%) !important;
            border-left: 4px solid #faad14;
            transition: all 0.2s ease;
          }
          .location-row:hover td {
            background: linear-gradient(90deg, #ffe7ba 0%, #ffd591 100%) !important;
            transform: translateX(2px);
            box-shadow: 0 2px 8px rgba(250, 173, 20, 0.15);
          }
          
          /* –î–µ—Ä–µ–≤–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π */
          .ant-tree .ant-tree-node-content-wrapper {
            border-radius: 8px;
            transition: all 0.2s ease;
          }
          .ant-tree .ant-tree-node-content-wrapper:hover {
            background: linear-gradient(90deg, #f0f5ff 0%, #e6f7ff 100%);
          }
          
          /* –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ */
          .stats-card {
            text-align: center;
            padding: 28px 24px;
            border-radius: 16px;
            background: linear-gradient(135deg, #ffffff 0%, #f8f9fa 100%);
            border: 1px solid #f0f0f0;
            position: relative;
            overflow: hidden;
            transition: all 0.3s ease;
          }
          .stats-card:hover {
            transform: translateY(-4px);
            box-shadow: 0 12px 32px rgba(0,0,0,0.12);
          }
          .stats-card::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            height: 4px;
            background: linear-gradient(90deg, #1890ff 0%, #722ed1 100%);
          }
          .stats-card:nth-child(2)::before {
            background: linear-gradient(90deg, #52c41a 0%, #389e0d 100%);
          }
          .stats-card:nth-child(3)::before {
            background: linear-gradient(90deg, #faad14 0%, #d46b08 100%);
          }
          .stats-card .ant-statistic-content {
            margin-bottom: 8px;
          }
          
          /* –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π */
          .action-buttons {
            display: flex;
            gap: 8px;
            flex-wrap: wrap;
          }
          .action-btn {
            border-radius: 8px;
            font-weight: 500;
            transition: all 0.3s ease;
            backdrop-filter: blur(10px);
          }
          .action-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 16px rgba(0,0,0,0.2) !important;
          }
          .action-btn:active {
            transform: translateY(0);
          }
          
          /* –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞ */
          .ant-modal-content {
            border-radius: 16px;
            overflow: hidden;
          }
          .ant-modal-header {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            border-bottom: none;
          }
          .ant-modal-title {
            color: white !important;
          }
        `}
      </style>
      <Layout style={{ minHeight: '100vh', background: '#fafbfc' }}>
        <Content style={{ padding: '24px' }}>
          {/* –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ */}
          <div className="page-header">
            <Row align="middle" justify="space-between">
              <Col>
                <Flex align="center" gap={16}>
                  <Avatar 
                    size={64} 
                    icon={<DatabaseOutlined />} 
                    style={{ background: 'rgba(255,255,255,0.2)' }}
                  />
                  <div>
                    <Title level={2} style={{ margin: 0, color: 'white' }}>
                      –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞—Ç—Ä–∞—Ç–∞–º–∏ –Ω–∞ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ
                    </Title>
                    <Text style={{ color: 'rgba(255,255,255,0.8)', fontSize: 16 }}>
                      –ò–º–ø–æ—Ä—Ç, —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –∞–Ω–∞–ª–∏–∑ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã—Ö –∑–∞—Ç—Ä–∞—Ç
                    </Text>
                  </div>
                </Flex>
              </Col>
              <Col>
                <div className="action-buttons">
                  <Button
                    className="action-btn"
                    style={{ 
                      background: 'rgba(255, 255, 255, 0.95)',
                      color: '#52c41a',
                      borderColor: 'rgba(255, 255, 255, 0.3)',
                      fontWeight: 600
                    }}
                    icon={<ReloadOutlined />}
                    onClick={loadData}
                    loading={loading}
                    size="large"
                  >
                    –û–±–Ω–æ–≤–∏—Ç—å
                  </Button>
                  <Button
                    className="action-btn"
                    style={{ 
                      background: 'rgba(255, 255, 255, 0.95)',
                      color: '#faad14',
                      borderColor: 'rgba(255, 255, 255, 0.3)',
                      fontWeight: 600
                    }}
                    icon={<DownloadOutlined />}
                    onClick={handleExportExcel}
                    disabled={categories.length === 0}
                    size="large"
                  >
                    –≠–∫—Å–ø–æ—Ä—Ç
                  </Button>
                  <Button
                    className="action-btn"
                    style={{ 
                      background: '#ffd93d',
                      color: '#333',
                      borderColor: '#ffd93d',
                      fontWeight: 600,
                      boxShadow: '0 2px 8px rgba(255, 217, 61, 0.4)'
                    }}
                    icon={<UploadOutlined />}
                    onClick={() => setIsImportModalVisible(true)}
                    size="large"
                  >
                    –ò–º–ø–æ—Ä—Ç
                  </Button>
                  <Popconfirm
                    title="–£–¥–∞–ª–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ?"
                    description="–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ. –í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –¥–µ—Ç–∞–ª–∏ –∏ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã."
                    onConfirm={handleClearAll}
                    okText="–î–∞, —É–¥–∞–ª–∏—Ç—å"
                    cancelText="–û—Ç–º–µ–Ω–∞"
                  >
                    <Button
                      className="action-btn"
                      style={{ 
                        background: 'rgba(255, 77, 79, 0.1)',
                        color: '#ff4d4f',
                        borderColor: 'rgba(255, 77, 79, 0.3)',
                        fontWeight: 600
                      }}
                      icon={<ClearOutlined />}
                      disabled={categories.length === 0}
                      size="large"
                    >
                      –û—á–∏—Å—Ç–∏—Ç—å
                    </Button>
                  </Popconfirm>
                </div>
              </Col>
            </Row>
          </div>

          {/* –ë—ã—Å—Ç—Ä–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
          <Row gutter={[16, 16]} style={{ marginBottom: 24 }}>
            <Col xs={24} sm={8}>
              <Card className="stats-card">
                <Statistic
                  title="–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∑–∞—Ç—Ä–∞—Ç"
                  value={categories.length}
                  prefix={<FolderOutlined style={{ color: '#1890ff', fontSize: 24 }} />}
                  valueStyle={{ color: '#1890ff', fontSize: 36, fontWeight: 'bold', lineHeight: 1.2 }}
                />
              </Card>
            </Col>
            <Col xs={24} sm={8}>
              <Card className="stats-card">
                <Statistic
                  title="–í–∏–¥—ã –∑–∞—Ç—Ä–∞—Ç"
                  value={details.length}
                  prefix={<FileOutlined style={{ color: '#52c41a', fontSize: 24 }} />}
                  valueStyle={{ color: '#52c41a', fontSize: 36, fontWeight: 'bold', lineHeight: 1.2 }}
                />
              </Card>
            </Col>
            <Col xs={24} sm={8}>
              <Card className="stats-card">
                <Statistic
                  title="–õ–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏"
                  value={locations.length}
                  prefix={<GlobalOutlined style={{ color: '#faad14', fontSize: 24 }} />}
                  valueStyle={{ color: '#faad14', fontSize: 36, fontWeight: 'bold', lineHeight: 1.2 }}
                />
              </Card>
            </Col>
          </Row>

          {/* –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç */}
          <Card className="modern-card" style={{ overflow: 'hidden', padding: 0 }}>
            <Tabs 
              defaultActiveKey="1"
              size="large"
              items={[
                {
                  key: '1',
                  label: (
                    <span>
                      <FolderOutlined />
                      <span style={{ marginLeft: 8 }}>–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∑–∞—Ç—Ä–∞—Ç</span>
                      <Badge count={categories.length} style={{ marginLeft: 8 }} />
                    </span>
                  ),
                  children: (
                    <div style={{ padding: '24px' }}>
                      {treeData.length > 0 ? (
                        <>
                          <Alert
                            message="–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∑–∞—Ç—Ä–∞—Ç"
                            description="–ò–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π, –≤–∏–¥–æ–≤ –∑–∞—Ç—Ä–∞—Ç –∏ –∏—Ö –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–π. –ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π."
                            type="info"
                            showIcon
                            style={{ marginBottom: 24, borderRadius: 8 }}
                          />
                          <Spin spinning={loading}>
                            <Tree
                              showLine
                              showIcon
                              blockNode
                              treeData={treeData}
                              expandedKeys={expandedKeys}
                              selectedKeys={selectedKeys}
                              onExpand={setExpandedKeys}
                              onSelect={onSelect}
                              style={{ 
                                minHeight: 500,
                                background: '#fafbfc',
                                padding: '20px',
                                borderRadius: '8px',
                                border: '1px solid #f0f0f0'
                              }}
                            />
                          </Spin>
                        </>
                      ) : (
                        <Empty
                          image={Empty.PRESENTED_IMAGE_SIMPLE}
                          description={
                            <span>
                              –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è<br/>
                              <Text type="secondary">–ò–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ Excel —Ñ–∞–π–ª –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã</Text>
                            </span>
                          }
                        >
                          <Button
                            type="primary"
                            icon={<UploadOutlined />}
                            onClick={() => setIsImportModalVisible(true)}
                            size="large"
                          >
                            –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ
                          </Button>
                        </Empty>
                      )}
                    </div>
                  )
                },
                {
                  key: '3',
                  label: (
                    <span>
                      <BarChartOutlined />
                      <span style={{ marginLeft: 8 }}>–ê–Ω–∞–ª–∏—Ç–∏–∫–∞</span>
                    </span>
                  ),
                  children: (
                    <div style={{ padding: '24px' }}>
                      <Row gutter={[24, 24]}>
                        <Col span={24}>
                          <Alert
                            message="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö"
                            description="–î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –∑–∞—Ç—Ä–∞—Ç, —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –∏ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è–º."
                            type="info"
                            showIcon
                            style={{ borderRadius: 8 }}
                          />
                        </Col>
                        
                        {/* –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
                        <Col xs={24} lg={8}>
                          <Card className="modern-card" style={{ height: '200px' }}>
                            <Statistic
                              title="–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π"
                              value={categories.length}
                              prefix={<FolderOutlined style={{ color: '#1890ff' }} />}
                              valueStyle={{ color: '#1890ff', fontSize: 32 }}
                            />
                            <Divider style={{ margin: '12px 0' }} />
                            <Text type="secondary">–û—Å–Ω–æ–≤–Ω—ã–µ –≥—Ä—É–ø–ø—ã –∑–∞—Ç—Ä–∞—Ç</Text>
                          </Card>
                        </Col>
                        
                        <Col xs={24} lg={8}>
                          <Card className="modern-card" style={{ height: '200px' }}>
                            <Statistic
                              title="–î–µ—Ç–∞–ª—å–Ω—ã–µ –≤–∏–¥—ã –∑–∞—Ç—Ä–∞—Ç"
                              value={details.length}
                              prefix={<FileOutlined style={{ color: '#52c41a' }} />}
                              valueStyle={{ color: '#52c41a', fontSize: 32 }}
                            />
                            <Divider style={{ margin: '12px 0' }} />
                            <Text type="secondary">–ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Å—Ç–∞—Ç—å–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤</Text>
                          </Card>
                        </Col>
                        
                        <Col xs={24} lg={8}>
                          <Card className="modern-card" style={{ height: '200px' }}>
                            <Statistic
                              title="–ì–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏"
                              value={locations.length}
                              prefix={<GlobalOutlined style={{ color: '#faad14' }} />}
                              valueStyle={{ color: '#faad14', fontSize: 32 }}
                            />
                            <Divider style={{ margin: '12px 0' }} />
                            <Text type="secondary">–†–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø—Ä–∏–≤—è–∑–∫–∏</Text>
                          </Card>
                        </Col>
                        
                        {/* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ */}
                        <Col xs={24} lg={12}>
                          <Card className="modern-card" title="–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö" extra={<SettingOutlined />}>
                            <Space direction="vertical" style={{ width: '100%' }}>
                              <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
                                <span>–°—Ä–µ–¥–Ω—è—è –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è:</span>
                                <Badge 
                                  count={categories.length > 0 ? Math.round(details.length / categories.length * 10) / 10 : 0} 
                                  style={{ backgroundColor: '#52c41a' }}
                                />
                              </div>
                              <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
                                <span>–ü–æ–∫—Ä—ã—Ç–∏–µ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è–º–∏:</span>
                                <Badge 
                                  count={`${locations.length > 0 && details.length > 0 ? Math.round(locations.length / details.length * 100) : 0}%`}
                                  style={{ backgroundColor: '#faad14' }}
                                />
                              </div>
                              <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
                                <span>–û–±—â–∞—è –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç—å:</span>
                                <Progress 
                                  percent={categories.length > 0 ? 100 : 0}
                                  size="small"
                                  status={categories.length > 0 ? "success" : "exception"}
                                />
                              </div>
                            </Space>
                          </Card>
                        </Col>
                        
                        <Col xs={24} lg={12}>
                          <Card className="modern-card" title="–ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è" extra={<ThunderboltOutlined />}>
                            <Space direction="vertical" style={{ width: '100%' }} size="middle">
                              <Button 
                                type="primary" 
                                block 
                                icon={<UploadOutlined />}
                                onClick={() => setIsImportModalVisible(true)}
                                size="large"
                              >
                                –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
                              </Button>
                              <Button 
                                block 
                                icon={<DownloadOutlined />}
                                onClick={handleExportExcel}
                                disabled={categories.length === 0}
                                size="large"
                              >
                                –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
                              </Button>
                              <Button 
                                block 
                                icon={<ReloadOutlined />}
                                onClick={loadData}
                                loading={loading}
                                size="large"
                              >
                                –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
                              </Button>
                            </Space>
                          </Card>
                        </Col>
                      </Row>
                    </div>
                  )
                }
              ]}
            />
          </Card>

        {/* –°–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–µ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∏–º–ø–æ—Ä—Ç–∞ */}
        <ModernImportModal
          visible={isImportModalVisible}
          status={importStatus}
          progress={importProgress}
          logs={importLog}
          onCancel={() => {
            setIsImportModalVisible(false);
            setImportStatus('idle');
            setImportProgress(0);
            setImportLog([]);
          }}
          onUpload={handleImportExcel}
        />
      </Content>
    </Layout>
    </>
  );
};

export default ConstructionCostsPage;