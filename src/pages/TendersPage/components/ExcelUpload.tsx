import React from 'react';
import { Upload, Button, message, Modal } from 'antd';
import { UploadOutlined } from '@ant-design/icons';
import type { UploadProps } from 'antd';
import type { UploadRequestOption as RcUploadRequestOption } from 'rc-upload/lib/interface';
import { useNavigate } from 'react-router-dom';
import { clientWorksApi } from '../../../lib/supabase/api';
import type { ExcelUploadProps } from '../types';

const ExcelUpload: React.FC<ExcelUploadProps> = ({ tenderId, onUpload }) => {
  const navigate = useNavigate();

  console.log('üöÄ ExcelUpload component rendered for tender:', tenderId);

  const uploadProps: UploadProps = {
    showUploadList: false,
    accept: '.xlsx,.xls',
    customRequest: async (options: RcUploadRequestOption) => {
      const { file, onSuccess, onError } = options;
      
      console.log('üì§ Excel upload started for tender:', tenderId);
      console.log('üìÅ File info:', { 
        name: (file as File).name, 
        size: (file as File).size,
        type: (file as File).type 
      });
      
      try {
        console.log('üì° Calling clientWorksApi.uploadFromXlsx...');
        const result = await clientWorksApi.uploadFromXlsx(tenderId, file as File);
        
        console.log('üì¶ Upload result:', result);
        
        if (result.error) {
          console.error('‚ùå Upload failed:', result.error);
          message.error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: ${result.error}`);
          onError?.(new Error(result.error));
        } else {
          console.log('‚úÖ Upload successful:', result.data);
          
          // Show detailed success message
          const { itemsCount, positionsCount } = result.data || { itemsCount: 0, positionsCount: 0 };
          
          onSuccess?.(result, new XMLHttpRequest());
          
          // Show success modal
          Modal.success({
            title: '‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!',
            content: (
              <div>
                <p><strong>–§–∞–π–ª:</strong> {(file as File).name}</p>
                <p><strong>–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ:</strong></p>
                <ul style={{ marginLeft: '20px', marginTop: '8px' }}>
                  <li>{positionsCount} –ø–æ–∑–∏—Ü–∏–π</li>
                  <li>{itemsCount} —Ä–∞–±–æ—Ç</li>
                </ul>
                <p style={{ marginTop: '12px', color: '#666' }}>
                  –°–µ–π—á–∞—Å –≤—ã –±—É–¥–µ—Ç–µ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –í–û–† –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.
                </p>
              </div>
            ),
            okText: '–ü–µ—Ä–µ–π—Ç–∏ –∫ –í–û–†',
            onOk: () => {
              console.log('üîÑ User clicked OK, navigating to BOQ page...');
              navigate(`/tender/${tenderId}/boq`);
            },
            centered: true,
            width: 400
          });
          
          // Also show brief message
          message.success(`–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: ${positionsCount} –ø–æ–∑–∏—Ü–∏–π, ${itemsCount} —Ä–∞–±–æ—Ç`);
          
          // Call parent upload handler
          if (onUpload) {
            await onUpload(file as File);
          }
        }
      } catch (error) {
        console.error('üí• Upload exception:', error);
        message.error('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞');
        onError?.(error as Error);
      }
    }
  };

  return (
    <Upload {...uploadProps}>
      <Button size="small" icon={<UploadOutlined />}>
        –ó–∞–≥—Ä—É–∑–∏—Ç—å
      </Button>
    </Upload>
  );
};

export default ExcelUpload;