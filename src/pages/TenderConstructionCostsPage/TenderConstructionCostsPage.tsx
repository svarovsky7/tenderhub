import React, { useState, useMemo } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import { 
  Table, 
  Button, 
  Space, 
  Card, 
  Input, 
  Select, 
  Tag, 
  Drawer, 
  Form, 
  InputNumber, 
  message, 
  Popconfirm,
  Row,
  Col,
  Statistic,
  Badge,
  Tooltip,
  Modal,
  Collapse,
  Empty,
  Divider,
  Typography,
  Tabs
} from 'antd';
import { 
  PlusOutlined, 
  EditOutlined, 
  DeleteOutlined,
  FolderOutlined,
  DollarOutlined,
  GroupOutlined,
  ExportOutlined,
  ImportOutlined,
  CalculatorOutlined,
  ArrowLeftOutlined,
  PercentageOutlined
} from '@ant-design/icons';
import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';
import { tenderConstructionCostsApi } from '../../lib/supabase/api/tender-construction-costs';
import { constructionCostsApi } from '../../lib/supabase/api/construction-costs';
import { tendersApi } from '../../lib/supabase/api/tenders';
import type { 
  TenderConstructionCostWithDetails,
  CreateTenderConstructionCostInput,
  UpdateTenderConstructionCostInput
} from '../../lib/supabase/types/construction-costs';
import { ImportTenderCostsModal } from '../../components/admin/ImportTenderCostsModal';
import * as XLSX from 'xlsx';

const { Search } = Input;
const { Option } = Select;
const { Panel } = Collapse;
const { Title, Text } = Typography;

export const TenderConstructionCostsPage: React.FC = () => {
  const { tenderId } = useParams<{ tenderId: string }>();
  const navigate = useNavigate();
  const queryClient = useQueryClient();

  console.log('üöÄ [TenderConstructionCostsPage] Component mounted with tenderId:', tenderId);

  const [searchTerm, setSearchTerm] = useState('');
  const [drawerVisible, setDrawerVisible] = useState(false);
  const [selectedCost, setSelectedCost] = useState<TenderConstructionCostWithDetails | null>(null);
  const [addCostModalVisible, setAddCostModalVisible] = useState(false);
  const [groupModalVisible, setGroupModalVisible] = useState(false);
  const [importModalVisible, setImportModalVisible] = useState(false);
  const [form] = Form.useForm();
  const [groupForm] = Form.useForm();
  const [addCostForm] = Form.useForm();

  if (!tenderId) {
    navigate('/');
    return null;
  }

  // Queries
  const { data: tender } = useQuery({
    queryKey: ['tender', tenderId],
    queryFn: () => tendersApi.getById(tenderId)
  });

  const { data: groupsWithCosts = [] } = useQuery({
    queryKey: ['tender-construction-costs-groups', tenderId],
    queryFn: () => tenderConstructionCostsApi.getTenderGroupsWithCosts(tenderId)
  });

  const { data: summary } = useQuery({
    queryKey: ['tender-construction-costs-summary', tenderId],
    queryFn: () => tenderConstructionCostsApi.getTenderCostSummary(tenderId)
  });

  const { data: availableCosts = [] } = useQuery({
    queryKey: ['available-construction-costs'],
    queryFn: () => constructionCostsApi.getCosts({ is_active: true }),
    enabled: addCostModalVisible
  });

  // Mutations
  const addCostMutation = useMutation({
    mutationFn: (input: CreateTenderConstructionCostInput) => 
      tenderConstructionCostsApi.addCostToTender(input),
    onSuccess: () => {
      message.success('–ó–∞—Ç—Ä–∞—Ç—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Ç–µ–Ω–¥–µ—Ä');
      queryClient.invalidateQueries({ queryKey: ['tender-construction-costs-groups', tenderId] });
      queryClient.invalidateQueries({ queryKey: ['tender-construction-costs-summary', tenderId] });
      setAddCostModalVisible(false);
      addCostForm.resetFields();
    },
    onError: (error) => {
      console.error('‚ùå Error adding cost to tender:', error);
      message.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞—Ç—Ä–∞—Ç');
    }
  });

  const updateCostMutation = useMutation({
    mutationFn: (input: UpdateTenderConstructionCostInput) => 
      tenderConstructionCostsApi.updateTenderCost(input),
    onSuccess: () => {
      message.success('–ó–∞—Ç—Ä–∞—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã');
      queryClient.invalidateQueries({ queryKey: ['tender-construction-costs-groups', tenderId] });
      queryClient.invalidateQueries({ queryKey: ['tender-construction-costs-summary', tenderId] });
      setDrawerVisible(false);
      form.resetFields();
      setSelectedCost(null);
    },
    onError: (error) => {
      console.error('‚ùå Error updating tender cost:', error);
      message.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞—Ç—Ä–∞—Ç');
    }
  });

  const removeCostMutation = useMutation({
    mutationFn: (id: string) => tenderConstructionCostsApi.removeCostFromTender(id),
    onSuccess: () => {
      message.success('–ó–∞—Ç—Ä–∞—Ç—ã —É–¥–∞–ª–µ–Ω—ã –∏–∑ —Ç–µ–Ω–¥–µ—Ä–∞');
      queryClient.invalidateQueries({ queryKey: ['tender-construction-costs-groups', tenderId] });
      queryClient.invalidateQueries({ queryKey: ['tender-construction-costs-summary', tenderId] });
    },
    onError: (error) => {
      console.error('‚ùå Error removing cost:', error);
      message.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞—Ç—Ä–∞—Ç');
    }
  });

  const createGroupMutation = useMutation({
    mutationFn: (input: any) => 
      tenderConstructionCostsApi.createGroup({
        tender_id: tenderId,
        ...input
      }),
    onSuccess: () => {
      message.success('–ì—Ä—É–ø–ø–∞ —Å–æ–∑–¥–∞–Ω–∞');
      queryClient.invalidateQueries({ queryKey: ['tender-construction-costs-groups', tenderId] });
      setGroupModalVisible(false);
      groupForm.resetFields();
    },
    onError: (error) => {
      console.error('‚ùå Error creating group:', error);
      message.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≥—Ä—É–ø–ø—ã');
    }
  });

  const bulkAddCostsMutation = useMutation({
    mutationFn: (costs: CreateTenderConstructionCostInput[]) => 
      tenderConstructionCostsApi.bulkAddCostsToTender(costs),
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['tender-construction-costs-groups', tenderId] });
      queryClient.invalidateQueries({ queryKey: ['tender-construction-costs-summary', tenderId] });
    },
    onError: (error) => {
      console.error('‚ùå Error bulk adding costs:', error);
      throw error;
    }
  });

  // Filter costs by search term
  const filteredGroups = useMemo(() => {
    if (!searchTerm) return groupsWithCosts;
    
    return groupsWithCosts.map(group => ({
      ...group,
      costs: group.costs.filter(cost => 
        cost.cost?.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
        cost.cost?.code.toLowerCase().includes(searchTerm.toLowerCase())
      )
    })).filter(group => group.costs.length > 0 || group.id === 'ungrouped');
  }, [groupsWithCosts, searchTerm]);

  // Table columns
  const columns = [
    {
      title: '–ö–æ–¥',
      dataIndex: ['cost', 'code'],
      key: 'code',
      width: 100
    },
    {
      title: '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ',
      dataIndex: ['cost', 'name'],
      key: 'name',
      render: (text: string, record: TenderConstructionCostWithDetails) => (
        <Space direction="vertical" size={0}>
          <span style={{ fontWeight: 500 }}>{text}</span>
          {record.cost?.description && (
            <span style={{ fontSize: 12, color: '#888' }}>{record.cost.description}</span>
          )}
        </Space>
      )
    },
    {
      title: '–ö–∞—Ç–µ–≥–æ—Ä–∏—è',
      dataIndex: ['cost', 'category', 'name'],
      key: 'category',
      width: 150,
      render: (text: string) => text ? (
        <Tag icon={<FolderOutlined />} color="blue">{text}</Tag>
      ) : '-'
    },
    {
      title: '–ï–¥. –∏–∑–º.',
      dataIndex: ['cost', 'unit'],
      key: 'unit',
      width: 80
    },
    {
      title: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ',
      dataIndex: 'quantity',
      key: 'quantity',
      width: 100,
      render: (value: number) => value.toLocaleString('ru-RU')
    },
    {
      title: '–¶–µ–Ω–∞ –∑–∞ –µ–¥.',
      dataIndex: 'unit_price',
      key: 'unit_price',
      width: 120,
      render: (price: number) => `${price.toLocaleString('ru-RU')} ‚ÇΩ`
    },
    {
      title: '–°—É–º–º–∞',
      dataIndex: 'total_price',
      key: 'total_price',
      width: 120,
      render: (price: number) => (
        <span style={{ fontWeight: 500 }}>
          {price.toLocaleString('ru-RU')} ‚ÇΩ
        </span>
      )
    },
    {
      title: '–ù–∞—Ü–µ–Ω–∫–∞',
      dataIndex: 'markup_percent',
      key: 'markup_percent',
      width: 100,
      render: (value: number) => value ? (
        <Tag icon={<PercentageOutlined />} color="orange">{value}%</Tag>
      ) : '-'
    },
    {
      title: '–ò—Ç–æ–≥–æ',
      dataIndex: 'final_price',
      key: 'final_price',
      width: 130,
      render: (price: number) => (
        <span style={{ fontWeight: 600, color: '#1890ff' }}>
          {price.toLocaleString('ru-RU')} ‚ÇΩ
        </span>
      )
    },
    {
      title: '–î–µ–π—Å—Ç–≤–∏—è',
      key: 'actions',
      width: 100,
      fixed: 'right' as const,
      render: (_: any, record: TenderConstructionCostWithDetails) => (
        <Space>
          <Tooltip title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å">
            <Button
              type="text"
              icon={<EditOutlined />}
              onClick={() => handleEdit(record)}
            />
          </Tooltip>
          <Popconfirm
            title="–£–¥–∞–ª–∏—Ç—å –∑–∞—Ç—Ä–∞—Ç—ã –∏–∑ —Ç–µ–Ω–¥–µ—Ä–∞?"
            onConfirm={() => removeCostMutation.mutate(record.id)}
            okText="–î–∞"
            cancelText="–ù–µ—Ç"
          >
            <Tooltip title="–£–¥–∞–ª–∏—Ç—å">
              <Button
                type="text"
                danger
                icon={<DeleteOutlined />}
              />
            </Tooltip>
          </Popconfirm>
        </Space>
      )
    }
  ];

  const handleEdit = (cost: TenderConstructionCostWithDetails) => {
    console.log('üîç [handleEdit] Editing tender cost:', cost);
    setSelectedCost(cost);
    form.setFieldsValue({
      quantity: cost.quantity,
      unit_price: cost.unit_price,
      markup_percent: cost.markup_percent || 0,
      notes: cost.notes,
      is_included: cost.is_included,
      group_id: cost.group_id
    });
    setDrawerVisible(true);
  };

  const handleSubmit = async (values: any) => {
    console.log('üöÄ [handleSubmit] Form values:', values);
    
    if (selectedCost) {
      updateCostMutation.mutate({
        id: selectedCost.id,
        ...values
      });
    }
  };

  const handleAddCost = async (values: any) => {
    console.log('üöÄ [handleAddCost] Adding costs:', values);
    
    const { cost_ids, ...commonValues } = values;
    
    // Add multiple costs at once
    const promises = cost_ids.map((cost_id: string) => 
      addCostMutation.mutateAsync({
        tender_id: tenderId,
        cost_id,
        ...commonValues
      })
    );
    
    try {
      await Promise.all(promises);
    } catch (error) {
      console.error('‚ùå Error adding multiple costs:', error);
    }
  };

  const handleExport = () => {
    console.log('üöÄ [handleExport] Exporting to Excel');
    
    const exportData = filteredGroups.flatMap(group => 
      group.costs.map(cost => ({
        '–ì—Ä—É–ø–ø–∞': group.name,
        '–ö–æ–¥': cost.cost?.code || '',
        '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ': cost.cost?.name || '',
        '–ö–∞—Ç–µ–≥–æ—Ä–∏—è': cost.cost?.category?.name || '',
        '–ï–¥. –∏–∑–º.': cost.cost?.unit || '',
        '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ': cost.quantity,
        '–¶–µ–Ω–∞ –∑–∞ –µ–¥.': cost.unit_price,
        '–°—É–º–º–∞': cost.total_price,
        '–ù–∞—Ü–µ–Ω–∫–∞ %': cost.markup_percent || 0,
        '–ò—Ç–æ–≥–æ': cost.final_price,
        '–ü—Ä–∏–º–µ—á–∞–Ω–∏—è': cost.notes || ''
      }))
    );
    
    const ws = XLSX.utils.json_to_sheet(exportData);
    const wb = XLSX.utils.book_new();
    XLSX.utils.book_append_sheet(wb, ws, '–ó–∞—Ç—Ä–∞—Ç—ã');
    XLSX.writeFile(wb, `tender_${tenderId}_costs.xlsx`);
    
    message.success('–î–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã');
  };

  const handleImport = async (costs: CreateTenderConstructionCostInput[]) => {
    console.log('üì§ [handleImport] Importing costs:', costs.length);
    await bulkAddCostsMutation.mutateAsync(costs);
  };

  return (
    <div style={{ padding: 24 }}>
      <Button 
        icon={<ArrowLeftOutlined />} 
        onClick={() => navigate('/tenders')}
        style={{ marginBottom: 16 }}
      >
        –ù–∞–∑–∞–¥ –∫ —Ç–µ–Ω–¥–µ—Ä–∞–º
      </Button>

      <Card
        title={
          <Space>
            <DollarOutlined />
            <span>–ó–∞—Ç—Ä–∞—Ç—ã –Ω–∞ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ - {tender?.title || '–¢–µ–Ω–¥–µ—Ä'}</span>
          </Space>
        }
        extra={
          <Space>
            <Button icon={<ImportOutlined />} onClick={() => setImportModalVisible(true)}>
              –ò–º–ø–æ—Ä—Ç –∏–∑ Excel
            </Button>
            <Button icon={<ExportOutlined />} onClick={handleExport}>
              –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel
            </Button>
            <Button icon={<GroupOutlined />} onClick={() => setGroupModalVisible(true)}>
              –°–æ–∑–¥–∞—Ç—å –≥—Ä—É–ø–ø—É
            </Button>
            <Button 
              type="primary" 
              icon={<PlusOutlined />}
              onClick={() => setAddCostModalVisible(true)}
            >
              –î–æ–±–∞–≤–∏—Ç—å –∑–∞—Ç—Ä–∞—Ç—ã
            </Button>
          </Space>
        }
      >
        {/* Statistics */}
        <Row gutter={16} style={{ marginBottom: 24 }}>
          <Col span={6}>
            <Card bordered={false}>
              <Statistic
                title="–ü–æ–∑–∏—Ü–∏–π"
                value={summary?.items_count || 0}
                prefix={<CalculatorOutlined />}
              />
            </Card>
          </Col>
          <Col span={6}>
            <Card bordered={false}>
              <Statistic
                title="–ö–∞—Ç–µ–≥–æ—Ä–∏–π"
                value={summary?.categories_count || 0}
                prefix={<FolderOutlined />}
              />
            </Card>
          </Col>
          <Col span={6}>
            <Card bordered={false}>
              <Statistic
                title="–ë–∞–∑–æ–≤–∞—è —Å—É–º–º–∞"
                value={summary?.total_base || 0}
                precision={0}
                suffix="‚ÇΩ"
              />
            </Card>
          </Col>
          <Col span={6}>
            <Card bordered={false}>
              <Statistic
                title="–ò—Ç–æ–≥–æ —Å –Ω–∞—Ü–µ–Ω–∫–æ–π"
                value={summary?.total_with_markup || 0}
                precision={0}
                suffix="‚ÇΩ"
                valueStyle={{ color: '#1890ff', fontWeight: 600 }}
              />
            </Card>
          </Col>
        </Row>

        {/* Search */}
        <Space style={{ marginBottom: 16 }}>
          <Search
            placeholder="–ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏–ª–∏ –∫–æ–¥—É"
            allowClear
            style={{ width: 400 }}
            onSearch={setSearchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
          />
        </Space>

        {/* Groups with costs */}
        {filteredGroups.length === 0 ? (
          <Empty description="–ù–µ—Ç –∑–∞—Ç—Ä–∞—Ç –≤ —ç—Ç–æ–º —Ç–µ–Ω–¥–µ—Ä–µ" />
        ) : (
          <Collapse defaultActiveKey={['ungrouped']} ghost>
            {filteredGroups
              .sort((a, b) => a.sort_order - b.sort_order)
              .map(group => (
                <Panel
                  key={group.id}
                  header={
                    <Space style={{ width: '100%', justifyContent: 'space-between' }}>
                      <Space>
                        <GroupOutlined />
                        <Title level={5} style={{ margin: 0 }}>{group.name}</Title>
                        <Badge count={group.costs.length} showZero />
                      </Space>
                      <Space>
                        <Text type="secondary">–°—É–º–º–∞:</Text>
                        <Text strong>{group.total_base.toLocaleString('ru-RU')} ‚ÇΩ</Text>
                        <Divider type="vertical" />
                        <Text type="secondary">–° –Ω–∞—Ü–µ–Ω–∫–æ–π:</Text>
                        <Text strong style={{ color: '#1890ff' }}>
                          {group.total_with_markup.toLocaleString('ru-RU')} ‚ÇΩ
                        </Text>
                      </Space>
                    </Space>
                  }
                >
                  {group.costs.length > 0 ? (
                    <Table
                      columns={columns}
                      dataSource={group.costs}
                      rowKey="id"
                      pagination={false}
                      scroll={{ x: 1300 }}
                      size="small"
                    />
                  ) : (
                    <Empty description="–ù–µ—Ç –∑–∞—Ç—Ä–∞—Ç –≤ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ" />
                  )}
                </Panel>
              ))}
          </Collapse>
        )}
      </Card>

      {/* Edit Cost Drawer */}
      <Drawer
        title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞—Ç—Ä–∞—Ç—ã"
        width={500}
        open={drawerVisible}
        onClose={() => {
          setDrawerVisible(false);
          setSelectedCost(null);
          form.resetFields();
        }}
        footer={
          <Space style={{ float: 'right' }}>
            <Button onClick={() => setDrawerVisible(false)}>–û—Ç–º–µ–Ω–∞</Button>
            <Button 
              type="primary" 
              onClick={() => form.submit()}
              loading={updateCostMutation.isPending}
            >
              –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
            </Button>
          </Space>
        }
      >
        {selectedCost && (
          <div style={{ marginBottom: 16 }}>
            <Card size="small">
              <Space direction="vertical" style={{ width: '100%' }}>
                <Text strong>{selectedCost.cost?.name}</Text>
                <Text type="secondary">–ö–æ–¥: {selectedCost.cost?.code}</Text>
                <Text type="secondary">–ï–¥–∏–Ω–∏—Ü–∞: {selectedCost.cost?.unit}</Text>
                <Text type="secondary">–ë–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞: {selectedCost.cost?.base_price.toLocaleString('ru-RU')} ‚ÇΩ</Text>
              </Space>
            </Card>
          </div>
        )}

        <Form
          form={form}
          layout="vertical"
          onFinish={handleSubmit}
        >
          <Row gutter={16}>
            <Col span={12}>
              <Form.Item
                name="quantity"
                label="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"
                rules={[{ required: true, message: '–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ' }]}
              >
                <InputNumber
                  style={{ width: '100%' }}
                  min={0}
                  precision={3}
                  placeholder="0.000"
                />
              </Form.Item>
            </Col>
            <Col span={12}>
              <Form.Item
                name="unit_price"
                label="–¶–µ–Ω–∞ –∑–∞ –µ–¥–∏–Ω–∏—Ü—É"
                rules={[{ required: true, message: '–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É' }]}
              >
                <InputNumber
                  style={{ width: '100%' }}
                  min={0}
                  precision={2}
                  placeholder="0.00"
                  formatter={value => `‚ÇΩ ${value}`.replace(/\B(?=(\d{3})+(?!\d))/g, ',')}
                />
              </Form.Item>
            </Col>
          </Row>

          <Form.Item
            name="markup_percent"
            label="–ù–∞—Ü–µ–Ω–∫–∞ (%)"
          >
            <InputNumber
              style={{ width: '100%' }}
              min={0}
              max={100}
              precision={2}
              placeholder="0.00"
              formatter={value => `${value}%`}
            />
          </Form.Item>

          <Form.Item
            name="group_id"
            label="–ì—Ä—É–ø–ø–∞"
          >
            <Select placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É" allowClear>
              {groupsWithCosts
                .filter(g => g.id !== 'ungrouped')
                .map(group => (
                  <Option key={group.id} value={group.id}>{group.name}</Option>
                ))}
            </Select>
          </Form.Item>

          <Form.Item
            name="notes"
            label="–ü—Ä–∏–º–µ—á–∞–Ω–∏—è"
          >
            <Input.TextArea rows={3} placeholder="–ü—Ä–∏–º–µ—á–∞–Ω–∏—è" />
          </Form.Item>

          <Form.Item
            name="is_included"
            label="–í–∫–ª—é—á–µ–Ω–æ –≤ —Ä–∞—Å—á–µ—Ç"
            valuePropName="checked"
          >
            <Select>
              <Option value={true}>–í–∫–ª—é—á–µ–Ω–æ</Option>
              <Option value={false}>–ò—Å–∫–ª—é—á–µ–Ω–æ</Option>
            </Select>
          </Form.Item>
        </Form>
      </Drawer>

      {/* Add Cost Modal */}
      <Modal
        title="–î–æ–±–∞–≤–∏—Ç—å –∑–∞—Ç—Ä–∞—Ç—ã –≤ —Ç–µ–Ω–¥–µ—Ä"
        open={addCostModalVisible}
        onCancel={() => {
          setAddCostModalVisible(false);
          addCostForm.resetFields();
        }}
        onOk={() => addCostForm.submit()}
        width={700}
        confirmLoading={addCostMutation.isPending}
      >
        <Form
          form={addCostForm}
          layout="vertical"
          onFinish={handleAddCost}
        >
          <Form.Item
            name="cost_ids"
            label="–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞—Ç—Ä–∞—Ç—ã"
            rules={[{ required: true, message: '–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –ø–æ–∑–∏—Ü–∏—é' }]}
          >
            <Select
              mode="multiple"
              placeholder="–ù–∞—á–Ω–∏—Ç–µ –≤–≤–æ–¥–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ –∫–æ–¥"
              showSearch
              filterOption={(input, option) =>
                (option?.label as string)?.toLowerCase().includes(input.toLowerCase())
              }
              options={availableCosts.map(cost => ({
                value: cost.id,
                label: `${cost.code} - ${cost.name} (${cost.unit})`
              }))}
            />
          </Form.Item>

          <Row gutter={16}>
            <Col span={8}>
              <Form.Item
                name="quantity"
                label="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"
                initialValue={1}
                rules={[{ required: true, message: '–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ' }]}
              >
                <InputNumber
                  style={{ width: '100%' }}
                  min={0}
                  precision={3}
                  placeholder="0.000"
                />
              </Form.Item>
            </Col>
            <Col span={8}>
              <Form.Item
                name="unit_price"
                label="–¶–µ–Ω–∞ –∑–∞ –µ–¥–∏–Ω–∏—Ü—É"
                rules={[{ required: true, message: '–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É' }]}
              >
                <InputNumber
                  style={{ width: '100%' }}
                  min={0}
                  precision={2}
                  placeholder="0.00"
                  formatter={value => `‚ÇΩ ${value}`.replace(/\B(?=(\d{3})+(?!\d))/g, ',')}
                />
              </Form.Item>
            </Col>
            <Col span={8}>
              <Form.Item
                name="markup_percent"
                label="–ù–∞—Ü–µ–Ω–∫–∞ (%)"
                initialValue={0}
              >
                <InputNumber
                  style={{ width: '100%' }}
                  min={0}
                  max={100}
                  precision={2}
                  placeholder="0.00"
                  formatter={value => `${value}%`}
                />
              </Form.Item>
            </Col>
          </Row>

          <Form.Item
            name="group_id"
            label="–ì—Ä—É–ø–ø–∞"
          >
            <Select placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É" allowClear>
              {groupsWithCosts
                .filter(g => g.id !== 'ungrouped')
                .map(group => (
                  <Option key={group.id} value={group.id}>{group.name}</Option>
                ))}
            </Select>
          </Form.Item>
        </Form>
      </Modal>

      {/* Create Group Modal */}
      <Modal
        title="–°–æ–∑–¥–∞—Ç—å –≥—Ä—É–ø–ø—É –∑–∞—Ç—Ä–∞—Ç"
        open={groupModalVisible}
        onCancel={() => {
          setGroupModalVisible(false);
          groupForm.resetFields();
        }}
        onOk={() => groupForm.submit()}
        confirmLoading={createGroupMutation.isPending}
      >
        <Form
          form={groupForm}
          layout="vertical"
          onFinish={(values) => createGroupMutation.mutate(values)}
        >
          <Form.Item
            name="name"
            label="–ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã"
            rules={[{ required: true, message: '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã' }]}
          >
            <Input placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ú–∞—Ç–µ—Ä–∏–∞–ª—ã" />
          </Form.Item>

          <Form.Item
            name="description"
            label="–û–ø–∏—Å–∞–Ω–∏–µ"
          >
            <Input.TextArea rows={3} placeholder="–û–ø–∏—Å–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã" />
          </Form.Item>

          <Form.Item
            name="sort_order"
            label="–ü–æ—Ä—è–¥–æ–∫ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏"
            initialValue={0}
          >
            <InputNumber style={{ width: '100%' }} min={0} />
          </Form.Item>
        </Form>
      </Modal>

      {/* Import Modal */}
      <ImportTenderCostsModal
        visible={importModalVisible}
        tenderId={tenderId}
        onClose={() => setImportModalVisible(false)}
        onImport={handleImport}
        groups={groupsWithCosts.filter(g => g.id !== 'ungrouped')}
      />
    </div>
  );
};