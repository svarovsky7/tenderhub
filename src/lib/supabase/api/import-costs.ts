// API –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –∑–∞—Ç—Ä–∞—Ç –Ω–∞ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ
import { supabase } from '../client';

export interface ImportRow {
  orderNum: number | null;      // –°—Ç–æ–ª–±–µ—Ü 1: ‚Ññ
  categoryName: string | null;  // –°—Ç–æ–ª–±–µ—Ü 2: –ö–∞—Ç–µ–≥–æ—Ä–∏—è
  categoryUnit: string | null;  // –°—Ç–æ–ª–±–µ—Ü 3: –ï–¥.–∏–∑–º. –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  detailName: string | null;    // –°—Ç–æ–ª–±–µ—Ü 4: –í–∏–¥ –∑–∞—Ç—Ä–∞—Ç
  detailUnit: string | null;    // –°—Ç–æ–ª–±–µ—Ü 5: –ï–¥.–∏–∑–º. –¥–µ—Ç–∞–ª–∏
  locationName: string | null;  // –°—Ç–æ–ª–±–µ—Ü 6: –õ–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è
}

export interface ImportResult {
  success: number;
  failed: number;
  errors: string[];
  categoriesCreated: number;
  detailsCreated: number;
  locationsCreated: number;
}

// –ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∏–∑ Excel –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
export async function importConstructionCosts(rows: ImportRow[]): Promise<ImportResult> {
  console.log('üöÄ [importConstructionCosts] Starting import with', rows.length, 'rows');
  console.log('üìã First 3 rows received:', rows.slice(0, 3));
  
  const result: ImportResult = {
    success: 0,
    failed: 0,
    errors: [],
    categoriesCreated: 0,
    detailsCreated: 0,
    locationsCreated: 0
  };

  // 1. –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏
  console.log('üì° Loading reference data...');
  
  const [locationsRes, categoriesRes, detailsRes] = await Promise.all([
    supabase.from('location').select('*'),
    supabase.from('cost_categories').select('*'),
    supabase.from('detail_cost_categories').select('*')
  ]);

  const locations = locationsRes.data || [];
  const categories = categoriesRes.data || [];
  const details = detailsRes.data || [];

  console.log('‚úÖ Loaded:', {
    locations: locations.length,
    categories: categories.length,
    details: details.length
  });

  // –ö–∞—Ä—Ç—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
  const categoryMap = new Map<string, string>(); // name -> id
  const locationMap = new Map<string, string>(); // name -> id

  // –ó–∞–ø–æ–ª–Ω—è–µ–º –∫–∞—Ä—Ç—ã —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
  categories.forEach(c => {
    if (c.name) categoryMap.set(c.name, c.id);
  });
  
  locations.forEach(l => {
    const keys = [];
    if (l.country) keys.push(l.country);
    if (l.region) keys.push(l.region);
    if (l.city) keys.push(l.city);
    const locationKey = keys.join(', ');
    if (locationKey) locationMap.set(locationKey, l.id);
    
    // –¢–∞–∫–∂–µ —Å–æ–∑–¥–∞–µ–º –∫–ª—é—á–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ –æ—Ç–¥–µ–ª—å–Ω—ã–º –ø–æ–ª—è–º
    if (l.country) locationMap.set(l.country, l.id);
    if (l.city) locationMap.set(l.city, l.id);
  });

  // 2. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ñ–∞–π–ª–∞
  console.log('üìã Analyzing file structure...');
  
  // –í—ã–≤–æ–¥–∏–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
  console.log('üìä First 10 rows for debugging:');
  rows.slice(0, 10).forEach((row, i) => {
    console.log(`Row ${i + 1}:`, {
      col1_num: row.orderNum,
      col2_category: row.categoryName,
      col3_catUnit: row.categoryUnit,
      col4_detail: row.detailName,
      col5_detUnit: row.detailUnit,
      col6_location: row.locationName
    });
  });

  // 3. –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –∏–º–ø–æ—Ä—Ç–∞
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ —Ñ–∞–π–ª–µ
  const hasCategories = rows.some(row => row.categoryName && row.categoryName.trim() && row.categoryName !== '–ö–∞—Ç–µ–≥–æ—Ä–∏—è' && row.categoryName !== '–ö–∞—Ç–µ–≥–æ—Ä–∏—è –∑–∞—Ç—Ä–∞—Ç');
  
  console.log('üìä File analysis:', {
    hasCategories,
    totalRows: rows.length,
    rowsWithDetails: rows.filter(r => r.detailName && r.detailName.trim()).length,
    rowsWithLocations: rows.filter(r => r.locationName && r.locationName.trim()).length
  });
  
  if (!hasCategories) {
    console.log('‚ö†Ô∏è No categories found in file. Creating default category.');
    
    // –°–æ–∑–¥–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    let defaultCategoryId = categoryMap.get('–û–±—â–∏–µ –∑–∞—Ç—Ä–∞—Ç—ã');
    
    if (!defaultCategoryId) {
      const insertResult = await supabase
        .from('cost_categories')
        .insert({
          name: '–û–±—â–∏–µ –∑–∞—Ç—Ä–∞—Ç—ã',
          description: '–ö–∞—Ç–µ–≥–æ—Ä–∏—è –¥–ª—è –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞—Ç—Ä–∞—Ç',
          unit: null
        });
      
      let newCategory = null;
      let catError = insertResult.error;
      
      if (!catError) {
        const selectResult = await supabase
          .from('cost_categories')
          .select('*')
          .eq('name', '–û–±—â–∏–µ –∑–∞—Ç—Ä–∞—Ç—ã')
          .limit(1);
        
        if (selectResult.data && selectResult.data.length > 0) {
          newCategory = selectResult.data[0];
        }
        catError = selectResult.error;
      }
        
      if (newCategory) {
        defaultCategoryId = newCategory.id;
        categoryMap.set('–û–±—â–∏–µ –∑–∞—Ç—Ä–∞—Ç—ã', newCategory.id);
        result.categoriesCreated++;
        console.log('‚úÖ Created default category: –û–±—â–∏–µ –∑–∞—Ç—Ä–∞—Ç—ã');
      }
    }
    
    // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ –¥–µ—Ç–∞–ª–∏ –≤ –¥–µ—Ñ–æ–ª—Ç–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    for (let i = 0; i < rows.length; i++) {
      const row = rows[i];
      
      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
      if (row.detailName === '–í–∏–¥ –∑–∞—Ç—Ä–∞—Ç' || (!row.detailName && !row.categoryName)) {
        continue;
      }
      
      // –ï—Å–ª–∏ –µ—Å—Ç—å –¥–µ—Ç–∞–ª—å, –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –µ—ë
      if (row.detailName && row.detailName.trim() && defaultCategoryId) {
        await processDetail(row, i, defaultCategoryId, '–û–±—â–∏–µ –∑–∞—Ç—Ä–∞—Ç—ã', 
          details, locations, locationMap, result);
      }
    }
  } else {
    // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
    let currentCategoryId: string | null = null;
    let currentCategoryName: string | null = null;
    
    console.log('üìã Processing with categories...');
    
    for (let i = 0; i < rows.length; i++) {
      const row = rows[i];
      
      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
      if (row.categoryName === '–ö–∞—Ç–µ–≥–æ—Ä–∏—è' || row.categoryName === '–ö–∞—Ç–µ–≥–æ—Ä–∏—è –∑–∞—Ç—Ä–∞—Ç' || 
          row.detailName === '–í–∏–¥ –∑–∞—Ç—Ä–∞—Ç') {
        console.log(`‚è≠Ô∏è Skipping header row ${i + 1}`);
        continue;
      }
      
      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
      if (!row.categoryName && !row.detailName && !row.locationName) {
        continue;
      }
      
      try {
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é (–µ—Å–ª–∏ –µ—Å—Ç—å)
        if (row.categoryName && row.categoryName.trim()) {
          currentCategoryName = row.categoryName.trim();
          currentCategoryId = categoryMap.get(currentCategoryName) || null;
          
          console.log(`üìÇ Row ${i + 1} has category: ${currentCategoryName}`);
          
          if (!currentCategoryId) {
            console.log(`üîç Creating new category: ${currentCategoryName}`);
            
            // –°–æ–∑–¥–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
            console.log(`üìù Attempting to create category:`, {
              name: currentCategoryName,
              description: row.categoryUnit ? `–ï–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è: ${row.categoryUnit}` : null
            });
            
            const insertResult = await supabase
              .from('cost_categories')
              .insert({
                name: currentCategoryName,
                unit: row.categoryUnit || null,
                description: null
              });
            
            console.log(`üì¶ Insert result:`, insertResult);
            
            let newCategory = null;
            let catError = insertResult.error;
            
            // –ï—Å–ª–∏ –≤—Å—Ç–∞–≤–∫–∞ —É—Å–ø–µ—à–Ω–∞, –ø–æ–ª—É—á–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω—É—é –∑–∞–ø–∏—Å—å
            if (!catError) {
              const selectResult = await supabase
                .from('cost_categories')
                .select('*')
                .eq('name', currentCategoryName)
                .limit(1);
              
              console.log(`üì¶ Select result:`, selectResult);
              
              // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –∏–∑ –º–∞—Å—Å–∏–≤–∞
              if (selectResult.data && selectResult.data.length > 0) {
                newCategory = selectResult.data[0];
              }
              catError = selectResult.error;
            }
              
            console.log(`üì¶ Category creation result:`, { data: newCategory, error: catError });
              
            if (catError) {
              console.error(`‚ùå Error creating category:`, catError);
              
              // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –∏–∑-–∑–∞ –¥—É–±–ª–∏–∫–∞—Ç–∞, –ø–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é
              const { data: existingCats } = await supabase
                .from('cost_categories')
                .select('*')
                .eq('name', currentCategoryName)
                .limit(1);
                
              if (existingCats && existingCats.length > 0) {
                const existingCat = existingCats[0];
                currentCategoryId = existingCat.id;
                categoryMap.set(currentCategoryName, existingCat.id);
                console.log(`‚úÖ Found existing category: ${currentCategoryName} (ID: ${existingCat.id})`);
              } else {
                result.errors.push(`–°—Ç—Ä–æ–∫–∞ ${i + 1}: –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é ${currentCategoryName}`);
                currentCategoryId = null;
                continue;
              }
            } else if (newCategory) {
              currentCategoryId = newCategory.id;
              categoryMap.set(currentCategoryName, newCategory.id);
              categories.push(newCategory);
              result.categoriesCreated++;
              console.log(`‚úÖ Created category: ${currentCategoryName} (ID: ${currentCategoryId})`);
            }
          } else {
            console.log(`üìÇ Using existing category: ${currentCategoryName} (ID: ${currentCategoryId})`);
          }
          
          // –í–ê–ñ–ù–û: –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ categoryId —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
          console.log(`üìå Current categoryId after processing: ${currentCategoryId}`);
          
          // –ï—Å–ª–∏ –≤ —ç—Ç–æ–π –∂–µ —Å—Ç—Ä–æ–∫–µ –Ω–µ—Ç –¥–µ—Ç–∞–ª–∏, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–æ–∫–µ
          if (!row.detailName || !row.detailName.trim()) {
            result.success++;
            continue;
          }
        }
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª—å (–µ—Å–ª–∏ –µ—Å—Ç—å)
        if (row.detailName && row.detailName.trim()) {
          console.log(`üìù Row ${i + 1} has detail: ${row.detailName.trim()}, categoryId: ${currentCategoryId}`);
          
          // –ï—Å–ª–∏ –Ω–µ—Ç —Ç–µ–∫—É—â–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –ø—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–µ—Ñ–æ–ª—Ç–Ω—É—é
          if (!currentCategoryId || !currentCategoryName) {
            // –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –Ω–∞—Ö–æ–¥–∏–º –¥–µ—Ñ–æ–ª—Ç–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
            let defaultCategoryId = categoryMap.get('–û–±—â–∏–µ –∑–∞—Ç—Ä–∞—Ç—ã');
            
            if (!defaultCategoryId) {
              const insertResult = await supabase
                .from('cost_categories')
                .insert({
                  name: '–û–±—â–∏–µ –∑–∞—Ç—Ä–∞—Ç—ã',
                  description: '–ö–∞—Ç–µ–≥–æ—Ä–∏—è –¥–ª—è –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞—Ç—Ä–∞—Ç',
                  unit: null
                });
              
              let newCategory = null;
              if (!insertResult.error) {
                const selectResult = await supabase
                  .from('cost_categories')
                  .select('*')
                  .eq('name', '–û–±—â–∏–µ –∑–∞—Ç—Ä–∞—Ç—ã')
                  .limit(1);
                
                if (selectResult.data && selectResult.data.length > 0) {
                  newCategory = selectResult.data[0];
                }
              }
                
              if (newCategory) {
                defaultCategoryId = newCategory.id;
                categoryMap.set('–û–±—â–∏–µ –∑–∞—Ç—Ä–∞—Ç—ã', newCategory.id);
                result.categoriesCreated++;
                console.log('‚úÖ Created default category: –û–±—â–∏–µ –∑–∞—Ç—Ä–∞—Ç—ã');
              }
            }
            
            if (defaultCategoryId) {
              currentCategoryId = defaultCategoryId;
              currentCategoryName = '–û–±—â–∏–µ –∑–∞—Ç—Ä–∞—Ç—ã';
              console.log(`üìÇ Using default category for detail: ${row.detailName}`);
            } else {
              console.error(`‚ùå Cannot create detail without category: ${row.detailName}`);
              result.errors.push(`–°—Ç—Ä–æ–∫–∞ ${i + 1}: –î–µ—Ç–∞–ª—å "${row.detailName}" –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω–∞ –±–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏`);
              result.failed++;
              continue;
            }
          }
          
          await processDetail(row, i, currentCategoryId, currentCategoryName, 
            details, locations, locationMap, result);
        }
        
      } catch (error: any) {
        console.error(`‚ùå Error processing row ${i + 1}:`, error);
        result.failed++;
        result.errors.push(`–°—Ç—Ä–æ–∫–∞ ${i + 1}: ${error.message}`);
      }
    }
  }

  console.log('‚úÖ [importConstructionCosts] Import complete:', result);
  return result;
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–µ—Ç–∞–ª–∏
async function processDetail(
  row: ImportRow,
  rowIndex: number,
  categoryId: string,
  categoryName: string,
  details: any[],
  locations: any[],
  locationMap: Map<string, string>,
  result: ImportResult
) {
  console.log(`üìã [processDetail] Called for row ${rowIndex + 1}:`, {
    detailName: row.detailName,
    detailUnit: row.detailUnit,
    locationName: row.locationName,
    categoryId,
    categoryName
  });
  
  const detailName = row.detailName!.trim();
  const detailUnit = row.detailUnit ? row.detailUnit.trim() : null;
  
  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏—é —Å–Ω–∞—á–∞–ª–∞, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å location_id
  let locationId = null;
  if (row.locationName && row.locationName.trim()) {
    const locationName = row.locationName.trim();
    
    // –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞–∑–æ–±—Ä–∞—Ç—å —Å—Ç—Ä–æ–∫—É –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏
    const locationParts = locationName.split(',').map(s => s.trim());
    const locationData: any = {};
    
    if (locationParts.length === 1) {
      // –ï—Å–ª–∏ –æ–¥–Ω–∞ —á–∞—Å—Ç—å - —Å—á–∏—Ç–∞–µ–º —ç—Ç–æ —Å—Ç—Ä–∞–Ω–æ–π
      locationData.country = locationParts[0];
    } else if (locationParts.length === 2) {
      // –ï—Å–ª–∏ –¥–≤–µ —á–∞—Å—Ç–∏ - –≥–æ—Ä–æ–¥ –∏ —Å—Ç—Ä–∞–Ω–∞
      locationData.city = locationParts[0];
      locationData.country = locationParts[1];
    } else if (locationParts.length >= 3) {
      // –ï—Å–ª–∏ —Ç—Ä–∏ —á–∞—Å—Ç–∏ - –≥–æ—Ä–æ–¥, —Ä–µ–≥–∏–æ–Ω, —Å—Ç—Ä–∞–Ω–∞
      locationData.city = locationParts[0];
      locationData.region = locationParts[1];
      locationData.country = locationParts[2];
    }
    
    // –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏—é
    locationId = locationMap.get(locationName);
    
    if (!locationId) {
      console.log(`üìç Creating new location: ${locationName}`);
        
        const insertResult = await supabase
          .from('location')
          .insert(locationData);
          
        let newLocation = null;
        let locError = insertResult.error;
        
        if (!locError) {
          const selectResult = await supabase
            .from('location')
            .select('*')
            .or(`country.eq.${locationData.country || null},city.eq.${locationData.city || null}`)
            .limit(1);
          
          if (selectResult.data && selectResult.data.length > 0) {
            newLocation = selectResult.data[0];
          }
          locError = selectResult.error;
        }
          
        if (!locError && newLocation) {
          locationId = newLocation.id;
          locationMap.set(locationName, newLocation.id);
          locations.push(newLocation);
          result.locationsCreated++;
          console.log(`‚úÖ Created location: ${locationName} (ID: ${locationId})`);
        } else {
          console.error(`‚ùå Error creating location:`, locError);
        }
    } else {
      console.log(`üìç Using existing location: ${locationName} (ID: ${locationId})`);
    }
  }
  
  // –ï—Å–ª–∏ location_id –Ω–µ –Ω–∞–π–¥–µ–Ω - —Å–æ–∑–¥–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—É—é –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏—é
  if (!locationId) {
    let defaultLocation = locations.find(l => l.country === '–ù–µ —É–∫–∞–∑–∞–Ω–æ');
    
    if (!defaultLocation) {
      const insertResult = await supabase
        .from('location')
        .insert({
          country: '–ù–µ —É–∫–∞–∑–∞–Ω–æ'
        });
        
      let newLoc = null;
      if (!insertResult.error) {
        const selectResult = await supabase
          .from('location')
          .select('*')
          .eq('country', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
          .limit(1);
        
        if (selectResult.data && selectResult.data.length > 0) {
          newLoc = selectResult.data[0];
        }
      }
        
      if (newLoc) {
        defaultLocation = newLoc;
        locations.push(newLoc);
        locationMap.set('–ù–µ —É–∫–∞–∑–∞–Ω–æ', newLoc.id);
        locationId = newLoc.id;
        console.log(`‚úÖ Created default location`);
      }
    } else {
      locationId = defaultLocation.id;
    }
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –¥–µ—Ç–∞–ª—å —Å —Ç–∞–∫–∏–º –∂–µ –∏–º–µ–Ω–µ–º, –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π –ò –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–µ–π
  const existingDetail = details.find(d => 
    d.name === detailName && 
    d.cost_category_id === categoryId &&
    d.location_id === locationId
  );
  
  console.log(`üîç Checking for existing detail:`, {
    detailName,
    detailUnit,
    locationId,
    existingDetail: !!existingDetail,
    totalExistingDetails: details.length
  });
  
  if (!existingDetail) {
    console.log(`üîç Processing NEW detail: ${detailName} for category: ${categoryName}`);
    
    // –°–æ–∑–¥–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    console.log(`üì¶ Creating detail: ${detailName} for category ${categoryName} (ID: ${categoryId})`);
    
    console.log(`üìù Inserting detail with data:`, {
      cost_category_id: categoryId,
      name: detailName,
      unit: detailUnit,
      location_id: locationId,
      unit_cost: null
    });
    
    const insertResult = await supabase
      .from('detail_cost_categories')
      .insert({
        cost_category_id: categoryId,
        name: detailName,
        unit: detailUnit,
        location_id: locationId,
        unit_cost: null
      });
    
    console.log(`üì¶ Detail insert result:`, insertResult);
    
    let newDetail = null;
    let detError = insertResult.error;
    
    if (!detError) {
      const selectResult = await supabase
        .from('detail_cost_categories')
        .select('*')
        .eq('cost_category_id', categoryId)
        .eq('name', detailName)
        .limit(1);
      
      console.log(`üì¶ Detail select result:`, selectResult);
      
      if (selectResult.data && selectResult.data.length > 0) {
        newDetail = selectResult.data[0];
      }
      detError = selectResult.error;
    }
      
    if (detError) {
      console.error(`‚ùå Error creating detail:`, detError);
      result.errors.push(`–°—Ç—Ä–æ–∫–∞ ${rowIndex + 1}: –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –¥–µ—Ç–∞–ª—å ${detailName}: ${detError.message}`);
      result.failed++;
    } else if (newDetail) {
      details.push(newDetail);
      result.detailsCreated++;
      result.success++;
      console.log(`‚úÖ Created detail: ${detailName} with unit: ${detailUnit}`);
    }
  } else {
    console.log(`‚è≠Ô∏è Detail already exists: ${detailName} with location ID: ${locationId}`);
    result.success++;
  }
}