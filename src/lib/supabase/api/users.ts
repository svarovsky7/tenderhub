// API –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
import { supabase } from '../client';
import type { UserRole } from '../../../types/auth.types';

export interface UserProfile {
  id: string;
  email: string;
  full_name: string;
  role: UserRole;
  created_at: string;
  updated_at: string;
  last_sign_in_at: string | null;
}

export interface UpdateRoleResult {
  success: boolean;
  user_id?: string;
  full_name?: string;
  old_role?: UserRole;
  new_role?: UserRole;
  updated_at?: string;
  error?: string;
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–∏—Å—Ç–µ–º—ã
 */
export async function getAllUsers() {
  console.log('üöÄ [getAllUsers] Fetching all users');

  try {
    const { data, error } = await supabase.rpc('get_all_users');

    if (error) {
      console.error('‚ùå [getAllUsers] Error:', error);
      return { data: null, error };
    }

    console.log('‚úÖ [getAllUsers] Loaded:', data?.length || 0, 'users');
    return { data: data as UserProfile[], error: null };
  } catch (err: any) {
    console.error('‚ùå [getAllUsers] Exception:', err);
    return { data: null, error: err };
  }
}

/**
 * –û–±–Ω–æ–≤–∏—Ç—å —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
export async function updateUserRole(userId: string, newRole: UserRole) {
  console.log('üöÄ [updateUserRole] Updating role:', { userId, newRole });

  try {
    const { data, error } = await supabase.rpc('update_user_role', {
      p_user_id: userId,
      p_new_role: newRole
    });

    if (error) {
      console.error('‚ùå [updateUserRole] Error:', error);
      return { data: null, error };
    }

    const result = data as UpdateRoleResult;

    if (!result.success) {
      console.error('‚ùå [updateUserRole] Function returned error:', result.error);
      return { data: null, error: { message: result.error } };
    }

    console.log('‚úÖ [updateUserRole] Success:', result);
    return { data: result, error: null };
  } catch (err: any) {
    console.error('‚ùå [updateUserRole] Exception:', err);
    return { data: null, error: err };
  }
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID
 */
export async function getUserProfile(userId: string) {
  console.log('üöÄ [getUserProfile] Fetching profile for:', userId);

  try {
    const { data, error } = await supabase
      .from('profiles')
      .select('*')
      .eq('id', userId)
      .single();

    if (error) {
      console.error('‚ùå [getUserProfile] Error:', error);
      return { data: null, error };
    }

    console.log('‚úÖ [getUserProfile] Loaded:', data);
    return { data, error: null };
  } catch (err: any) {
    console.error('‚ùå [getUserProfile] Exception:', err);
    return { data: null, error: err };
  }
}

/**
 * –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∏–º—è)
 */
export async function updateUserProfile(userId: string, fullName: string) {
  console.log('üöÄ [updateUserProfile] Updating profile:', { userId, fullName });

  try {
    const { data, error } = await supabase
      .from('profiles')
      .update({ full_name: fullName })
      .eq('id', userId)
      .select()
      .single();

    if (error) {
      console.error('‚ùå [updateUserProfile] Error:', error);
      return { data: null, error };
    }

    console.log('‚úÖ [updateUserProfile] Updated:', data);
    return { data, error: null };
  } catch (err: any) {
    console.error('‚ùå [updateUserProfile] Exception:', err);
    return { data: null, error: err };
  }
}

/**
 * –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ –æ–±—ã—á–Ω—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
 * Note: –¢—Ä–µ–±—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ auto-confirm email –≤ Supabase Dashboard
 */
export async function createUser(email: string, password: string, fullName: string, role: UserRole) {
  console.log('üöÄ [createUser] Creating user:', { email, fullName, role });

  try {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —á–µ—Ä–µ–∑ signUp
    // –í–ê–ñ–ù–û: –¢—Ä–µ–±—É–µ—Ç –æ—Ç–∫–ª—é—á–µ–Ω–∏—è "Confirm email" –≤ Supabase Dashboard
    const { data: authData, error: authError } = await supabase.auth.signUp({
      email,
      password,
      options: {
        data: {
          full_name: fullName,
          role: role
        }
      }
    });

    if (authError) {
      console.error('‚ùå [createUser] Auth error:', authError);
      console.error('‚ùå [createUser] Auth error details:', JSON.stringify(authError, null, 2));
      return { data: null, error: authError };
    }

    if (!authData.user) {
      console.error('‚ùå [createUser] No user data returned');
      return { data: null, error: { message: 'Failed to create user' } };
    }

    console.log('‚úÖ [createUser] User created:', authData.user.id);

    // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –≤—Ä—É—á–Ω—É—é (—Ç–∞–∫ –∫–∞–∫ –Ω–µ—Ç —Ç—Ä–∏–≥–≥–µ—Ä–∞)
    console.log('üìù [createUser] Creating profile manually');
    const { data: profile, error: profileError } = await supabase
      .from('profiles')
      .insert({
        id: authData.user.id,
        full_name: fullName,
        role: role,
        created_at: authData.user.created_at,
        updated_at: new Date().toISOString()
      })
      .select()
      .single();

    if (profileError) {
      console.error('‚ùå [createUser] Profile creation error:', profileError);
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ auth, –¥–∞–∂–µ –µ—Å–ª–∏ –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ —Å–æ–∑–¥–∞–Ω
      return {
        data: {
          id: authData.user.id,
          email: authData.user.email!,
          full_name: fullName,
          role: role,
          created_at: authData.user.created_at,
          updated_at: new Date().toISOString(),
          last_sign_in_at: null
        } as UserProfile,
        error: null
      };
    }

    console.log('‚úÖ [createUser] Success with profile:', profile);
    return {
      data: {
        ...profile,
        email: authData.user.email!,
        last_sign_in_at: null
      } as UserProfile,
      error: null
    };
  } catch (err: any) {
    console.error('‚ùå [createUser] Exception:', err);
    return { data: null, error: err };
  }
}

/**
 * –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (DANGER: —É–¥–∞–ª—è–µ—Ç –∏–∑ auth.users –∏ profiles cascade)
 * Note: Requires admin privileges
 */
export async function deleteUser(userId: string) {
  console.log('üöÄ [deleteUser] Deleting user:', userId);

  try {
    // Note: This requires admin privileges in Supabase
    // In production, you should use admin API or service_role key
    const { error } = await supabase.auth.admin.deleteUser(userId);

    if (error) {
      console.error('‚ùå [deleteUser] Error:', error);
      return { error };
    }

    console.log('‚úÖ [deleteUser] Deleted user:', userId);
    return { error: null };
  } catch (err: any) {
    console.error('‚ùå [deleteUser] Exception:', err);
    return { error: err };
  }
}