import { supabase } from '../client';
import { handleSupabaseError } from './utils';
import type {
  CostCategory,
  DetailCostCategory,
  Location,
  CategoryLocationMapping,
  CreateCostCategoryInput,
  CreateDetailCostCategoryInput,
  CreateLocationInput,
  CreateCategoryLocationMappingInput,
  ImportCostRow,
  ParsedImportData,
  ImportResult
} from '../types/new-cost-structure';

export const costStructureApiFixed = {
  /**
   * –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Excel —Ñ–∞–π–ª–∞
   * –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å—Ç–æ–ª–±—Ü–æ–≤:
   * 1-3: –ö–∞—Ç–µ–≥–æ—Ä–∏—è (–∫–æ–¥, –Ω–∞–∑–≤–∞–Ω–∏–µ, –æ–ø–∏—Å–∞–Ω–∏–µ)
   * 4-5: –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è (–∫–æ–¥, –Ω–∞–∑–≤–∞–Ω–∏–µ)
   * 6: –õ–æ–∫–∞—Ü–∏—è (–Ω–∞–∑–≤–∞–Ω–∏–µ)
   * 7-10: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, —Ü–µ–Ω–∞, –µ–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è –∏ —Ç.–¥.)
   */
  parseImportData(rows: ImportCostRow[]): ParsedImportData {
    console.log('üöÄ [parseImportData] Parsing rows:', rows.length);
    
    const categories = new Map<string, CreateCostCategoryInput>();
    const detailCategories = new Map<string, CreateDetailCostCategoryInput & { 
      rowNumber: number;
      categoryCode: string; // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–¥ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —Å–≤—è–∑—ã–≤–∞–Ω–∏—è
    }>();
    const locations = new Map<string, CreateLocationInput>();
    const mappings: ParsedImportData['mappings'] = [];
    
    // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —Å–≤—è–∑—ã–≤–∞–Ω–∏—è
    let currentCategoryCode: string | null = null;
    
    rows.forEach((row, index) => {
      console.log(`üìù Processing row ${index + 1}:`, {
        category: `${row.categoryCode} - ${row.categoryName}`,
        detail: `${row.detailCode} - ${row.detailName}`,
        location: `${row.locationCode} - ${row.locationName}`
      });
      
      // 1. –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (—Å—Ç–æ–ª–±—Ü—ã 1-3)
      if (row.categoryCode && row.categoryName) {
        currentCategoryCode = row.categoryCode;
        if (!categories.has(row.categoryCode)) {
          categories.set(row.categoryCode, {
            code: row.categoryCode,
            name: row.categoryName,
            description: row.categoryDescription || undefined,
            sort_order: categories.size,
            is_active: true
          });
          console.log(`‚úÖ Category added: ${row.categoryName}`);
        }
      }
      
      // 2. –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏ (—Å—Ç–æ–ª–±—Ü—ã 4-5) - –ø—Ä–∏–≤—è–∑–∫–∞ –∫ —Ç–µ–∫—É—â–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
      if (row.detailCode && row.detailName && currentCategoryCode) {
        const detailKey = `${currentCategoryCode}_${row.detailCode}`;
        if (!detailCategories.has(detailKey)) {
          detailCategories.set(detailKey, {
            category_id: '', // –ë—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
            code: row.detailCode,
            name: row.detailName,
            unit: row.detailUnit || '—à—Ç',
            base_price: row.detailPrice || 0,
            description: undefined,
            sort_order: detailCategories.size,
            is_active: true,
            rowNumber: row.rowNumber,
            categoryCode: currentCategoryCode // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–¥ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
          });
          console.log(`‚úÖ Detail added: ${row.detailName} (category: ${currentCategoryCode})`);
        }
      }
      
      // 3. –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–æ–∫–∞—Ü–∏–∏ (—Å—Ç–æ–ª–±–µ—Ü 6)
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–∫ –∫–æ–¥, –µ—Å–ª–∏ –∫–æ–¥ –Ω–µ —É–∫–∞–∑–∞–Ω
      const locationCode = row.locationCode || row.locationName;
      if (locationCode && row.locationName) {
        if (!locations.has(locationCode)) {
          locations.set(locationCode, {
            code: locationCode,
            name: row.locationName,
            description: undefined,
            parent_id: undefined,
            sort_order: locations.size,
            level: 1,
            is_active: true
          });
          console.log(`‚úÖ Location added: ${row.locationName}`);
        }
      }
      
      // 4. –°–æ–∑–¥–∞–Ω–∏–µ —Å–≤—è–∑–∏ (–∫–∞–∂–¥–∞—è —Å—Ç—Ä–æ–∫–∞ —Å –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–µ–π –∏ –ª–æ–∫–∞—Ü–∏–µ–π = —Å–≤—è–∑—å)
      if (row.detailCode && row.detailName && row.locationName && currentCategoryCode) {
        const mapping = {
          rowNumber: row.rowNumber,
          categoryCode: currentCategoryCode,
          detailCategoryCode: row.detailCode,
          detailCategoryName: row.detailName,
          locationCode: locationCode,
          locationName: row.locationName,
          quantity: row.quantity || 1,
          unitPrice: row.unitPrice || row.detailPrice || 0,
          discount: row.discount || 0
        };
        mappings.push(mapping);
        console.log(`üîó Mapping created: ${row.detailName} -> ${row.locationName}`);
      }
    });
    
    console.log('‚úÖ [parseImportData] Summary:', {
      categories: categories.size,
      detailCategories: detailCategories.size,
      locations: locations.size,
      mappings: mappings.length
    });
    
    return { categories, detailCategories, locations, mappings };
  },

  /**
   * –ò–º–ø–æ—Ä—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∑–∞—Ç—Ä–∞—Ç –∏–∑ Excel
   */
  async importCostStructure(
    rows: ImportCostRow[], 
    onProgress?: (progress: number, message: string) => void
  ): Promise<ImportResult> {
    console.log('üöÄ [importCostStructure] Starting import with rows:', rows.length);
    
    const result: ImportResult = {
      success: false,
      categoriesCreated: 0,
      detailCategoriesCreated: 0,
      locationsCreated: 0,
      mappingsCreated: 0,
      errors: []
    };
    
    try {
      onProgress?.(10, '–ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö...');
      
      // –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö
      const parsedData = this.parseImportData(rows);
      
      onProgress?.(20, `–°–æ–∑–¥–∞–Ω–∏–µ ${parsedData.categories.size} –∫–∞—Ç–µ–≥–æ—Ä–∏–π...`);
      
      // –®–∞–≥ 1: –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
      const categoryIdMap = new Map<string, string>();
      if (parsedData.categories.size > 0) {
        const categoriesArray = Array.from(parsedData.categories.values());
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º UPSERT –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
        const { data: createdCategories, error } = await supabase
          .from('cost_categories')
          .upsert(categoriesArray, { 
            onConflict: 'code',
            ignoreDuplicates: false 
          })
          .select();
        
        if (error) throw error;
        
        result.categoriesCreated = createdCategories?.length || 0;
        
        // –°–æ–∑–¥–∞–µ–º –º–∞–ø–ø–∏–Ω–≥ –∫–æ–¥ -> id
        createdCategories?.forEach(cat => {
          categoryIdMap.set(cat.code, cat.id);
          console.log(`üìÅ Category created: ${cat.name} (${cat.id})`);
        });
      }
      
      onProgress?.(40, `–°–æ–∑–¥–∞–Ω–∏–µ ${parsedData.detailCategories.size} –¥–µ—Ç–∞–ª—å–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π...`);
      
      // –®–∞–≥ 2: –°–æ–∑–¥–∞–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
      const detailIdMap = new Map<string, string>();
      if (parsedData.detailCategories.size > 0) {
        const detailCategoriesArray = Array.from(parsedData.detailCategories.values())
          .map(detail => {
            // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ –∫–æ–¥—É
            const categoryId = categoryIdMap.get(detail.categoryCode);
            if (!categoryId) {
              console.warn(`‚ö†Ô∏è Category not found for detail: ${detail.name} (category code: ${detail.categoryCode})`);
              return null;
            }
            return {
              ...detail,
              category_id: categoryId
            };
          })
          .filter(d => d !== null);
        
        if (detailCategoriesArray.length > 0) {
          const { data: createdDetails, error } = await supabase
            .from('detail_cost_categories')
            .upsert(detailCategoriesArray, { 
              onConflict: 'code',
              ignoreDuplicates: false 
            })
            .select();
          
          if (error) throw error;
          
          result.detailCategoriesCreated = createdDetails?.length || 0;
          
          // –°–æ–∑–¥–∞–µ–º –º–∞–ø–ø–∏–Ω–≥ –∫–æ–¥ -> id –∏ –∏–º—è -> id
          createdDetails?.forEach(detail => {
            detailIdMap.set(detail.code, detail.id);
            detailIdMap.set(detail.name.toLowerCase().trim(), detail.id);
            console.log(`üìã Detail created: ${detail.name} (${detail.id})`);
          });
        }
      }
      
      onProgress?.(60, `–°–æ–∑–¥–∞–Ω–∏–µ ${parsedData.locations.size} –ª–æ–∫–∞—Ü–∏–π...`);
      
      // –®–∞–≥ 3: –°–æ–∑–¥–∞–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–π
      const locationIdMap = new Map<string, string>();
      if (parsedData.locations.size > 0) {
        const locationsArray = Array.from(parsedData.locations.values());
        
        const { data: createdLocations, error } = await supabase
          .from('location')
          .upsert(locationsArray, { 
            onConflict: 'code',
            ignoreDuplicates: false 
          })
          .select();
        
        if (error) throw error;
        
        result.locationsCreated = createdLocations?.length || 0;
        
        // –°–æ–∑–¥–∞–µ–º –º–∞–ø–ø–∏–Ω–≥ –∫–æ–¥ -> id –∏ –∏–º—è -> id
        createdLocations?.forEach(loc => {
          locationIdMap.set(loc.code, loc.id);
          locationIdMap.set(loc.name.toLowerCase().trim(), loc.id);
          console.log(`üìç Location created: ${loc.name} (${loc.id})`);
        });
      }
      
      onProgress?.(80, `–°–æ–∑–¥–∞–Ω–∏–µ ${parsedData.mappings.length} —Å–≤—è–∑–µ–π...`);
      
      // –®–∞–≥ 4: –°–æ–∑–¥–∞–Ω–∏–µ —Å–≤—è–∑–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏—è-–ª–æ–∫–∞—Ü–∏—è
      if (parsedData.mappings.length > 0) {
        const mappingsToCreate = parsedData.mappings
          .map(m => {
            // –ò—â–µ–º ID –¥–µ—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            let detailId = detailIdMap.get(m.detailCategoryCode);
            if (!detailId) {
              detailId = detailIdMap.get(m.detailCategoryName.toLowerCase().trim());
            }
            
            // –ò—â–µ–º ID –ª–æ–∫–∞—Ü–∏–∏
            let locationId = locationIdMap.get(m.locationCode);
            if (!locationId) {
              locationId = locationIdMap.get(m.locationName.toLowerCase().trim());
            }
            
            if (!detailId || !locationId) {
              console.warn(`‚ö†Ô∏è Cannot create mapping: detail="${m.detailCategoryName}" (${detailId}), location="${m.locationName}" (${locationId})`);
              return null;
            }
            
            return {
              detail_category_id: detailId,
              location_id: locationId,
              quantity: m.quantity,
              unit_price: m.unitPrice,
              discount_percent: m.discount,
              is_active: true
            };
          })
          .filter(m => m !== null);
        
        console.log(`üîó Creating ${mappingsToCreate.length} mappings out of ${parsedData.mappings.length} requested`);
        
        if (mappingsToCreate.length > 0) {
          const { data: createdMappings, error } = await supabase
            .from('category_location_mapping')
            .upsert(mappingsToCreate, { 
              onConflict: 'detail_category_id,location_id',
              ignoreDuplicates: false 
            })
            .select();
          
          if (error) throw error;
          
          result.mappingsCreated = createdMappings?.length || 0;
          console.log(`‚úÖ Created ${result.mappingsCreated} mappings`);
        }
      }
      
      onProgress?.(100, '–ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!');
      result.success = true;
      
    } catch (error) {
      console.error('‚ùå [importCostStructure] Import failed:', error);
      result.errors.push(error instanceof Error ? error.message : 'Unknown error');
      onProgress?.(100, `–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: ${error instanceof Error ? error.message : 'Unknown error'}`);
    }
    
    console.log('üìä [importCostStructure] Final result:', result);
    return result;
  }
};