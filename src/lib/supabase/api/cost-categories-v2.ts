import { supabase } from '../client';
import type { Database } from '../types/database';

type CostCategory = Database['public']['Tables']['cost_categories']['Row'];
type DetailCostCategory = Database['public']['Tables']['detail_cost_categories']['Row'];
type Location = Database['public']['Tables']['location']['Row'];

export interface CostCategoryImportData {
  sortOrder: number;  // –ü–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä –∏–∑ –ø–µ—Ä–≤–æ–≥–æ —Å—Ç–æ–ª–±—Ü–∞
  categoryName: string;
  categoryUnit?: string;
  detailCategoryName: string;
  detailCategoryUnit: string;
  locationName: string;
}

// –ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ —Ñ—É–Ω–∫—Ü–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞)
export async function importCostCategoriesV2(data: CostCategoryImportData[]) {
  console.log('üöÄ [importCostCategoriesV2] called with:', data.length, 'rows');
  
  const results = {
    success: 0,
    failed: 0,
    errors: [] as string[]
  };

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç—É–ø–Ω–∞ –ª–∏ —Ñ—É–Ω–∫—Ü–∏—è import_cost_category_row
  const { data: testCall, error: testError } = await supabase.rpc('import_cost_category_row', {
    p_category_name: 'test',
    p_category_unit: null,
    p_detail_name: 'test',
    p_detail_unit: '—à—Ç',
    p_location_name: 'test'
  });

  const useDatabaseFunction = !testError || testError.code !== 'PGRST202';
  console.log('üîç Using database function:', useDatabaseFunction);

  if (useDatabaseFunction) {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
    for (const row of data) {
      try {
        console.log('üîÑ Processing row via DB function:', row);
        
        const { data: result, error } = await supabase.rpc('import_cost_category_row', {
          p_category_name: row.categoryName,
          p_category_unit: row.categoryUnit || null,
          p_detail_name: row.detailCategoryName,
          p_detail_unit: row.detailCategoryUnit,
          p_location_name: row.locationName
        });

        if (error) {
          throw error;
        }

        if (result && result.success) {
          results.success++;
          console.log('‚úÖ Row processed successfully via DB function');
        } else {
          throw new Error(result?.error || 'Unknown error');
        }
      } catch (error) {
        console.error('‚ùå Failed to process row:', error);
        results.failed++;
        const errorMessage = error instanceof Error ? error.message : String(error);
        results.errors.push(`–û—à–∏–±–∫–∞ –¥–ª—è —Å—Ç—Ä–æ–∫–∏ "${row.categoryName}": ${errorMessage}`);
      }
    }
  } else {
    // Fallback –Ω–∞ –∫–ª–∏–µ–Ω—Ç—Å–∫—É—é –ª–æ–≥–∏–∫—É
    console.log('‚ö†Ô∏è Database function not available, using client-side logic');
    
    // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ä—É—é —Ñ—É–Ω–∫—Ü–∏—é –∫–∞–∫ fallback
    const { importCostCategories } = await import('./cost-categories');
    return await importCostCategories(data);
  }

  console.log('‚úÖ [importCostCategoriesV2] completed:', results);
  return results;
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–æ–¥—É–ª—è
export { 
  getCostCategories,
  getDetailCostCategories,
  getLocations,
  exportCostCategories,
  deleteCostCategory,
  deleteDetailCostCategory,
  deleteLocation
} from './cost-categories';