import { supabase } from '../client';
import { PostgrestError } from '@supabase/supabase-js';

// –¢–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö
export interface CostNode {
  id: string;
  parent_id: string | null;
  kind: 'group' | 'item';
  name: string;
  code?: string;
  unit_id?: string;
  location_id?: string;
  sort_order: number;
  path: string;
  is_active: boolean;
  created_at: string;
  updated_at: string;
  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è UI
  children?: CostNode[];
  unit?: { id: string; code: string; title: string };
  location?: { id: string; code?: string; title?: string };
}

export interface CreateCostNodeDto {
  parent_id?: string | null;
  kind: 'group' | 'item';
  name: string;
  code?: string;
  unit_id?: string;
  location_id?: string;
  sort_order?: number;
  is_active?: boolean;
}

export interface UpdateCostNodeDto {
  parent_id?: string | null;
  name?: string;
  code?: string;
  unit_id?: string | null;
  location_id?: string | null;
  sort_order?: number;
  is_active?: boolean;
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —É–∑–ª–æ–≤ –¥–µ—Ä–µ–≤–∞
export async function getCostNodesTree(): Promise<{ data: CostNode[] | null; error: PostgrestError | null }> {
  console.log('üöÄ [getCostNodesTree] Fetching cost nodes tree');
  
  const { data, error } = await supabase
    .from('cost_nodes')
    .select(`
      *,
      unit:units(id, code, title),
      location:location(id, code, title)
    `)
    .order('path');

  if (error) {
    console.error('‚ùå [getCostNodesTree] Error:', error);
    return { data: null, error };
  }

  console.log('‚úÖ [getCostNodesTree] Fetched nodes:', data?.length);
  
  // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –ø–ª–æ—Å–∫–∏–π —Å–ø–∏—Å–æ–∫ –≤ –¥–µ—Ä–µ–≤–æ
  const tree = buildTree(data || []);
  return { data: tree, error: null };
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —É–∑–ª–æ–≤ –ø–µ—Ä–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è
export async function getRootCostNodes(): Promise<{ data: CostNode[] | null; error: PostgrestError | null }> {
  console.log('üöÄ [getRootCostNodes] Fetching root nodes');
  
  const { data, error } = await supabase
    .from('cost_nodes')
    .select(`
      *,
      unit:units(id, code, title),
      location:location(id, code, title)
    `)
    .is('parent_id', null)
    .order('sort_order');

  if (error) {
    console.error('‚ùå [getRootCostNodes] Error:', error);
    return { data: null, error };
  }

  console.log('‚úÖ [getRootCostNodes] Fetched root nodes:', data?.length);
  return { data, error: null };
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—á–µ—Ä–Ω–∏—Ö —É–∑–ª–æ–≤
export async function getChildCostNodes(parentId: string): Promise<{ data: CostNode[] | null; error: PostgrestError | null }> {
  console.log('üöÄ [getChildCostNodes] Fetching children for:', parentId);
  
  const { data, error } = await supabase
    .from('cost_nodes')
    .select(`
      *,
      unit:units(id, code, title),
      location:location(id, code, title)
    `)
    .eq('parent_id', parentId)
    .order('sort_order');

  if (error) {
    console.error('‚ùå [getChildCostNodes] Error:', error);
    return { data: null, error };
  }

  console.log('‚úÖ [getChildCostNodes] Fetched children:', data?.length);
  return { data, error: null };
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ —É–∑–ª–∞
export async function getCostNode(id: string): Promise<{ data: CostNode | null; error: PostgrestError | null }> {
  console.log('üöÄ [getCostNode] Fetching node:', id);
  
  const { data, error } = await supabase
    .from('cost_nodes')
    .select(`
      *,
      unit:units(id, code, title),
      location:location(id, code, title)
    `)
    .eq('id', id)
    .single();

  if (error) {
    console.error('‚ùå [getCostNode] Error:', error);
    return { data: null, error };
  }

  console.log('‚úÖ [getCostNode] Fetched node:', data?.name);
  return { data, error: null };
}

// –°–æ–∑–¥–∞–Ω–∏–µ —É–∑–ª–∞
export async function createCostNode(node: CreateCostNodeDto): Promise<{ data: CostNode | null; error: PostgrestError | null }> {
  console.log('üöÄ [createCostNode] Creating node:', node);
  
  const { data, error } = await supabase
    .from('cost_nodes')
    .insert({
      ...node,
      is_active: node.is_active ?? true,
      sort_order: node.sort_order ?? 100
    })
    .select(`
      *,
      unit:units(id, code, title),
      location:location(id, code, title)
    `)
    .single();

  if (error) {
    console.error('‚ùå [createCostNode] Error:', error);
    return { data: null, error };
  }

  console.log('‚úÖ [createCostNode] Created node:', data?.name);
  return { data, error: null };
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É–∑–ª–∞
export async function updateCostNode(id: string, updates: UpdateCostNodeDto): Promise<{ data: CostNode | null; error: PostgrestError | null }> {
  console.log('üöÄ [updateCostNode] Updating node:', id, updates);
  
  const { data, error } = await supabase
    .from('cost_nodes')
    .update(updates)
    .eq('id', id)
    .select(`
      *,
      unit:units(id, code, title),
      location:location(id, code, title)
    `)
    .single();

  if (error) {
    console.error('‚ùå [updateCostNode] Error:', error);
    return { data: null, error };
  }

  console.log('‚úÖ [updateCostNode] Updated node:', data?.name);
  return { data, error: null };
}

// –£–¥–∞–ª–µ–Ω–∏–µ —É–∑–ª–∞ (–∫–∞—Å–∫–∞–¥–Ω–æ —É–¥–∞–ª–∏—Ç –≤—Å–µ—Ö –ø–æ—Ç–æ–º–∫–æ–≤)
export async function deleteCostNode(id: string): Promise<{ error: PostgrestError | null }> {
  console.log('üöÄ [deleteCostNode] Deleting node:', id);
  
  const { error } = await supabase
    .from('cost_nodes')
    .delete()
    .eq('id', id);

  if (error) {
    console.error('‚ùå [deleteCostNode] Error:', error);
    return { error };
  }

  console.log('‚úÖ [deleteCostNode] Deleted node');
  return { error: null };
}

// –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ —É–∑–ª–∞
export async function moveCostNode(
  nodeId: string, 
  newParentId: string | null, 
  newSortOrder?: number
): Promise<{ data: CostNode | null; error: PostgrestError | null }> {
  console.log('üöÄ [moveCostNode] Moving node:', { nodeId, newParentId, newSortOrder });
  
  const updates: UpdateCostNodeDto = {
    parent_id: newParentId,
    ...(newSortOrder !== undefined && { sort_order: newSortOrder })
  };

  return updateCostNode(nodeId, updates);
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –µ–¥–∏–Ω–∏—Ü –∏–∑–º–µ—Ä–µ–Ω–∏—è
export async function getUnits(): Promise<{ data: any[] | null; error: PostgrestError | null }> {
  console.log('üöÄ [getUnits] Fetching units');
  
  const { data, error } = await supabase
    .from('units')
    .select('*')
    .order('title');

  if (error) {
    console.error('‚ùå [getUnits] Error:', error);
    return { data: null, error };
  }

  console.log('‚úÖ [getUnits] Fetched units:', data?.length);
  return { data, error: null };
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–π
export async function getLocations(): Promise<{ data: any[] | null; error: PostgrestError | null }> {
  console.log('üöÄ [getLocations] Fetching locations');
  
  const { data, error } = await supabase
    .from('location')
    .select('*')
    .order('title');

  if (error) {
    console.error('‚ùå [getLocations] Error:', error);
    return { data: null, error };
  }

  console.log('‚úÖ [getLocations] Fetched locations:', data?.length);
  return { data, error: null };
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –¥–µ—Ä–µ–≤–∞
function buildTree(nodes: CostNode[]): CostNode[] {
  const nodeMap = new Map<string, CostNode>();
  const rootNodes: CostNode[] = [];

  // –°–æ–∑–¥–∞–µ–º Map –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
  nodes.forEach(node => {
    nodeMap.set(node.id, { ...node, children: [] });
  });

  // –°—Ç—Ä–æ–∏–º –¥–µ—Ä–µ–≤–æ
  nodes.forEach(node => {
    const currentNode = nodeMap.get(node.id)!;
    if (node.parent_id === null) {
      rootNodes.push(currentNode);
    } else {
      const parent = nodeMap.get(node.parent_id);
      if (parent) {
        parent.children = parent.children || [];
        parent.children.push(currentNode);
      }
    }
  });

  return rootNodes;
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∫–∞—Å–∫–∞–¥–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞ –∑–∞—Ç—Ä–∞—Ç

export interface CostCategory {
  id: string;
  name: string;
  code: string | null;
  description: string | null;
}

export interface CostDetail {
  id: string;
  name: string;
  unit: string | null;
  unit_cost: number | null;
  location_id: string;
  location_name: string;
  has_single_location: boolean;
  locations?: Array<{
    id: string;
    name: string;
    detail_id: string;
    unit_cost: number | null;
  }>;
}

export interface CostLocation {
  detail_id: string;
  location_id: string;
  location_name: string;
  unit_cost: number | null;
}

/**
 * Get all cost categories for cascade selector
 */
export async function getCostCategories(): Promise<{ data: CostCategory[] | null; error: any }> {
  console.log('üöÄ [getCostCategories] Loading cost categories');
  
  try {
    const { data, error } = await supabase
      .rpc('get_cost_categories');
    
    if (error) {
      console.error('‚ùå [getCostCategories] Error:', error);
      return { data: null, error };
    }
    
    console.log('‚úÖ [getCostCategories] Success:', data?.length || 0, 'categories');
    return { data, error: null };
  } catch (err) {
    console.error('‚ùå [getCostCategories] Exception:', err);
    return { data: null, error: err };
  }
}

/**
 * Get details by category ID for cascade selector
 */
export async function getDetailsByCategory(categoryId: string): Promise<{ data: CostDetail[] | null; error: any }> {
  console.log('üöÄ [getDetailsByCategory] Loading details for category:', categoryId);
  
  try {
    const { data, error } = await supabase
      .rpc('get_details_by_category', { p_category_id: categoryId });
    
    if (error) {
      console.error('‚ùå [getDetailsByCategory] Error:', error);
      return { data: null, error };
    }
    
    // Group details by name for easier processing
    const groupedData = data?.reduce((acc: any[], item: any) => {
      const existing = acc.find((d: any) => d.name === item.name);
      if (!existing) {
        acc.push({
          ...item,
          locations: [{ 
            id: item.location_id, 
            name: item.location_name,
            detail_id: item.id,
            unit_cost: item.unit_cost
          }]
        });
      } else {
        existing.locations.push({ 
          id: item.location_id, 
          name: item.location_name,
          detail_id: item.id,
          unit_cost: item.unit_cost
        });
        existing.has_single_location = false;
      }
      return acc;
    }, []);
    
    console.log('‚úÖ [getDetailsByCategory] Success:', groupedData?.length || 0, 'unique details');
    return { data: groupedData, error: null };
  } catch (err) {
    console.error('‚ùå [getDetailsByCategory] Exception:', err);
    return { data: null, error: err };
  }
}

/**
 * Get locations by detail name and category for cascade selector
 */
export async function getLocationsByDetail(
  categoryId: string, 
  detailName: string
): Promise<{ data: CostLocation[] | null; error: any }> {
  console.log('üöÄ [getLocationsByDetail] Loading locations for:', { categoryId, detailName });
  
  try {
    const { data, error } = await supabase
      .rpc('get_locations_by_detail', { 
        p_category_id: categoryId,
        p_detail_name: detailName 
      });
    
    if (error) {
      console.error('‚ùå [getLocationsByDetail] Error:', error);
      return { data: null, error };
    }
    
    console.log('‚úÖ [getLocationsByDetail] Success:', data?.length || 0, 'locations');
    return { data, error: null };
  } catch (err) {
    console.error('‚ùå [getLocationsByDetail] Exception:', err);
    return { data: null, error: err };
  }
}

/**
 * Find cost_node_id by combination of category, detail and location
 */
export async function findCostNodeByCombination(
  categoryId: string,
  detailId: string,
  locationId: string
): Promise<{ data: string | null; error: any }> {
  console.log('üöÄ [findCostNodeByCombination] Finding cost node for:', { categoryId, detailId, locationId });
  
  try {
    const { data, error } = await supabase
      .rpc('find_cost_node_by_combination', {
        p_category_id: categoryId,
        p_detail_id: detailId,
        p_location_id: locationId
      });
    
    if (error) {
      console.error('‚ùå [findCostNodeByCombination] Error:', error);
      // If the RPC function fails, return the detail_id as fallback
      console.log('‚ö†Ô∏è Using detail_id as fallback due to error');
      return { data: detailId, error: null };
    }
    
    // If no data returned, use detail_id as fallback
    if (!data) {
      console.log('‚ö†Ô∏è No cost node found, using detail_id as fallback:', detailId);
      return { data: detailId, error: null };
    }
    
    console.log('‚úÖ [findCostNodeByCombination] Success:', data);
    return { data, error: null };
  } catch (err) {
    console.error('‚ùå [findCostNodeByCombination] Exception:', err);
    // Return detail_id as fallback on any error
    console.log('‚ö†Ô∏è Using detail_id as fallback due to exception');
    return { data: detailId, error: null };
  }
}

/**
 * Get display name for a cost node
 */
export async function getCostNodeDisplay(costNodeId: string): Promise<{ data: string | null; error: any }> {
  console.log('üöÄ [getCostNodeDisplay] Getting display name for:', costNodeId);
  
  try {
    const { data, error } = await supabase
      .rpc('get_cost_node_display', { p_cost_node_id: costNodeId });
    
    if (error) {
      console.error('‚ùå [getCostNodeDisplay] Error:', error);
      return { data: null, error };
    }
    
    console.log('‚úÖ [getCostNodeDisplay] Success:', data);
    return { data, error: null };
  } catch (err) {
    console.error('‚ùå [getCostNodeDisplay] Exception:', err);
    return { data: null, error: err };
  }
}

/**
 * Search result type for cost nodes
 */
export interface CostNodeSearchResult {
  cost_node_id: string;
  display_name: string;
  category_name: string;
  detail_name: string;
  location_name: string;
  category_id: string;
  detail_id: string;
  location_id: string;
}

/**
 * Search cost nodes by partial text match
 * Searches in category names, detail names, and location names
 */
export async function searchCostNodes(
  searchTerm: string,
  limit: number = 50
): Promise<{ data: CostNodeSearchResult[] | null; error: any }> {
  console.log('üöÄ [searchCostNodes] Searching for:', searchTerm);
  
  // Don't search if term is too short
  if (!searchTerm || searchTerm.trim().length < 2) {
    console.log('‚ö†Ô∏è [searchCostNodes] Search term too short');
    return { data: [], error: null };
  }
  
  try {
    const { data, error } = await supabase
      .rpc('search_cost_nodes', { 
        p_search_term: searchTerm.trim(),
        p_limit: limit 
      });
    
    if (error) {
      console.error('‚ùå [searchCostNodes] Error:', error);
      return { data: null, error };
    }
    
    console.log('‚úÖ [searchCostNodes] Found:', data?.length || 0, 'results');
    return { data: data || [], error: null };
  } catch (err) {
    console.error('‚ùå [searchCostNodes] Exception:', err);
    return { data: null, error: err };
  }
}

// –ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∏–∑ Excel
export async function importCostNodesFromExcel(data: any[]): Promise<{ 
  success: number; 
  failed: number; 
  errors: string[] 
}> {
  console.log('üöÄ [importCostNodesFromExcel] Importing nodes:', data.length);
  
  let success = 0;
  let failed = 0;
  const errors: string[] = [];

  for (const row of data) {
    try {
      const node: CreateCostNodeDto = {
        kind: row.type === '–ö–∞—Ç–µ–≥–æ—Ä–∏—è' ? 'group' : 'item',
        name: row.name,
        code: row.code,
        parent_id: row.parent_id || null,
        sort_order: row.sort_order || 100,
        is_active: row.is_active !== false
      };

      // –ï—Å–ª–∏ —ç—Ç–æ —ç–ª–µ–º–µ–Ω—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –µ–¥–∏–Ω–∏—Ü—É –∏–∑–º–µ—Ä–µ–Ω–∏—è –∏ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏—é
      if (node.kind === 'item') {
        if (row.unit_code) {
          // –ù–∞—Ö–æ–¥–∏–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –µ–¥–∏–Ω–∏—Ü—É –∏–∑–º–µ—Ä–µ–Ω–∏—è
          const { data: unit } = await supabase
            .from('units')
            .select('id')
            .eq('code', row.unit_code)
            .single();
          
          if (unit) {
            node.unit_id = unit.id;
          }
        }

        if (row.location_title) {
          // –ù–∞—Ö–æ–¥–∏–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏—é
          const { data: location } = await supabase
            .from('location')
            .select('id')
            .eq('title', row.location_title)
            .single();
          
          if (location) {
            node.location_id = location.id;
          }
        }
      }

      const { error } = await createCostNode(node);
      
      if (error) {
        failed++;
        errors.push(`–°—Ç—Ä–æ–∫–∞ ${row.row_number || 'unknown'}: ${error.message}`);
      } else {
        success++;
      }
    } catch (err: any) {
      failed++;
      errors.push(`–°—Ç—Ä–æ–∫–∞ ${row.row_number || 'unknown'}: ${err.message}`);
    }
  }

  console.log('‚úÖ [importCostNodesFromExcel] Import complete:', { success, failed });
  return { success, failed, errors };
}