// API –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞—Ç—Ä–∞—Ç–∞–º–∏ –Ω–∞ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ
import { supabase } from '../client';

export interface CostCategory {
  id: string;
  name: string;
  description: string | null;
  created_at: string;
}

export interface DetailCostCategory {
  id: string;
  cost_category_id: string;
  location_id: string;
  name: string;
  unit_cost: number | null;
  created_at: string;
  category?: CostCategory;
  location?: Location;
}

export interface Location {
  id: string;
  country: string | null;
  region: string | null;
  city: string | null;
  created_at: string;
}

// –ó–∞–≥—Ä—É–∑–∏—Ç—å –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å –¥–µ—Ç–∞–ª—è–º–∏
export async function getCategoriesWithDetails() {
  console.log('üöÄ [getCategoriesWithDetails] Loading categories and details');
  
  try {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    const { data: categories, error: catError } = await supabase
      .from('cost_categories')
      .select('*')
      .order('name');
      
    if (catError) {
      console.error('‚ùå Error loading categories:', catError);
      return { data: null, error: catError };
    }
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–µ—Ç–∞–ª–∏ —Å –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è–º–∏
    const { data: details, error: detError } = await supabase
      .from('detail_cost_categories')
      .select(`
        *,
        location:location_id (*)
      `)
      .order('name');
      
    if (detError) {
      console.error('‚ùå Error loading details:', detError);
      return { data: null, error: detError };
    }
    
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    const categoriesWithDetails = categories?.map(category => {
      const categoryDetails = details?.filter(d => d.cost_category_id === category.id) || [];
      return {
        ...category,
        details: categoryDetails
      };
    });
    
    console.log('‚úÖ [getCategoriesWithDetails] Loaded:', {
      categories: categories?.length || 0,
      details: details?.length || 0
    });
    
    return { data: categoriesWithDetails, error: null };
  } catch (err: any) {
    console.error('‚ùå [getCategoriesWithDetails] Error:', err);
    return { data: null, error: err };
  }
}

// –ó–∞–≥—Ä—É–∑–∏—Ç—å –≤—Å–µ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏
export async function getLocations() {
  console.log('üöÄ [getLocations] Loading locations');
  
  const { data, error } = await supabase
    .from('location')
    .select('*')
    .order('country');
    
  if (error) {
    console.error('‚ùå Error loading locations:', error);
    return { data: null, error };
  }
  
  console.log('‚úÖ [getLocations] Loaded:', data?.length || 0);
  return { data, error: null };
}

// –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
export async function createCategory(name: string, description?: string) {
  console.log('üöÄ [createCategory] Creating:', { name, description });
  
  const { data, error } = await supabase
    .from('cost_categories')
    .insert({ name, description })
    .select()
    .single();
    
  if (error) {
    console.error('‚ùå Error creating category:', error);
    return { data: null, error };
  }
  
  console.log('‚úÖ [createCategory] Created:', data);
  return { data, error: null };
}

// –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –¥–µ—Ç–∞–ª—å
export async function createDetail(categoryId: string, name: string, locationId: string, unitCost?: number) {
  console.log('üöÄ [createDetail] Creating:', { categoryId, name, locationId, unitCost });
  
  const { data, error } = await supabase
    .from('detail_cost_categories')
    .insert({
      cost_category_id: categoryId,
      name,
      location_id: locationId,
      unit_cost: unitCost
    })
    .select()
    .single();
    
  if (error) {
    console.error('‚ùå Error creating detail:', error);
    return { data: null, error };
  }
  
  console.log('‚úÖ [createDetail] Created:', data);
  return { data, error: null };
}

// –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏—é
export async function createLocation(country?: string, region?: string, city?: string) {
  console.log('üöÄ [createLocation] Creating:', { country, region, city });
  
  const { data, error } = await supabase
    .from('location')
    .insert({ country, region, city })
    .select()
    .single();
    
  if (error) {
    console.error('‚ùå Error creating location:', error);
    return { data: null, error };
  }
  
  console.log('‚úÖ [createLocation] Created:', data);
  return { data, error: null };
}

// –£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é
export async function deleteCategory(id: string) {
  console.log('üöÄ [deleteCategory] Deleting:', id);
  
  const { error } = await supabase
    .from('cost_categories')
    .delete()
    .eq('id', id);
    
  if (error) {
    console.error('‚ùå Error deleting category:', error);
    return { error };
  }
  
  console.log('‚úÖ [deleteCategory] Deleted');
  return { error: null };
}

// –£–¥–∞–ª–∏—Ç—å –¥–µ—Ç–∞–ª—å
export async function deleteDetail(id: string) {
  console.log('üöÄ [deleteDetail] Deleting:', id);
  
  const { error } = await supabase
    .from('detail_cost_categories')
    .delete()
    .eq('id', id);
    
  if (error) {
    console.error('‚ùå Error deleting detail:', error);
    return { error };
  }
  
  console.log('‚úÖ [deleteDetail] Deleted');
  return { error: null };
}

// –£–¥–∞–ª–∏—Ç—å –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏—é
export async function deleteLocation(id: string) {
  console.log('üöÄ [deleteLocation] Deleting:', id);
  
  const { error } = await supabase
    .from('location')
    .delete()
    .eq('id', id);
    
  if (error) {
    console.error('‚ùå Error deleting location:', error);
    return { error };
  }
  
  console.log('‚úÖ [deleteLocation] Deleted');
  return { error: null };
}

// –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
export async function clearAllData() {
  console.log('üöÄ [clearAllData] Clearing all data');
  
  try {
    // –£–¥–∞–ª—è–µ–º –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ –∏–∑-–∑–∞ foreign keys
    const { error: detailsError } = await supabase
      .from('detail_cost_categories')
      .delete()
      .gte('created_at', '1900-01-01');
      
    if (detailsError) {
      console.error('‚ùå Error deleting details:', detailsError);
      return { error: detailsError };
    }
    
    const { error: categoriesError } = await supabase
      .from('cost_categories')
      .delete()
      .gte('created_at', '1900-01-01');
      
    if (categoriesError) {
      console.error('‚ùå Error deleting categories:', categoriesError);
      return { error: categoriesError };
    }
    
    const { error: locationsError } = await supabase
      .from('location')
      .delete()
      .gte('created_at', '1900-01-01');
      
    if (locationsError) {
      console.error('‚ùå Error deleting locations:', locationsError);
      return { error: locationsError };
    }
    
    console.log('‚úÖ [clearAllData] All data cleared');
    return { error: null };
  } catch (err: any) {
    console.error('‚ùå [clearAllData] Error:', err);
    return { error: err };
  }
}

// –ü–æ–∏—Å–∫ –≤ detail_cost_categories –¥–ª—è CostCascadeSelector
export interface DetailCategorySearchResult {
  id: string;
  name: string;
  unit_cost: number | null;
  category_name: string;
  location_name: string;
  display_name: string;
  cost_category_id: string;
  location_id: string;
}

export async function searchDetailCategories(searchTerm: string, limit: number = 30) {
  console.log('üöÄ [searchDetailCategories] Searching:', { searchTerm, limit });
  
  try {
    // –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –¥–µ—Ç–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    const { data: detailsData, error } = await supabase
      .from('detail_cost_categories')
      .select('*')
      .ilike('name', `%${searchTerm}%`)
      .limit(limit);
      
    if (error) {
      console.error('‚ùå [searchDetailCategories] Error:', error);
      return { data: null, error };
    }
    
    console.log('üì¶ [searchDetailCategories] Raw data:', detailsData);
    
    if (!detailsData || detailsData.length === 0) {
      return { data: [], error: null };
    }
    
    // –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ IDs –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏ –ª–æ–∫–∞—Ü–∏–π
    const categoryIds = [...new Set(detailsData.map(d => d.cost_category_id).filter(Boolean))];
    const locationIds = [...new Set(detailsData.map(d => d.location_id).filter(Boolean))];
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    const categoriesMap: Record<string, string> = {};
    if (categoryIds.length > 0) {
      const { data: categories } = await supabase
        .from('cost_categories')
        .select('id, name')
        .in('id', categoryIds);
      
      if (categories) {
        categories.forEach(cat => {
          categoriesMap[cat.id] = cat.name;
        });
      }
    }
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –ª–æ–∫–∞—Ü–∏–∏
    const locationsMap: Record<string, string> = {};
    if (locationIds.length > 0) {
      const { data: locations } = await supabase
        .from('location')
        .select('id, city, region, country')
        .in('id', locationIds);
      
      if (locations) {
        locations.forEach(loc => {
          const parts = [];
          if (loc.city) parts.push(loc.city);
          if (loc.region) parts.push(loc.region);
          if (loc.country) parts.push(loc.country);
          locationsMap[loc.id] = parts.length > 0 ? parts.join(', ') : '–õ–æ–∫–∞—Ü–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω–∞';
        });
      }
    }
    
    // Transform results to match expected format
    const results: DetailCategorySearchResult[] = detailsData.map(item => {
      const categoryName = item.cost_category_id && categoriesMap[item.cost_category_id] 
        ? categoriesMap[item.cost_category_id] 
        : '–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω–∞';
      
      const locationName = item.location_id && locationsMap[item.location_id]
        ? locationsMap[item.location_id]
        : '–õ–æ–∫–∞—Ü–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω–∞';
      
      const displayName = `${categoryName} ‚Üí ${item.name} ‚Üí ${locationName}`;
      
      return {
        id: item.id,
        name: item.name,
        unit_cost: item.unit_cost,
        category_name: categoryName,
        location_name: locationName,
        display_name: displayName,
        cost_category_id: item.cost_category_id,
        location_id: item.location_id
      };
    });
    
    console.log('‚úÖ [searchDetailCategories] Found:', results.length);
    return { data: results, error: null };
  } catch (err: any) {
    console.error('‚ùå [searchDetailCategories] Error:', err);
    return { data: null, error: err };
  }
}

// –ü–æ–ª—É—á–∏—Ç—å –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è detail_cost_category_id
export async function getDetailCategoryDisplay(detailCategoryId: string) {
  console.log('üöÄ [getDetailCategoryDisplay] Loading for:', detailCategoryId);
  
  try {
    // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∑–∞–ø–∏—Å—å
    const { data: detailDataArray, error: detailError } = await supabase
      .from('detail_cost_categories')
      .select('*')
      .eq('id', detailCategoryId);
      
    if (detailError) {
      console.error('‚ùå [getDetailCategoryDisplay] Error loading detail:', detailError);
      return { data: null, error: detailError };
    }
    
    if (!detailDataArray || detailDataArray.length === 0) {
      console.log('‚ö†Ô∏è [getDetailCategoryDisplay] No data found for ID:', detailCategoryId);
      return { data: null, error: { message: 'Detail category not found' } };
    }
    
    const detailData = detailDataArray[0];
    console.log('üì¶ [getDetailCategoryDisplay] Detail data:', detailData);
    
    // –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ—Ç–¥–µ–ª—å–Ω—ã–º –∑–∞–ø—Ä–æ—Å–æ–º
    let categoryName = '–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω–∞';
    if (detailData.cost_category_id) {
      const { data: categoryDataArray } = await supabase
        .from('cost_categories')
        .select('name')
        .eq('id', detailData.cost_category_id);
      
      if (categoryDataArray && categoryDataArray.length > 0) {
        categoryName = categoryDataArray[0].name;
      }
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –ª–æ–∫–∞—Ü–∏—é –æ—Ç–¥–µ–ª—å–Ω—ã–º –∑–∞–ø—Ä–æ—Å–æ–º
    let locationName = '–õ–æ–∫–∞—Ü–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω–∞';
    if (detailData.location_id) {
      const { data: locationDataArray } = await supabase
        .from('location')
        .select('city, region, country')
        .eq('id', detailData.location_id);
      
      if (locationDataArray && locationDataArray.length > 0) {
        const locationData = locationDataArray[0];
        const locationParts = [];
        if (locationData.city) locationParts.push(locationData.city);
        if (locationData.region) locationParts.push(locationData.region);
        if (locationData.country) locationParts.push(locationData.country);
        locationName = locationParts.length > 0 ? locationParts.join(', ') : '–õ–æ–∫–∞—Ü–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω–∞';
      }
    }
    
    // Get detail name - this is the main name field
    const detailName = detailData.name || '–î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω–∞';
    
    const displayName = `${categoryName} ‚Üí ${detailName} ‚Üí ${locationName}`;
    
    console.log('‚úÖ [getDetailCategoryDisplay] Display:', displayName);
    return { data: displayName, error: null };
  } catch (err: any) {
    console.error('‚ùå [getDetailCategoryDisplay] Error:', err);
    return { data: null, error: err };
  }
}