// API –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞—Ç—Ä–∞—Ç–∞–º–∏ –Ω–∞ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ
import { supabase } from '../client';

export interface CostCategory {
  id: string;
  name: string;
  description: string | null;
  created_at: string;
}

export interface DetailCostCategory {
  id: string;
  cost_category_id: string;
  location_id: string;
  name: string;
  unit_cost: number | null;
  created_at: string;
  category?: CostCategory;
  location?: Location;
}

export interface Location {
  id: string;
  country: string | null;
  region: string | null;
  city: string | null;
  created_at: string;
}

// –ó–∞–≥—Ä—É–∑–∏—Ç—å –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å –¥–µ—Ç–∞–ª—è–º–∏
export async function getCategoriesWithDetails() {
  console.log('üöÄ [getCategoriesWithDetails] Loading categories and details');
  
  try {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    const { data: categories, error: catError } = await supabase
      .from('cost_categories')
      .select('*')
      .order('name');
      
    if (catError) {
      console.error('‚ùå Error loading categories:', catError);
      return { data: null, error: catError };
    }
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–µ—Ç–∞–ª–∏ —Å –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è–º–∏
    const { data: details, error: detError } = await supabase
      .from('detail_cost_categories')
      .select(`
        *,
        location:location_id (*)
      `)
      .order('name');
      
    if (detError) {
      console.error('‚ùå Error loading details:', detError);
      return { data: null, error: detError };
    }
    
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    const categoriesWithDetails = categories?.map(category => {
      const categoryDetails = details?.filter(d => d.cost_category_id === category.id) || [];
      return {
        ...category,
        details: categoryDetails
      };
    });
    
    console.log('‚úÖ [getCategoriesWithDetails] Loaded:', {
      categories: categories?.length || 0,
      details: details?.length || 0
    });
    
    return { data: categoriesWithDetails, error: null };
  } catch (error: any) {
    console.error('‚ùå [getCategoriesWithDetails] Error:', error);
    return { data: null, error };
  }
}

// –ó–∞–≥—Ä—É–∑–∏—Ç—å –≤—Å–µ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏
export async function getLocations() {
  console.log('üöÄ [getLocations] Loading locations');
  
  const { data, error } = await supabase
    .from('location')
    .select('*')
    .order('country', { ascending: true });
    
  if (error) {
    console.error('‚ùå Error loading locations:', error);
    return { data: null, error };
  }
  
  console.log('‚úÖ [getLocations] Loaded:', data?.length || 0);
  return { data, error: null };
}

// –£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é
export async function deleteCategory(id: string) {
  console.log('üöÄ [deleteCategory] Deleting category:', id);
  
  const { error } = await supabase
    .from('cost_categories')
    .delete()
    .eq('id', id);
    
  if (error) {
    console.error('‚ùå Error deleting category:', error);
    return { error };
  }
  
  console.log('‚úÖ [deleteCategory] Category deleted');
  return { error: null };
}

// –£–¥–∞–ª–∏—Ç—å –¥–µ—Ç–∞–ª—å
export async function deleteDetail(id: string) {
  console.log('üöÄ [deleteDetail] Deleting detail:', id);
  
  const { error } = await supabase
    .from('detail_cost_categories')
    .delete()
    .eq('id', id);
    
  if (error) {
    console.error('‚ùå Error deleting detail:', error);
    return { error };
  }
  
  console.log('‚úÖ [deleteDetail] Detail deleted');
  return { error: null };
}

// –£–¥–∞–ª–∏—Ç—å –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏—é
export async function deleteLocation(id: string) {
  console.log('üöÄ [deleteLocation] Deleting location:', id);
  
  const { error } = await supabase
    .from('location')
    .delete()
    .eq('id', id);
    
  if (error) {
    console.error('‚ùå Error deleting location:', error);
    return { error };
  }
  
  console.log('‚úÖ [deleteLocation] Location deleted');
  return { error: null };
}

// –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
export async function clearAllData() {
  console.log('üöÄ [clearAllData] Clearing all data');
  
  try {
    // –£–¥–∞–ª—è–µ–º –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ –∏–∑-–∑–∞ foreign keys
    const { error: detailError } = await supabase
      .from('detail_cost_categories')
      .delete()
      .neq('id', '00000000-0000-0000-0000-000000000000'); // –£–¥–∞–ª—è–µ–º –≤—Å–µ
      
    if (detailError) {
      console.error('‚ùå Error clearing details:', detailError);
      return { error: detailError };
    }
    
    const { error: catError } = await supabase
      .from('cost_categories')
      .delete()
      .neq('id', '00000000-0000-0000-0000-000000000000'); // –£–¥–∞–ª—è–µ–º –≤—Å–µ
      
    if (catError) {
      console.error('‚ùå Error clearing categories:', catError);
      return { error: catError };
    }
    
    const { error: locError } = await supabase
      .from('location')
      .delete()
      .neq('id', '00000000-0000-0000-0000-000000000000'); // –£–¥–∞–ª—è–µ–º –≤—Å–µ
      
    if (locError) {
      console.error('‚ùå Error clearing locations:', locError);
      return { error: locError };
    }
    
    console.log('‚úÖ [clearAllData] All data cleared');
    return { error: null };
  } catch (error: any) {
    console.error('‚ùå [clearAllData] Error:', error);
    return { error };
  }
}