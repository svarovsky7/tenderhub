import { supabase } from '../client';

// –ü—Ä–æ—Å—Ç—ã–µ —Ç–∏–ø—ã –¥–ª—è —à–∞–±–ª–æ–Ω–æ–≤
export interface WorkMaterialTemplate {
  id?: string;
  template_name: string;
  template_description?: string;
  work_library_id?: string;
  sub_work_library_id?: string;
  material_library_id?: string;
  sub_material_library_id?: string;
  is_linked_to_work: boolean;
  notes?: string;
  created_at?: string;
  updated_at?: string;
}

export const workMaterialTemplatesSimpleApi = {
  /**
   * –ü–æ–ª—É—á–∏—Ç—å –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π work ID –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
   */
  async getFirstWorkId() {
    try {
      console.log('üîç Getting first work ID...');
      const { data, error } = await supabase
        .from('works_library')
        .select('id')
        .limit(1);

      console.log('üì¶ Works query result:', { data, error });

      if (error || !data || data.length === 0) {
        console.warn('‚ö†Ô∏è No works found, using null');
        return null;
      }

      const workId = data[0].id;
      console.log('‚úÖ Got work ID:', workId);
      return workId;
    } catch (error) {
      console.warn('‚ö†Ô∏è Error getting work ID:', error);
      return null;
    }
  },

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π material ID –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
   */
  async getFirstMaterialId() {
    try {
      console.log('üîç Getting first material ID...');
      const { data, error } = await supabase
        .from('materials_library')
        .select('id')
        .limit(1);

      console.log('üì¶ Materials query result:', { data, error });

      if (error || !data || data.length === 0) {
        console.warn('‚ö†Ô∏è No materials found, using null');
        return null;
      }

      const materialId = data[0].id;
      console.log('‚úÖ Got material ID:', materialId);
      return materialId;
    } catch (error) {
      console.warn('‚ö†Ô∏è Error getting material ID:', error);
      return null;
    }
  },

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —à–∞–±–ª–æ–Ω–æ–≤ (–±–∞–∑–æ–≤–∞—è –≤–µ—Ä—Å–∏—è)
   */
  async getAll() {
    console.log('üöÄ Getting all template items (simple)');

    try {
      const { data, error } = await supabase
        .from('work_material_templates')
        .select('*')
        .order('template_name', { ascending: true })
        .order('created_at', { ascending: true });

      console.log('üì¶ Templates fetched:', { count: data?.length, error });

      if (error) {
        console.error('‚ùå Failed to fetch templates:', error);
        return { error: error.message };
      }

      console.log('‚úÖ Templates retrieved successfully');
      return { data: data || [] };
    } catch (error) {
      console.error('üí• Exception in getAll:', error);
      return { error: error instanceof Error ? error.message : 'Unknown error' };
    }
  },

  /**
   * –°–æ–∑–¥–∞—Ç—å —ç–ª–µ–º–µ–Ω—Ç —à–∞–±–ª–æ–Ω–∞
   */
  async create(template: WorkMaterialTemplate) {
    console.log('üöÄ Creating template item:', template);

    // Validate required fields
    if (!template.template_name?.trim()) {
      console.error('‚ùå template_name is required');
      return { error: '–ù–∞–∑–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ' };
    }

    // –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ ID –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    const workId = await this.getFirstWorkId();
    const materialId = await this.getFirstMaterialId();

    if (!workId) {
      return { error: '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–∞–±–æ—Ç –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫–µ. –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ —Ä–∞–±–æ—Ç—ã.' };
    }

    if (!materialId) {
      return { error: '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫–µ. –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã.' };
    }

    console.log('‚ÑπÔ∏è Using first available IDs:', { workId, materialId });

    try {
      const { data, error } = await supabase
        .from('work_material_templates')
        .insert({
          template_name: template.template_name.trim(),
          template_description: template.template_description?.trim() || null,
          work_library_id: template.work_library_id || workId,
          sub_work_library_id: template.sub_work_library_id || null,
          material_library_id: template.material_library_id || materialId,
          sub_material_library_id: template.sub_material_library_id || null,
          conversion_coefficient: template.conversion_coefficient || 1.0,
          is_linked_to_work: template.is_linked_to_work !== false,
          notes: template.notes?.trim() || null
        })
        .select()
        .single();

      console.log('üì¶ Create result:', { data, error });

      if (error) {
        console.error('‚ùå Failed to create template item:', error);
        return { error: error.message };
      }

      console.log('‚úÖ Template item created successfully');
      return { data };
    } catch (error) {
      console.error('üí• Exception in create:', error);
      return { error: error instanceof Error ? error.message : 'Unknown error' };
    }
  }
};