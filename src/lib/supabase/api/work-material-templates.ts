import { supabase } from '../client';
import type { Database } from '../types/database';

// –¢–∏–ø—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —à–∞–±–ª–æ–Ω–∞–º–∏
export interface WorkMaterialTemplate {
  id?: string;
  template_name: string;
  template_description?: string;
  work_library_id?: string;
  sub_work_library_id?: string;
  material_library_id?: string;
  sub_material_library_id?: string;
  is_linked_to_work: boolean;
  notes?: string;
  created_at?: string;
  updated_at?: string;
}

export interface WorkMaterialTemplateDetailed extends WorkMaterialTemplate {
  work_name?: string;
  work_unit?: string;
  work_description?: string;
  material_name?: string;
  material_unit?: string;
  material_description?: string;
  material_consumption_coefficient?: number;
}

export interface TemplateGroup {
  template_name: string;
  template_description?: string;
  work_data?: {
    id: string;
    name: string;
    description?: string;
    unit: string;
    type: 'work' | 'sub_work';
    unit_rate?: number;
    currency_type?: string;
    category?: string;
  };
  materials: Array<{
    id: string;
    name: string;
    description?: string;
    unit: string;
    type: 'material' | 'sub_material' | 'work' | 'sub_work';
    category?: string;
    material_type?: string;
    consumption_coefficient?: number;
    unit_rate?: number;
    currency_type?: string;
    delivery_price_type?: string;
    delivery_amount?: number;
    quote_link?: string;
    conversion_coefficient: number;
    is_linked_to_work: boolean;
    notes?: string;
    template_item_id?: string;
    template_name?: string;
    template_description?: string;
    work_library_id?: string;
    sub_work_library_id?: string;
    material_library_id?: string;
    sub_material_library_id?: string;
    work_library?: any;
    sub_work_library?: any;
    material_library?: any;
    sub_material_library?: any;
    linked_work_id?: string;
    linked_work_name?: string;
  }>;
  created_at?: string;
  updated_at?: string;
}

export const workMaterialTemplatesApi = {
  /**
   * –°–æ–∑–¥–∞—Ç—å —ç–ª–µ–º–µ–Ω—Ç —à–∞–±–ª–æ–Ω–∞
   */
  async createTemplateItem(template: WorkMaterialTemplate) {
    console.log('üöÄ Creating template item - full data:', template);
    console.log('üöÄ Creating template item - summary:', {
      template_name: template.template_name,
      work_library_id: template.work_library_id,
      sub_work_library_id: template.sub_work_library_id,
      material_library_id: template.material_library_id,
      sub_material_library_id: template.sub_material_library_id,
      is_linked_to_work: template.is_linked_to_work
    });

    // Validate required fields
    if (!template.template_name?.trim()) {
      console.error('‚ùå template_name is required');
      return { error: '–ù–∞–∑–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ' };
    }

    const hasWork = template.work_library_id || template.sub_work_library_id;
    const hasMaterial = template.material_library_id || template.sub_material_library_id;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã —á—Ç–æ-—Ç–æ
    if (!hasWork && !hasMaterial) {
      console.error('‚ùå Either work or material is required');
      return { error: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å —Ä–∞–±–æ—Ç—É –∏–ª–∏ –º–∞—Ç–µ—Ä–∏–∞–ª' };
    }

    // –î–ª—è –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ —Ä–∞–±–æ—Ç–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞
    if (hasMaterial && template.is_linked_to_work && !hasWork) {
      console.error('‚ùå Work is required for linked material');
      return { error: '–î–ª—è –ø—Ä–∏–≤—è–∑–∞–Ω–Ω–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å —Ä–∞–±–æ—Ç—É' };
    }

    // –í–ê–ñ–ù–û: is_linked_to_work –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å true –¢–û–õ–¨–ö–û –µ—Å–ª–∏ –µ—Å—Ç—å –ò —Ä–∞–±–æ—Ç–∞ –ò –º–∞—Ç–µ—Ä–∏–∞–ª
    const actualIsLinkedToWork = !!(hasWork && hasMaterial);

    console.log('‚úÖ Validation passed:', {
      hasWork,
      hasMaterial,
      is_linked_to_work: template.is_linked_to_work
    });

    try {
      // –ï—Å–ª–∏ –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –º–∞—Ç–µ—Ä–∏–∞–ª, –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–π –∫ —Ä–∞–±–æ—Ç–µ, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–ø–∏—Å–∏
      if (hasMaterial && template.is_linked_to_work && hasWork) {
        console.log('üîç Checking for existing work record to update...');

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –∑–∞–ø–∏—Å—å —Å —ç—Ç–æ–π —Ä–∞–±–æ—Ç–æ–π –≤ —ç—Ç–æ–º —à–∞–±–ª–æ–Ω–µ
        let query = supabase
          .from('work_material_templates')
          .select('*')
          .eq('template_name', template.template_name);

        // –î–æ–±–∞–≤–ª—è–µ–º —É—Å–ª–æ–≤–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã - –∏—â–µ–º –∑–∞–ø–∏—Å–∏ —Å —ç—Ç–æ–π —Ä–∞–±–æ—Ç–æ–π
        if (template.work_library_id) {
          query = query.eq('work_library_id', template.work_library_id);
        } else if (template.sub_work_library_id) {
          query = query.eq('sub_work_library_id', template.sub_work_library_id);
        }

        const { data: existingRecords, error: checkError } = await query;

        if (checkError) {
          console.error('‚ùå Failed to check existing records:', checkError);
          return { error: checkError.message };
        }

        console.log('üîç Existing records for template:', {
          template_name: template.template_name,
          work_library_id: template.work_library_id,
          sub_work_library_id: template.sub_work_library_id,
          material_library_id: template.material_library_id,
          sub_material_library_id: template.sub_material_library_id,
          records: existingRecords?.map(r => ({
            id: r.id,
            work_library_id: r.work_library_id,
            sub_work_library_id: r.sub_work_library_id,
            material_library_id: r.material_library_id,
            sub_material_library_id: r.sub_material_library_id
          }))
        });

        // –ò—â–µ–º –∑–∞–ø–∏—Å—å —Å —Ç–æ–π –∂–µ —Ä–∞–±–æ—Ç–æ–π –Ω–æ –±–µ–∑ –º–∞—Ç–µ—Ä–∏–∞–ª–∞
        const recordToUpdate = existingRecords?.find(r => {
          const sameWork = (template.work_library_id && r.work_library_id === template.work_library_id) ||
                          (template.sub_work_library_id && r.sub_work_library_id === template.sub_work_library_id);
          const noMaterial = !r.material_library_id && !r.sub_material_library_id;

          console.log('üîç Checking record for update:', {
            record_id: r.id,
            sameWork,
            noMaterial,
            shouldUpdate: sameWork && noMaterial
          });

          return sameWork && noMaterial;
        });

        console.log('üìù Record to update found:', recordToUpdate ? `Yes, ID: ${recordToUpdate.id}` : 'No, will create new');

        if (recordToUpdate) {
          // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –∑–∞–ø–∏—Å—å —Ç–æ–ª—å–∫–æ —Å —Ä–∞–±–æ—Ç–æ–π
          console.log('üóëÔ∏è Deleting old work-only record:', recordToUpdate.id);

          const { error: deleteError } = await supabase
            .from('work_material_templates')
            .delete()
            .eq('id', recordToUpdate.id);

          if (deleteError) {
            console.error('‚ùå Failed to delete old record:', deleteError);
            return { error: deleteError.message };
          }

          console.log('‚úÖ Old work-only record deleted');

          // –¢–µ–ø–µ—Ä—å —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å —Å —Ä–∞–±–æ—Ç–æ–π –∏ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–º
          // (–ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –Ω–∏–∂–µ, –≤—ã–ø–æ–ª–Ω–∏—Ç—Å—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è)
        }
      }

      // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –∑–∞–ø–∏—Å—å –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–ª–∏ –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª –∏–ª–∏ —Ä–∞–±–æ—Ç–∞ - —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
      const insertData = {
        template_name: template.template_name.trim(),
        template_description: template.template_description?.trim() || null,
        work_library_id: template.work_library_id || null,
        sub_work_library_id: template.sub_work_library_id || null,
        material_library_id: template.material_library_id || null,
        sub_material_library_id: template.sub_material_library_id || null,
        is_linked_to_work: actualIsLinkedToWork,  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        notes: template.notes?.trim() || null
      };

      console.log('üìù Data to insert into DB:', JSON.stringify(insertData, null, 2));
      console.log('üîç Type check - is_linked_to_work:', {
        value: insertData.is_linked_to_work,
        type: typeof insertData.is_linked_to_work
      });

      const { data, error } = await supabase
        .from('work_material_templates')
        .insert(insertData)
        .select()
        .single();

      console.log('üì¶ Create template item result:', { data, error });

      if (error) {
        console.error('‚ùå Failed to create template item:', error);
        return { error: error.message };
      }

      console.log('‚úÖ Template item created successfully');
      return { data };
    } catch (error) {
      console.error('üí• Exception in createTemplateItem:', error);
      return { error: error instanceof Error ? error.message : 'Unknown error' };
    }
  },

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —à–∞–±–ª–æ–Ω—ã (—Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ template_name)
   */
  async getTemplates() {
    console.log('üöÄ Getting all templates');

    try {
      // First get templates with library data
      const { data: templatesData, error: templatesError } = await supabase
        .from('work_material_templates')
        .select(`
          *,
          work_library:works_library!work_library_id(
            id, name_id, item_type, unit_rate, currency_type
          ),
          sub_work_library:works_library!sub_work_library_id(
            id, name_id, item_type, unit_rate, currency_type
          ),
          material_library:materials_library!material_library_id(
            id, name_id, item_type, material_type, consumption_coefficient, conversion_coefficient, unit_rate, currency_type, delivery_price_type, delivery_amount, quote_link
          ),
          sub_material_library:materials_library!sub_material_library_id(
            id, name_id, item_type, material_type, consumption_coefficient, conversion_coefficient, unit_rate, currency_type, delivery_price_type, delivery_amount, quote_link
          )
        `)
        .order('template_name', { ascending: true })
        .order('created_at', { ascending: true });

      if (templatesError) {
        console.error('‚ùå Failed to fetch templates:', templatesError);
        return { error: templatesError.message };
      }

      // Now get all name_ids to fetch names
      const workNameIds = new Set<string>();
      const materialNameIds = new Set<string>();

      templatesData?.forEach((item: any) => {
        if (item.work_library?.name_id) workNameIds.add(item.work_library.name_id);
        if (item.sub_work_library?.name_id) workNameIds.add(item.sub_work_library.name_id);
        if (item.material_library?.name_id) materialNameIds.add(item.material_library.name_id);
        if (item.sub_material_library?.name_id) materialNameIds.add(item.sub_material_library.name_id);
      });

      // Fetch work names
      const workNamesMap = new Map<string, { name: string; unit: string }>();
      if (workNameIds.size > 0) {
        const { data: workNames } = await supabase
          .from('work_names')
          .select('id, name, unit')
          .in('id', Array.from(workNameIds));

        workNames?.forEach(n => workNamesMap.set(n.id, { name: n.name, unit: n.unit }));
      }

      // Fetch material names
      const materialNamesMap = new Map<string, { name: string; unit: string }>();
      if (materialNameIds.size > 0) {
        const { data: materialNames } = await supabase
          .from('material_names')
          .select('id, name, unit')
          .in('id', Array.from(materialNameIds));

        materialNames?.forEach(n => materialNamesMap.set(n.id, { name: n.name, unit: n.unit }));
      }

      // Combine data with names
      const data = templatesData?.map((item: any) => ({
        ...item,
        work_name: item.work_library?.name_id ? workNamesMap.get(item.work_library.name_id) : null,
        sub_work_name: item.sub_work_library?.name_id ? workNamesMap.get(item.sub_work_library.name_id) : null,
        material_name: item.material_library?.name_id ? materialNamesMap.get(item.material_library.name_id) : null,
        sub_material_name: item.sub_material_library?.name_id ? materialNamesMap.get(item.sub_material_library.name_id) : null
      }));

      const error = null;

      console.log('üì¶ Templates fetched:', { count: data?.length, error });

      if (error) {
        console.error('‚ùå Failed to fetch templates:', error);
        return { error: error.message };
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ "–ù–æ–≤—ã–π —à–∞–±–ª–æ–Ω"
      const newTemplateItems = data?.filter((item: any) => item.template_name === '–ù–æ–≤—ã–π —à–∞–±–ª–æ–Ω');
      console.log('üîç "–ù–æ–≤—ã–π —à–∞–±–ª–æ–Ω" items:', newTemplateItems);

      // –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–∞–∫, —á—Ç–æ–±—ã —Å–Ω–∞—á–∞–ª–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–ª–∏—Å—å –∑–∞–ø–∏—Å–∏ —Ç–æ–ª—å–∫–æ —Å —Ä–∞–±–æ—Ç–∞–º–∏
      // –≠—Ç–æ –≤–∞–∂–Ω–æ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–æ—Ä—è–¥–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –º–∞—Å—Å–∏–≤ materials
      const sortedData = data?.sort((a: any, b: any) => {
        const aHasWork = !!(a.work_library_id || a.sub_work_library_id);
        const aHasMaterial = !!(a.material_library_id || a.sub_material_library_id);
        const bHasWork = !!(b.work_library_id || b.sub_work_library_id);
        const bHasMaterial = !!(b.material_library_id || b.sub_material_library_id);

        // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: —Ç–æ–ª—å–∫–æ —Ä–∞–±–æ—Ç–∞ > —Ä–∞–±–æ—Ç–∞+–º–∞—Ç–µ—Ä–∏–∞–ª > —Ç–æ–ª—å–∫–æ –º–∞—Ç–µ—Ä–∏–∞–ª
        const aPriority = aHasWork && !aHasMaterial ? 0 : (aHasWork && aHasMaterial ? 1 : 2);
        const bPriority = bHasWork && !bHasMaterial ? 0 : (bHasWork && bHasMaterial ? 1 : 2);

        if (aPriority !== bPriority) return aPriority - bPriority;

        // –ï—Å–ª–∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –æ–¥–∏–Ω–∞–∫–æ–≤—ã–π, —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∏–º–µ–Ω–∏ —à–∞–±–ª–æ–Ω–∞ –∏ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è
        if (a.template_name !== b.template_name) {
          return a.template_name.localeCompare(b.template_name);
        }
        return new Date(a.created_at).getTime() - new Date(b.created_at).getTime();
      });

      // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ template_name
      const grouped = new Map<string, TemplateGroup>();

      sortedData?.forEach((item: any) => {
        const templateName = item.template_name;

        console.log('üìã Processing template item:', {
          id: item.id,
          template_name: item.template_name,
          work_library_id: item.work_library_id,
          sub_work_library_id: item.sub_work_library_id,
          material_library_id: item.material_library_id,
          sub_material_library_id: item.sub_material_library_id,
          is_linked: item.is_linked_to_work,
          work_name: item.work_name?.name || item.sub_work_name?.name || 'NO WORK',
          material_name: item.material_name?.name || item.sub_material_name?.name || 'NO MATERIAL'
        });

        // –°–æ–∑–¥–∞–µ–º –≥—Ä—É–ø–ø—É –µ—Å–ª–∏ –µ–µ –µ—â–µ –Ω–µ—Ç
        if (!grouped.has(templateName)) {
          grouped.set(templateName, {
            template_name: templateName,
            template_description: item.template_description,
            work_data: undefined, // –ë—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –ø–æ–∑–∂–µ
            materials: [],
            created_at: item.created_at,
            updated_at: item.updated_at
          });
        }

        const group = grouped.get(templateName)!;

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–∞–±–æ—Ç—ã –∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∞
        const workLibrary = item.work_library || item.sub_work_library;
        const workNameData = item.work_name || item.sub_work_name;
        const materialLibrary = item.material_library || item.sub_material_library;
        const materialNameData = item.material_name || item.sub_material_name;

        // –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –∏ –∏–º–µ–Ω–∏
        const workData = workLibrary ? { ...workLibrary, name: workNameData?.name, unit: workNameData?.unit } : null;
        const materialData = materialLibrary ? { ...materialLibrary, name: materialNameData?.name, unit: materialNameData?.unit } : null;

        console.log('üìä Extracted data:', {
          hasWork: !!workData,
          hasMaterial: !!materialData,
          workName: workData?.name,
          materialName: materialData?.name
        });

        // –ï—Å–ª–∏ –µ—Å—Ç—å —Ä–∞–±–æ—Ç–∞ –∏ –º–∞—Ç–µ—Ä–∏–∞–ª - —ç—Ç–æ —Å–≤—è–∑–∫–∞ (–æ–¥–Ω–∞ –∑–∞–ø–∏—Å—å –≤ –ë–î!)
        if (workData && materialData) {
          // –ù–ï –¥–æ–±–∞–≤–ª—è–µ–º —Ä–∞–±–æ—Ç—É –æ—Ç–¥–µ–ª—å–Ω–æ - —ç—Ç–æ –±—É–¥–µ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ–º
          // –í—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–≤—è–∑–∫–µ —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ –æ–¥–Ω–æ–π –∑–∞–ø–∏—Å–∏

          // –≠—Ç–∞ –∑–∞–ø–∏—Å—å –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –∏ —Ä–∞–±–æ—Ç—É –∏ –º–∞—Ç–µ—Ä–∏–∞–ª –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
          // UI –¥–æ–ª–∂–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å —ç—Ç—É —Å–≤—è–∑–∫—É
          const materialType = item.sub_material_library ? 'sub_material' : 'material';
          const workType = item.sub_work_library ? 'sub_work' : 'work';

          // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∑–∞–ø–∏—Å—å —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
          group.materials.push({
            id: materialData.id,
            name: materialData.name,
            description: undefined,
            unit: materialData.unit,
            type: materialType,
            category: undefined,
            material_type: materialData.material_type,
            consumption_coefficient: materialData.consumption_coefficient,
            unit_rate: materialData.unit_rate,
            currency_type: materialData.currency_type,
            delivery_price_type: materialData.delivery_price_type,
            delivery_amount: materialData.delivery_amount,
            quote_link: materialData.quote_link,
            conversion_coefficient: materialData?.conversion_coefficient || 1,
            is_linked_to_work: item.is_linked_to_work,
            notes: item.notes,
            template_item_id: item.id,  // –≠—Ç–æ ID –∑–∞–ø–∏—Å–∏ –≤ –ë–î –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
            template_name: item.template_name,
            template_description: item.template_description,
            work_library_id: item.work_library_id,
            sub_work_library_id: item.sub_work_library_id,
            material_library_id: item.material_library_id,
            sub_material_library_id: item.sub_material_library_id,
            work_library: item.work_library,
            sub_work_library: item.sub_work_library,
            material_library: item.material_library,
            sub_material_library: item.sub_material_library,
            // –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Ä–∞–±–æ—Ç—É –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏
            linked_work_id: workData.id,
            linked_work_name: workData.name,
            linked_work_unit: workData.unit,  // Add work unit for display
            // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∏–ø–µ —Ä–∞–±–æ—Ç—ã –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ UI
            linked_work_type: workType,
            // –§–ª–∞–≥, —á—Ç–æ —ç—Ç–∞ –∑–∞–ø–∏—Å—å —Å–æ–¥–µ—Ä–∂–∏—Ç –∏ —Ä–∞–±–æ—Ç—É –∏ –º–∞—Ç–µ—Ä–∏–∞–ª
            is_combined_record: true
          });

          // –¢–∞–∫–∂–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞–±–æ—Ç—É –µ—Å–ª–∏ –µ–µ –µ—â–µ –Ω–µ—Ç
          if (!group.work_data && item.is_linked_to_work) {
            group.work_data = {
              id: workData.id,
              name: workData.name,
              description: undefined,
              unit: workData.unit,
              type: workType,
              unit_rate: workData.unit_rate,
              currency_type: workData.currency_type,
              category: undefined
            };
          }
        }
        // –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ —Ä–∞–±–æ—Ç–∞ –±–µ–∑ –º–∞—Ç–µ—Ä–∏–∞–ª–∞
        else if (workData && !materialData) {
          const workType = item.sub_work_library ? 'sub_work' : 'work';
          // –î–ª—è —Ä–∞–±–æ—Ç –±–µ–∑ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö –∫–∞–∫ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é –∑–∞–ø–∏—Å—å –≤ materials
          // —á—Ç–æ–±—ã –æ–Ω–∏ –æ—Ç–æ–±—Ä–∞–∂–∞–ª–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü–µ
          group.materials.push({
            id: workData.id,
            name: workData.name,
            description: workData.description,
            unit: workData.unit,
            type: workType as any,
            category: workData.category,
            material_type: undefined,
            consumption_coefficient: 1,
            unit_rate: workData.unit_rate,
            currency_type: workData.currency_type,
            delivery_price_type: undefined,
            delivery_amount: undefined,
            quote_link: undefined,
            conversion_coefficient: 1,
            is_linked_to_work: false,
            notes: '–†–∞–±–æ—Ç–∞ –±–µ–∑ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤',
            template_item_id: item.id,
            template_name: item.template_name,
            template_description: item.template_description,
            work_library_id: item.work_library_id,
            sub_work_library_id: item.sub_work_library_id,
            material_library_id: null,
            sub_material_library_id: null,
            work_library: item.work_library,
            sub_work_library: item.sub_work_library,
            material_library: null,
            sub_material_library: null
          });

          // –¢–∞–∫–∂–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ work_data –µ—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–∞—è —Ä–∞–±–æ—Ç–∞
          if (!group.work_data) {
            group.work_data = {
              id: workData.id,
              name: workData.name,
              description: undefined,
              unit: workData.unit,
              type: workType,
              unit_rate: workData.unit_rate,
              currency_type: workData.currency_type,
              category: undefined
            };
          }
        }
        // –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ –º–∞—Ç–µ—Ä–∏–∞–ª –±–µ–∑ —Ä–∞–±–æ—Ç—ã
        else if (!workData && materialData) {
          const materialType = item.material_library ? 'material' : 'sub_material';
          group.materials.push({
            id: materialData.id,
            name: materialData.name,
            description: undefined,
            unit: materialData.unit,
            type: materialType,
            category: undefined,
            material_type: materialData.material_type,
            consumption_coefficient: materialData.consumption_coefficient,
            unit_rate: materialData.unit_rate,
            currency_type: materialData.currency_type,
            delivery_price_type: materialData.delivery_price_type,
            delivery_amount: materialData.delivery_amount,
            quote_link: materialData.quote_link,
            conversion_coefficient: materialData?.conversion_coefficient || 1,
            is_linked_to_work: false,
            notes: item.notes,
            template_item_id: item.id,
            template_name: item.template_name,
            template_description: item.template_description,
            work_library_id: null,
            sub_work_library_id: null,
            material_library_id: item.material_library_id,
            sub_material_library_id: item.sub_material_library_id,
            work_library: null,
            sub_work_library: null,
            material_library: item.material_library,
            sub_material_library: item.sub_material_library
          });
        }
      });

      const templates = Array.from(grouped.values());
      console.log('‚úÖ Templates grouped:', templates.length);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ "–ù–æ–≤—ã–π —à–∞–±–ª–æ–Ω" –ø–æ—Å–ª–µ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏
      const newTemplate = templates.find(t => t.template_name === '–ù–æ–≤—ã–π —à–∞–±–ª–æ–Ω');
      if (newTemplate) {
        console.log('üéØ "–ù–æ–≤—ã–π —à–∞–±–ª–æ–Ω" after grouping:', {
          name: newTemplate.template_name,
          materials_count: newTemplate.materials?.length,
          materials: newTemplate.materials?.map(m => ({
            id: m.id,
            name: m.name,
            type: m.type,
            linked_work_id: m.linked_work_id,
            linked_work_name: m.linked_work_name,
            is_linked_to_work: m.is_linked_to_work
          }))
        });
      }

      return { data: templates };
    } catch (error) {
      console.error('üí• Exception in getTemplates:', error);
      return { error: error instanceof Error ? error.message : 'Unknown error' };
    }
  },

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —à–∞–±–ª–æ–Ω–∞
   */
  async getTemplateByName(templateName: string) {
    console.log('üöÄ Getting template by name:', templateName);

    try {
      // First get templates with library data
      const { data: templatesData, error: templatesError } = await supabase
        .from('work_material_templates')
        .select(`
          *,
          work_library:works_library!work_library_id(
            id, name_id, item_type, unit_rate, currency_type
          ),
          sub_work_library:works_library!sub_work_library_id(
            id, name_id, item_type, unit_rate, currency_type
          ),
          material_library:materials_library!material_library_id(
            id, name_id, item_type, material_type, consumption_coefficient, conversion_coefficient, unit_rate, currency_type, delivery_price_type, delivery_amount, quote_link
          ),
          sub_material_library:materials_library!sub_material_library_id(
            id, name_id, item_type, material_type, consumption_coefficient, conversion_coefficient, unit_rate, currency_type, delivery_price_type, delivery_amount, quote_link
          )
        `)
        .eq('template_name', templateName)
        .order('created_at', { ascending: true });

      if (templatesError) {
        console.error('‚ùå Failed to fetch templates:', templatesError);
        return { error: templatesError.message };
      }

      console.log('üìù Raw template data:', templatesData?.map(item => ({
        id: item.id,
        is_linked_to_work: item.is_linked_to_work,
        work_library_id: item.work_library_id,
        sub_work_library_id: item.sub_work_library_id,
        material_library_id: item.material_library_id,
        sub_material_library_id: item.sub_material_library_id
      })));

      // Now get all name_ids to fetch names
      const workNameIds = new Set<string>();
      const materialNameIds = new Set<string>();

      templatesData?.forEach((item: any) => {
        if (item.work_library?.name_id) workNameIds.add(item.work_library.name_id);
        if (item.sub_work_library?.name_id) workNameIds.add(item.sub_work_library.name_id);
        if (item.material_library?.name_id) materialNameIds.add(item.material_library.name_id);
        if (item.sub_material_library?.name_id) materialNameIds.add(item.sub_material_library.name_id);
      });

      // Fetch work names
      const workNamesMap = new Map<string, { name: string; unit: string }>();
      if (workNameIds.size > 0) {
        const { data: workNames } = await supabase
          .from('work_names')
          .select('id, name, unit')
          .in('id', Array.from(workNameIds));

        workNames?.forEach(n => workNamesMap.set(n.id, { name: n.name, unit: n.unit }));
      }

      // Fetch material names
      const materialNamesMap = new Map<string, { name: string; unit: string }>();
      if (materialNameIds.size > 0) {
        const { data: materialNames } = await supabase
          .from('material_names')
          .select('id, name, unit')
          .in('id', Array.from(materialNameIds));

        materialNames?.forEach(n => materialNamesMap.set(n.id, { name: n.name, unit: n.unit }));
      }

      // Combine data with names
      const data = templatesData?.map((item: any) => ({
        ...item,
        work_name: item.work_library?.name_id ? workNamesMap.get(item.work_library.name_id) : null,
        sub_work_name: item.sub_work_library?.name_id ? workNamesMap.get(item.sub_work_library.name_id) : null,
        material_name: item.material_library?.name_id ? materialNamesMap.get(item.material_library.name_id) : null,
        sub_material_name: item.sub_material_library?.name_id ? materialNamesMap.get(item.sub_material_library.name_id) : null
      }));

      // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
      console.log('üìä Template data enriched:', data?.map(item => ({
        id: item.id,
        is_linked_to_work: item.is_linked_to_work,
        work_library_id: item.work_library_id,
        sub_work_library_id: item.sub_work_library_id,
        material_library_id: item.material_library_id,
        sub_material_library_id: item.sub_material_library_id,
        work_name: item.work_name,
        sub_work_name: item.sub_work_name,
        material_name: item.material_name,
        sub_material_name: item.sub_material_name
      })));

      const error = null;

      console.log('üì¶ Template items fetched:', { count: data?.length, error });

      if (error) {
        console.error('‚ùå Failed to fetch template:', error);
        return { error: error.message };
      }

      console.log('‚úÖ Template retrieved successfully');
      return { data };
    } catch (error) {
      console.error('üí• Exception in getTemplateByName:', error);
      return { error: error instanceof Error ? error.message : 'Unknown error' };
    }
  },

  /**
   * –†–∞–∑–¥–µ–ª–∏—Ç—å —Å–≤—è–∑–∞–Ω–Ω—É—é –∑–∞–ø–∏—Å—å –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Ä–∞–±–æ—Ç—É –∏ –º–∞—Ç–µ—Ä–∏–∞–ª
   */
  async unlinkMaterialFromWork(itemId: string) {
    console.log('üöÄ Unlinking material from work:', itemId);

    try {
      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∑–∞–ø–∏—Å—å
      const { data: currentItems, error: fetchError } = await supabase
        .from('work_material_templates')
        .select('*')
        .eq('id', itemId);

      if (fetchError || !currentItems || currentItems.length === 0) {
        console.error('‚ùå Failed to fetch item:', fetchError);
        return { error: fetchError?.message || '–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' };
      }

      // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –∏–∑ –º–∞—Å—Å–∏–≤–∞
      const currentItem = currentItems[0];
      console.log('üìã Current item data:', currentItem);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–≤—è–∑–∞–Ω–Ω–∞—è –∑–∞–ø–∏—Å—å
      const hasWork = currentItem.work_library_id || currentItem.sub_work_library_id;
      const hasMaterial = currentItem.material_library_id || currentItem.sub_material_library_id;

      console.log('üîç Checking if linked:', { hasWork, hasMaterial, work_id: currentItem.work_library_id, sub_work_id: currentItem.sub_work_library_id });

      if (!hasWork || !hasMaterial) {
        console.error('‚ùå Item is not a linked work-material pair:', {
          hasWork,
          hasMaterial,
          currentItem
        });
        return { error: '–ó–∞–ø–∏—Å—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å–≤—è–∑–∞–Ω–Ω–æ–π –ø–∞—Ä–æ–π —Ä–∞–±–æ—Ç–∞-–º–∞—Ç–µ—Ä–∏–∞–ª' };
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å - –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –º–∞—Ç–µ—Ä–∏–∞–ª
      const { error: updateError } = await supabase
        .from('work_material_templates')
        .update({
          work_library_id: null,
          sub_work_library_id: null,
          is_linked_to_work: false
        })
        .eq('id', itemId);

      if (updateError) {
        console.error('‚ùå Failed to update material record:', updateError);
        return { error: updateError.message };
      }

      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –¥–ª—è —Ä–∞–±–æ—Ç—ã
      const newWorkRecord = {
        template_name: currentItem.template_name,
        template_description: currentItem.template_description,
        work_library_id: currentItem.work_library_id,
        sub_work_library_id: currentItem.sub_work_library_id,
        material_library_id: null,
        sub_material_library_id: null,
        is_linked_to_work: false,
        notes: null
      };

      console.log('üìù Creating new work record:', newWorkRecord);

      const { data: insertData, error: insertError } = await supabase
        .from('work_material_templates')
        .insert(newWorkRecord)
        .select();

      if (insertError) {
        console.error('‚ùå Failed to create work record:', insertError);
        return { error: insertError.message };
      }

      console.log('‚úÖ New work record created:', insertData);

      console.log('‚úÖ Successfully unlinked material from work');
      return { data: null };
    } catch (error) {
      console.error('üí• Exception in unlinkMaterialFromWork:', error);
      return { error: error instanceof Error ? error.message : 'Unknown error' };
    }
  },

  /**
   * –û–±–Ω–æ–≤–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç —à–∞–±–ª–æ–Ω–∞
   */
  async updateTemplateItem(itemId: string, updates: Partial<WorkMaterialTemplate>) {
    console.log('üöÄ Updating template item:', { itemId, updates });

    try {
      const updateData: any = {};
      if (updates.template_name !== undefined) updateData.template_name = updates.template_name.trim();
      if (updates.template_description !== undefined) updateData.template_description = updates.template_description?.trim() || null;
      if (updates.work_library_id !== undefined) updateData.work_library_id = updates.work_library_id;
      if (updates.sub_work_library_id !== undefined) updateData.sub_work_library_id = updates.sub_work_library_id;
      if (updates.material_library_id !== undefined) updateData.material_library_id = updates.material_library_id;
      if (updates.sub_material_library_id !== undefined) updateData.sub_material_library_id = updates.sub_material_library_id;
      // conversion_coefficient is now in materials_library, not here
      if (updates.is_linked_to_work !== undefined) updateData.is_linked_to_work = updates.is_linked_to_work;
      if (updates.notes !== undefined) updateData.notes = updates.notes?.trim() || null;

      const { data, error } = await supabase
        .from('work_material_templates')
        .update(updateData)
        .eq('id', itemId)
        .select()
        .single();

      console.log('üì¶ Update result:', { data, error });

      if (error) {
        console.error('‚ùå Failed to update template item:', error);
        return { error: error.message };
      }

      console.log('‚úÖ Template item updated successfully');
      return { data };
    } catch (error) {
      console.error('üí• Exception in updateTemplateItem:', error);
      return { error: error instanceof Error ? error.message : 'Unknown error' };
    }
  },

  /**
   * –£–¥–∞–ª–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç —à–∞–±–ª–æ–Ω–∞
   */
  async deleteTemplateItem(itemId: string) {
    console.log('üöÄ Deleting template item:', itemId);

    try {
      const { error } = await supabase
        .from('work_material_templates')
        .delete()
        .eq('id', itemId);

      console.log('üì¶ Delete result:', { error });

      if (error) {
        console.error('‚ùå Failed to delete template item:', error);
        return { error: error.message };
      }

      console.log('‚úÖ Template item deleted successfully');
      return { data: null };
    } catch (error) {
      console.error('üí• Exception in deleteTemplateItem:', error);
      return { error: error instanceof Error ? error.message : 'Unknown error' };
    }
  },

  /**
   * –£–¥–∞–ª–∏—Ç—å –≤–µ—Å—å —à–∞–±–ª–æ–Ω (–≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º template_name)
   */
  async deleteTemplate(templateName: string) {
    console.log('üöÄ Deleting entire template:', templateName);

    try {
      const { error } = await supabase
        .from('work_material_templates')
        .delete()
        .eq('template_name', templateName);

      console.log('üì¶ Delete template result:', { error });

      if (error) {
        console.error('‚ùå Failed to delete template:', error);
        return { error: error.message };
      }

      console.log('‚úÖ Template deleted successfully');
      return { data: null };
    } catch (error) {
      console.error('üí• Exception in deleteTemplate:', error);
      return { error: error instanceof Error ? error.message : 'Unknown error' };
    }
  },

  /**
   * –î—É–±–ª–∏—Ä–æ–≤–∞—Ç—å —à–∞–±–ª–æ–Ω —Å –Ω–æ–≤—ã–º –∏–º–µ–Ω–µ–º
   */
  async duplicateTemplate(originalTemplateName: string, newTemplateName: string) {
    console.log('üöÄ Duplicating template:', { originalTemplateName, newTemplateName });

    try {
      // –ü–æ–ª—É—á–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —à–∞–±–ª–æ–Ω–∞
      const { data: originalItems, error: fetchError } = await this.getTemplateByName(originalTemplateName);

      if (fetchError) {
        return { error: fetchError };
      }

      if (!originalItems || originalItems.length === 0) {
        return { error: '–®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω' };
      }

      // –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏–∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å –Ω–æ–≤—ã–º –∏–º–µ–Ω–µ–º
      const newItems = originalItems.map((item: any) => ({
        template_name: newTemplateName.trim(),
        template_description: item.template_description,
        work_library_id: item.work_library_id,
        sub_work_library_id: item.sub_work_library_id,
        material_library_id: item.material_library_id,
        sub_material_library_id: item.sub_material_library_id,
        // conversion_coefficient is now in materials_library
        is_linked_to_work: item.is_linked_to_work,
        notes: item.notes
      }));

      const { data, error } = await supabase
        .from('work_material_templates')
        .insert(newItems)
        .select();

      console.log('üì¶ Duplicate result:', { count: data?.length, error });

      if (error) {
        console.error('‚ùå Failed to duplicate template:', error);
        return { error: error.message };
      }

      console.log('‚úÖ Template duplicated successfully');
      return { data };
    } catch (error) {
      console.error('üí• Exception in duplicateTemplate:', error);
      return { error: error instanceof Error ? error.message : 'Unknown error' };
    }
  },

  /**
   * –û–±–Ω–æ–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É –∏–∑ —à–∞–±–ª–æ–Ω–∞
   */
  async updateWorkFromTemplate(
    workId: string,
    isSubWork: boolean,
    updates: {
      name?: string;
      unit?: string;
      unit_rate?: number;
      currency_type?: string;
    }
  ) {
    console.log('üöÄ Updating work from template:', { workId, isSubWork, updates });

    try {
      const { name, unit, ...workData } = updates;

      // –ï—Å–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∏–º—è –∏–ª–∏ –µ–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è
      if (name || unit) {
        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ä–∞–±–æ—Ç—É
        const { data: currentWork, error: fetchError } = await supabase
          .from('works_library')
          .select('name_id')
          .eq('id', workId)
          .single();

        if (fetchError) {
          console.error('‚ùå Failed to fetch work:', fetchError);
          return { error: fetchError.message };
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ work_names
        if (currentWork?.name_id) {
          const nameUpdates: any = {};
          if (name) nameUpdates.name = name;
          if (unit) nameUpdates.unit = unit;

          const { error: nameError } = await supabase
            .from('work_names')
            .update(nameUpdates)
            .eq('id', currentWork.name_id);

          if (nameError) {
            console.error('‚ùå Failed to update work name:', nameError);
            return { error: nameError.message };
          }
          console.log('‚úÖ Work name updated');
        }
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ works_library
      if (Object.keys(workData).length > 0) {
        const { error: updateError } = await supabase
          .from('works_library')
          .update(workData)
          .eq('id', workId);

        if (updateError) {
          console.error('‚ùå Failed to update work library:', updateError);
          return { error: updateError.message };
        }
        console.log('‚úÖ Work library updated');
      }

      return { data: { success: true } };
    } catch (error) {
      console.error('üí• Exception in updateWorkFromTemplate:', error);
      return { error: error instanceof Error ? error.message : 'Unknown error' };
    }
  },

  /**
   * –û–±–Ω–æ–≤–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª –∏–∑ —à–∞–±–ª–æ–Ω–∞
   */
  async updateMaterialFromTemplate(
    materialId: string,
    isSubMaterial: boolean,
    updates: {
      name?: string;
      unit?: string;
      unit_rate?: number;
      currency_type?: string;
      consumption_coefficient?: number;
      conversion_coefficient?: number;
      delivery_price_type?: string;
      delivery_amount?: number;
      material_type?: string;
    }
  ) {
    console.log('üöÄ Updating material from template:', { materialId, isSubMaterial, updates });

    try {
      const { name, unit, ...materialData } = updates;

      // –ï—Å–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∏–º—è –∏–ª–∏ –µ–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è
      if (name || unit) {
        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –º–∞—Ç–µ—Ä–∏–∞–ª
        const { data: currentMaterial, error: fetchError } = await supabase
          .from('materials_library')
          .select('name_id')
          .eq('id', materialId)
          .single();

        if (fetchError) {
          console.error('‚ùå Failed to fetch material:', fetchError);
          return { error: fetchError.message };
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ material_names
        if (currentMaterial?.name_id) {
          const nameUpdates: any = {};
          if (name) nameUpdates.name = name;
          if (unit) nameUpdates.unit = unit;

          const { error: nameError } = await supabase
            .from('material_names')
            .update(nameUpdates)
            .eq('id', currentMaterial.name_id);

          if (nameError) {
            console.error('‚ùå Failed to update material name:', nameError);
            return { error: nameError.message };
          }
          console.log('‚úÖ Material name updated');
        }
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ materials_library
      if (Object.keys(materialData).length > 0) {
        const { error: updateError } = await supabase
          .from('materials_library')
          .update(materialData)
          .eq('id', materialId);

        if (updateError) {
          console.error('‚ùå Failed to update material library:', updateError);
          return { error: updateError.message };
        }
        console.log('‚úÖ Material library updated');
      }

      return { data: { success: true } };
    } catch (error) {
      console.error('üí• Exception in updateMaterialFromTemplate:', error);
      return { error: error instanceof Error ? error.message : 'Unknown error' };
    }
  },

  /**
   * –û—á–∏—Å—Ç–∏—Ç—å –¥—É–±–ª–∏–∫–∞—Ç—ã —Ä–∞–±–æ—Ç –≤ —à–∞–±–ª–æ–Ω–∞—Ö
   * –£–¥–∞–ª—è–µ—Ç –∑–∞–ø–∏—Å–∏ —Ç–æ–ª—å–∫–æ —Å —Ä–∞–±–æ—Ç–æ–π, –µ—Å–ª–∏ –µ—Å—Ç—å —Ç–∞–∫–∞—è –∂–µ —Ä–∞–±–æ—Ç–∞ —Å –º–∞—Ç–µ—Ä–∏–∞–ª–æ–º
   */
  async cleanupDuplicateWorks() {
    console.log('üßπ Starting cleanup of duplicate works in templates');

    try {
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –∏–∑ —à–∞–±–ª–æ–Ω–æ–≤
      const { data: allRecords, error: fetchError } = await supabase
        .from('work_material_templates')
        .select('*')
        .order('template_name, created_at');

      if (fetchError) {
        console.error('‚ùå Failed to fetch templates:', fetchError);
        return { error: fetchError.message };
      }

      if (!allRecords || allRecords.length === 0) {
        console.log('‚úÖ No records to clean');
        return { data: { deleted: 0 } };
      }

      // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —à–∞–±–ª–æ–Ω–∞–º
      const templateGroups = new Map<string, any[]>();
      allRecords.forEach(record => {
        const templateName = record.template_name;
        if (!templateGroups.has(templateName)) {
          templateGroups.set(templateName, []);
        }
        templateGroups.get(templateName)!.push(record);
      });

      const toDelete: string[] = [];

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —à–∞–±–ª–æ–Ω –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã
      templateGroups.forEach((records, templateName) => {
        console.log(`üìã Checking template "${templateName}" with ${records.length} records`);

        // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ —Ç–æ–ª—å–∫–æ —Å —Ä–∞–±–æ—Ç–æ–π (–±–µ–∑ –º–∞—Ç–µ—Ä–∏–∞–ª–∞)
        const workOnlyRecords = records.filter(r =>
          (r.work_library_id || r.sub_work_library_id) &&
          !r.material_library_id &&
          !r.sub_material_library_id
        );

        // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ —Å —Ä–∞–±–æ—Ç–æ–π –∏ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–º
        const workWithMaterialRecords = records.filter(r =>
          (r.work_library_id || r.sub_work_library_id) &&
          (r.material_library_id || r.sub_material_library_id)
        );

        // –î–ª—è –∫–∞–∂–¥–æ–π –∑–∞–ø–∏—Å–∏ —Ç–æ–ª—å–∫–æ —Å —Ä–∞–±–æ—Ç–æ–π –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–∞–∫–∞—è –∂–µ —Ä–∞–±–æ—Ç–∞ —Å –º–∞—Ç–µ—Ä–∏–∞–ª–æ–º
        workOnlyRecords.forEach(workOnly => {
          const workId = workOnly.work_library_id || workOnly.sub_work_library_id;
          const hasDuplicate = workWithMaterialRecords.some(wm =>
            (wm.work_library_id === workOnly.work_library_id && workOnly.work_library_id) ||
            (wm.sub_work_library_id === workOnly.sub_work_library_id && workOnly.sub_work_library_id)
          );

          if (hasDuplicate) {
            console.log(`  üóëÔ∏è Found duplicate work to delete: ${workOnly.id} (work: ${workId})`);
            toDelete.push(workOnly.id);
          }
        });
      });

      // –£–¥–∞–ª—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –¥—É–±–ª–∏–∫–∞—Ç—ã
      if (toDelete.length > 0) {
        console.log(`üóëÔ∏è Deleting ${toDelete.length} duplicate records...`);

        for (const id of toDelete) {
          const { error } = await supabase
            .from('work_material_templates')
            .delete()
            .eq('id', id);

          if (error) {
            console.error(`‚ùå Failed to delete ${id}:`, error);
          } else {
            console.log(`  ‚úÖ Deleted ${id}`);
          }
        }

        console.log(`‚úÖ Cleanup complete! Deleted ${toDelete.length} duplicate records`);
        return { data: { deleted: toDelete.length } };
      }

      console.log('‚úÖ No duplicates found');
      return { data: { deleted: 0 } };
    } catch (error) {
      console.error('üí• Exception in cleanupDuplicateWorks:', error);
      return { error: error instanceof Error ? error.message : 'Unknown error' };
    }
  },

  /**
   * –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —à–∞–±–ª–æ–Ω –≤ BOQ —ç–ª–µ–º–µ–Ω—Ç—ã
   */
  async convertTemplateToBOQItems(templateName: string, tenderId: string, clientPositionId?: string) {
    console.log('üöÄ Converting template to BOQ items:', { templateName, tenderId, clientPositionId });

    try {
      // –ü–æ–ª—É—á–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —à–∞–±–ª–æ–Ω–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
      const { data: templateItems, error: fetchError } = await this.getTemplateByName(templateName);

      if (fetchError) {
        return { error: fetchError };
      }

      if (!templateItems || templateItems.length === 0) {
        return { error: '–®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø—É—Å—Ç' };
      }

      console.log('üìã Template items loaded:', templateItems.length);
      console.log('üîç Template items details:', templateItems.map(item => ({
        id: item.id,
        has_work: !!(item.work_library_id || item.sub_work_library_id),
        has_material: !!(item.material_library_id || item.sub_material_library_id),
        is_linked_to_work: item.is_linked_to_work,
        work_name: item.work_name?.name || item.sub_work_name?.name,
        material_name: item.material_name?.name || item.sub_material_name?.name,
        linked_work_name: item.linked_work_name
      })));

      // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —à–∞–±–ª–æ–Ω–∞ –≤ BOQ —ç–ª–µ–º–µ–Ω—Ç—ã
      const boqItems = [];
      const links = []; // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–≤—è–∑—è—Ö –º–µ–∂–¥—É —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏

      // –°–Ω–∞—á–∞–ª–∞ —Å–æ—Ä—Ç–∏—Ä—É–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã, —á—Ç–æ–±—ã —Å–≤—è–∑–∞–Ω–Ω—ã–µ –ø–∞—Ä—ã —à–ª–∏ –≤–º–µ—Å—Ç–µ
      const sortedItems = [...templateItems].sort((a, b) => {
        // –°–Ω–∞—á–∞–ª–∞ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –ø–∞—Ä—ã (—Å is_linked_to_work = true)
        const aIsLinked = a.is_linked_to_work && (a.material_library_id || a.sub_material_library_id) && (a.work_library_id || a.sub_work_library_id);
        const bIsLinked = b.is_linked_to_work && (b.material_library_id || b.sub_material_library_id) && (b.work_library_id || b.sub_work_library_id);
        if (aIsLinked && !bIsLinked) return -1;
        if (!aIsLinked && bIsLinked) return 1;

        // –ó–∞—Ç–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Ä–∞–±–æ—Ç—ã
        const aIsWork = (a.work_library_id || a.sub_work_library_id) && !a.material_library_id && !a.sub_material_library_id;
        const bIsWork = (b.work_library_id || b.sub_work_library_id) && !b.material_library_id && !b.sub_material_library_id;
        if (aIsWork && !bIsWork) return -1;
        if (!aIsWork && bIsWork) return 1;

        return 0;
      });

      console.log('üîÑ Sorted template items:', sortedItems.map(item => ({
        id: item.id,
        is_linked: item.is_linked_to_work,
        hasWork: !!(item.work_library_id || item.sub_work_library_id),
        hasMaterial: !!(item.material_library_id || item.sub_material_library_id)
      })));

      for (const templateItem of sortedItems) {
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–±–æ—Ç—É
        const workLibrary = templateItem.work_library || templateItem.sub_work_library;
        const workNameData = templateItem.work_name || templateItem.sub_work_name;
        const workData = workLibrary && workNameData ? { ...workLibrary, name: workNameData.name, unit: workNameData.unit } : null;
        const workType = templateItem.work_library ? 'work' : 'sub_work';

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª
        const materialLibrary = templateItem.material_library || templateItem.sub_material_library;
        const materialNameData = templateItem.material_name || templateItem.sub_material_name;
        const materialData = materialLibrary && materialNameData ? { ...materialLibrary, name: materialNameData.name, unit: materialNameData.unit } : null;
        const materialType = templateItem.material_library ? 'material' : 'sub_material';

        console.log('üìç Processing template item:', {
          id: templateItem.id,
          hasWorkLibrary: !!workLibrary,
          hasWorkName: !!workNameData,
          hasMaterialLibrary: !!materialLibrary,
          hasMaterialName: !!materialNameData,
          is_linked_to_work: templateItem.is_linked_to_work,
          workData: workData ? { name: workData.name, id: workData.id } : null,
          materialData: materialData ? { name: materialData.name, id: materialData.id } : null
        });

        // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø—É—Å—Ç—ã–µ –∑–∞–ø–∏—Å–∏
        if (!workData && !materialData) {
          console.warn('‚ö†Ô∏è Skipping empty template item:', templateItem.id);
          continue;
        }

        // –ï—Å–ª–∏ —ç—Ç–æ —Å–≤—è–∑–∞–Ω–Ω–∞—è –ø–∞—Ä–∞ (—Ä–∞–±–æ—Ç–∞ + –º–∞—Ç–µ—Ä–∏–∞–ª –≤ –æ–¥–Ω–æ–π –∑–∞–ø–∏—Å–∏)
        if (workData && materialData && templateItem.is_linked_to_work) {
          console.log('üîó Found linked pair:', {
            work: workData.name,
            material: materialData.name,
            is_linked: templateItem.is_linked_to_work,
            templateItemId: templateItem.id,
            workId: workData.id,
            materialId: materialData.id
          });

          const workIndex = boqItems.length; // –ò–Ω–¥–µ–∫—Å —Ä–∞–±–æ—Ç—ã

          // –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤–ª—è–µ–º —Ä–∞–±–æ—Ç—É
          const workItem = {
            tender_id: tenderId,
            client_position_id: clientPositionId || null,
            item_type: workType as 'work' | 'sub_work',
            description: workData.name,
            unit: workData.unit,
            quantity: 1,
            unit_rate: workData.unit_rate || 0,
            work_id: workData.id,
            material_id: null,
            delivery_price_type: 'included' as const,
            currency_type: workData.currency_type || 'RUB' as const
          };
          boqItems.push(workItem);

          const materialIndex = boqItems.length; // –ò–Ω–¥–µ–∫—Å –º–∞—Ç–µ—Ä–∏–∞–ª–∞

          // –°—Ä–∞–∑—É –ø–æ—Å–ª–µ —Ä–∞–±–æ—Ç—ã –¥–æ–±–∞–≤–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª
          const materialItem = {
            tender_id: tenderId,
            client_position_id: clientPositionId || null,
            item_type: materialType as 'material' | 'sub_material',
            description: materialData.name,
            unit: materialData.unit,
            quantity: 1,
            unit_rate: materialData.unit_rate || 0,
            work_id: null, // –ù–µ —Å–≤—è–∑—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ work_id
            material_id: materialData.id,
            consumption_coefficient: materialData.consumption_coefficient || 1.0,
            conversion_coefficient: materialData.conversion_coefficient || 1.0,
            delivery_price_type: materialData.delivery_price_type || 'included' as const,
            delivery_amount: materialData.delivery_amount || 0,
            currency_type: materialData.currency_type || 'RUB' as const,
            material_type: materialData.material_type || 'main' as const
          };
          boqItems.push(materialItem);

          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–≤—è–∑–∏
          const linkInfo = {
            workIndex,
            materialIndex,
            workType: workType as 'work' | 'sub_work',
            materialType: materialType as 'material' | 'sub_material',
            workName: workData.name,
            materialName: materialData.name,
            consumption_coefficient: materialData.consumption_coefficient || 1.0,
            conversion_coefficient: materialData.conversion_coefficient || 1.0
          };

          console.log('üìé Saving link info:', {
            ...linkInfo,
            totalBoqItemsSoFar: boqItems.length + 2 // –ü–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∞
          });
          links.push(linkInfo);
        }
        // –ò–Ω–∞—á–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        else {
          // –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ —Ä–∞–±–æ—Ç–∞
          if (workData) {
            const workItem = {
              tender_id: tenderId,
              client_position_id: clientPositionId || null,
              item_type: workType as 'work' | 'sub_work',
              description: workData.name,
              unit: workData.unit,
              quantity: 1,
              unit_rate: workData.unit_rate || 0,
              work_id: workData.id,
              material_id: null,
              delivery_price_type: 'included' as const,
              currency_type: workData.currency_type || 'RUB' as const
            };
            boqItems.push(workItem);
          }

          // –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ –º–∞—Ç–µ—Ä–∏–∞–ª (–Ω–µ —Å–≤—è–∑–∞–Ω–Ω—ã–π)
          if (materialData) {
            const materialItem = {
              tender_id: tenderId,
              client_position_id: clientPositionId || null,
              item_type: materialType as 'material' | 'sub_material',
              description: materialData.name,
              unit: materialData.unit,
              quantity: 1,
              unit_rate: materialData.unit_rate || 0,
              work_id: null, // –ù–µ —Å–≤—è–∑–∞–Ω —Å —Ä–∞–±–æ—Ç–æ–π
              material_id: materialData.id,
              consumption_coefficient: materialData.consumption_coefficient || 1.0,
              conversion_coefficient: materialData.conversion_coefficient || 1.0,
              delivery_price_type: materialData.delivery_price_type || 'included' as const,
              delivery_amount: materialData.delivery_amount || 0,
              currency_type: materialData.currency_type || 'RUB' as const,
              material_type: materialData.material_type || 'main' as const,
              base_quantity: 1 // –î–ª—è –Ω–µ—Å–≤—è–∑–∞–Ω–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
            };
            boqItems.push(materialItem);
          }
        }
      }

      // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ –ø–æ–∏—Å–∫–∞ —Å–≤—è–∑–µ–π: –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Ä–∞–±–æ—Ç—ã –∏ –º–∞—Ç–µ—Ä–∏–∞–ª—ã
      if (links.length === 0) {
        console.log('üîç Checking for links using alternative method...');

        // –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
        const workItemsMap = new Map<string, number>();
        const materialItemsMap = new Map<string, number>();

        boqItems.forEach((item, index) => {
          if (item.item_type === 'work' || item.item_type === 'sub_work') {
            workItemsMap.set(item.description, index);
          } else if (item.item_type === 'material' || item.item_type === 'sub_material') {
            materialItemsMap.set(item.description, index);
          }
        });

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª –∏–∑ –∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —à–∞–±–ª–æ–Ω–∞
        for (const templateItem of templateItems) {
          if (templateItem.linked_work_name && (templateItem.material_name || templateItem.sub_material_name)) {
            const materialName = templateItem.material_name?.name || templateItem.sub_material_name?.name;
            const workName = templateItem.linked_work_name;

            const workIndex = workItemsMap.get(workName);
            const materialIndex = materialItemsMap.get(materialName);

            if (workIndex !== undefined && materialIndex !== undefined) {
              const linkInfo = {
                workIndex,
                materialIndex,
                workType: boqItems[workIndex].item_type as 'work' | 'sub_work',
                materialType: boqItems[materialIndex].item_type as 'material' | 'sub_material',
                workName,
                materialName,
                consumption_coefficient: templateItem.material_library?.consumption_coefficient ||
                                       templateItem.sub_material_library?.consumption_coefficient || 1.0,
                conversion_coefficient: templateItem.material_library?.conversion_coefficient ||
                                      templateItem.sub_material_library?.conversion_coefficient || 1.0
              };

              console.log('üîó Found link via alternative method:', linkInfo);
              links.push(linkInfo);
            }
          }
        }
      }

      console.log('‚úÖ Template converted to BOQ items:', {
        itemsCount: boqItems.length,
        linksCount: links.length,
        links: links.length > 0 ? links : 'No links found',
        boqItemsDetails: boqItems.map((item, i) => ({
          index: i,
          type: item.item_type,
          description: item.description
        }))
      });

      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
      if (links.length === 0 && templateName === '–ö–ª–∞–¥–∫–∞ —Å—Ç–µ–Ω –ì–°–ë 50 –º–º') {
        console.warn('‚ö†Ô∏è WARNING: No links created for "–ö–ª–∞–¥–∫–∞ —Å—Ç–µ–Ω –ì–°–ë 50 –º–º" template!');
        console.warn('Template items analysis:', templateItems.map(item => ({
          id: item.id,
          is_linked_to_work: item.is_linked_to_work,
          hasWork: !!(item.work_library || item.sub_work_library),
          hasMaterial: !!(item.material_library || item.sub_material_library),
          hasWorkName: !!(item.work_name || item.sub_work_name),
          hasMaterialName: !!(item.material_name || item.sub_material_name)
        })));
      }

      return { data: { items: boqItems, links } };
    } catch (error) {
      console.error('üí• Exception in convertTemplateToBOQItems:', error);
      return { error: error instanceof Error ? error.message : 'Unknown error' };
    }
  }
};