import { supabase } from '../client';
import type { Database } from '../types/database';

// –¢–∏–ø—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —à–∞–±–ª–æ–Ω–∞–º–∏
export interface WorkMaterialTemplate {
  id?: string;
  template_name: string;
  template_description?: string;
  work_library_id?: string;
  sub_work_library_id?: string;
  material_library_id?: string;
  sub_material_library_id?: string;
  conversion_coefficient: number;
  is_linked_to_work: boolean;
  notes?: string;
  created_at?: string;
  updated_at?: string;
}

export interface WorkMaterialTemplateDetailed extends WorkMaterialTemplate {
  work_name?: string;
  work_unit?: string;
  work_description?: string;
  material_name?: string;
  material_unit?: string;
  material_description?: string;
  material_consumption_coefficient?: number;
}

export interface TemplateGroup {
  template_name: string;
  template_description?: string;
  work_data?: {
    id: string;
    name: string;
    description?: string;
    unit: string;
    type: 'work' | 'sub_work';
    unit_rate?: number;
    currency_type?: string;
    category?: string;
  };
  materials: Array<{
    id: string;
    name: string;
    description?: string;
    unit: string;
    type: 'material' | 'sub_material' | 'work' | 'sub_work';
    category?: string;
    material_type?: string;
    consumption_coefficient?: number;
    unit_rate?: number;
    currency_type?: string;
    delivery_price_type?: string;
    delivery_amount?: number;
    quote_link?: string;
    conversion_coefficient: number;
    is_linked_to_work: boolean;
    notes?: string;
    template_item_id?: string;
    template_name?: string;
    template_description?: string;
    work_library_id?: string;
    sub_work_library_id?: string;
    material_library_id?: string;
    sub_material_library_id?: string;
    work_library?: any;
    sub_work_library?: any;
    material_library?: any;
    sub_material_library?: any;
    linked_work_id?: string;
    linked_work_name?: string;
  }>;
  created_at?: string;
  updated_at?: string;
}

export const workMaterialTemplatesApi = {
  /**
   * –°–æ–∑–¥–∞—Ç—å —ç–ª–µ–º–µ–Ω—Ç —à–∞–±–ª–æ–Ω–∞
   */
  async createTemplateItem(template: WorkMaterialTemplate) {
    console.log('üöÄ Creating template item:', {
      template_name: template.template_name,
      work_id: template.work_library_id || template.sub_work_library_id,
      material_id: template.material_library_id || template.sub_material_library_id,
      conversion_coefficient: template.conversion_coefficient,
      is_linked_to_work: template.is_linked_to_work
    });

    // Validate required fields
    if (!template.template_name?.trim()) {
      console.error('‚ùå template_name is required');
      return { error: '–ù–∞–∑–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ' };
    }

    const hasWork = template.work_library_id || template.sub_work_library_id;
    const hasMaterial = template.material_library_id || template.sub_material_library_id;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã —á—Ç–æ-—Ç–æ
    if (!hasWork && !hasMaterial) {
      console.error('‚ùå Either work or material is required');
      return { error: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å —Ä–∞–±–æ—Ç—É –∏–ª–∏ –º–∞—Ç–µ—Ä–∏–∞–ª' };
    }

    // –î–ª—è –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ —Ä–∞–±–æ—Ç–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞
    if (hasMaterial && template.is_linked_to_work && !hasWork) {
      console.error('‚ùå Work is required for linked material');
      return { error: '–î–ª—è –ø—Ä–∏–≤—è–∑–∞–Ω–Ω–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å —Ä–∞–±–æ—Ç—É' };
    }

    console.log('‚úÖ Validation passed:', {
      hasWork,
      hasMaterial,
      is_linked_to_work: template.is_linked_to_work
    });

    try {
      const { data, error } = await supabase
        .from('work_material_templates')
        .insert({
          template_name: template.template_name.trim(),
          template_description: template.template_description?.trim() || null,
          work_library_id: template.work_library_id || null,
          sub_work_library_id: template.sub_work_library_id || null,
          material_library_id: template.material_library_id || null,
          sub_material_library_id: template.sub_material_library_id || null,
          conversion_coefficient: template.conversion_coefficient || 1.0,
          is_linked_to_work: template.is_linked_to_work !== false,
          notes: template.notes?.trim() || null
        })
        .select()
        .single();

      console.log('üì¶ Create template item result:', { data, error });

      if (error) {
        console.error('‚ùå Failed to create template item:', error);
        return { error: error.message };
      }

      console.log('‚úÖ Template item created successfully');
      return { data };
    } catch (error) {
      console.error('üí• Exception in createTemplateItem:', error);
      return { error: error instanceof Error ? error.message : 'Unknown error' };
    }
  },

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —à–∞–±–ª–æ–Ω—ã (—Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ template_name)
   */
  async getTemplates() {
    console.log('üöÄ Getting all templates');

    try {
      const { data, error } = await supabase
        .from('work_material_templates')
        .select(`
          *,
          work_library:works_library!work_library_id(
            id, name, description, unit, item_type, unit_rate, currency_type, category
          ),
          sub_work_library:works_library!sub_work_library_id(
            id, name, description, unit, item_type, unit_rate, currency_type, category
          ),
          material_library:materials_library!material_library_id(
            id, name, description, unit, category, item_type, material_type, consumption_coefficient, unit_rate, currency_type, delivery_price_type, delivery_amount, quote_link
          ),
          sub_material_library:materials_library!sub_material_library_id(
            id, name, description, unit, category, item_type, material_type, consumption_coefficient, unit_rate, currency_type, delivery_price_type, delivery_amount, quote_link
          )
        `)
        .order('template_name', { ascending: true })
        .order('created_at', { ascending: true });

      console.log('üì¶ Templates fetched:', { count: data?.length, error });

      if (error) {
        console.error('‚ùå Failed to fetch templates:', error);
        return { error: error.message };
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ "–ù–æ–≤—ã–π —à–∞–±–ª–æ–Ω"
      const newTemplateItems = data?.filter((item: any) => item.template_name === '–ù–æ–≤—ã–π —à–∞–±–ª–æ–Ω');
      console.log('üîç "–ù–æ–≤—ã–π —à–∞–±–ª–æ–Ω" items:', newTemplateItems);

      // –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–∞–∫, —á—Ç–æ–±—ã —Å–Ω–∞—á–∞–ª–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–ª–∏—Å—å –∑–∞–ø–∏—Å–∏ —Ç–æ–ª—å–∫–æ —Å —Ä–∞–±–æ—Ç–∞–º–∏
      // –≠—Ç–æ –≤–∞–∂–Ω–æ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–æ—Ä—è–¥–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –º–∞—Å—Å–∏–≤ materials
      const sortedData = data?.sort((a: any, b: any) => {
        const aHasWork = !!(a.work_library_id || a.sub_work_library_id);
        const aHasMaterial = !!(a.material_library_id || a.sub_material_library_id);
        const bHasWork = !!(b.work_library_id || b.sub_work_library_id);
        const bHasMaterial = !!(b.material_library_id || b.sub_material_library_id);

        // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: —Ç–æ–ª—å–∫–æ —Ä–∞–±–æ—Ç–∞ > —Ä–∞–±–æ—Ç–∞+–º–∞—Ç–µ—Ä–∏–∞–ª > —Ç–æ–ª—å–∫–æ –º–∞—Ç–µ—Ä–∏–∞–ª
        const aPriority = aHasWork && !aHasMaterial ? 0 : (aHasWork && aHasMaterial ? 1 : 2);
        const bPriority = bHasWork && !bHasMaterial ? 0 : (bHasWork && bHasMaterial ? 1 : 2);

        if (aPriority !== bPriority) return aPriority - bPriority;

        // –ï—Å–ª–∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –æ–¥–∏–Ω–∞–∫–æ–≤—ã–π, —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∏–º–µ–Ω–∏ —à–∞–±–ª–æ–Ω–∞ –∏ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è
        if (a.template_name !== b.template_name) {
          return a.template_name.localeCompare(b.template_name);
        }
        return new Date(a.created_at).getTime() - new Date(b.created_at).getTime();
      });

      // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ template_name
      const grouped = new Map<string, TemplateGroup>();

      sortedData?.forEach((item: any) => {
        const templateName = item.template_name;

        console.log('üìã Processing template item:', {
          id: item.id,
          template_name: item.template_name,
          work_library_id: item.work_library_id,
          sub_work_library_id: item.sub_work_library_id,
          material_library_id: item.material_library_id,
          sub_material_library_id: item.sub_material_library_id,
          is_linked: item.is_linked_to_work,
          work_name: item.work_library?.name || item.sub_work_library?.name || 'NO WORK',
          material_name: item.material_library?.name || item.sub_material_library?.name || 'NO MATERIAL'
        });

        // –°–æ–∑–¥–∞–µ–º –≥—Ä—É–ø–ø—É –µ—Å–ª–∏ –µ–µ –µ—â–µ –Ω–µ—Ç
        if (!grouped.has(templateName)) {
          grouped.set(templateName, {
            template_name: templateName,
            template_description: item.template_description,
            work_data: undefined, // –ë—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –ø–æ–∑–∂–µ
            materials: [],
            created_at: item.created_at,
            updated_at: item.updated_at
          });
        }

        const group = grouped.get(templateName)!;

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–∞–±–æ—Ç—ã –∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∞
        const workData = item.work_library || item.sub_work_library;
        const materialData = item.material_library || item.sub_material_library;

        console.log('üìä Extracted data:', {
          hasWork: !!workData,
          hasMaterial: !!materialData,
          workName: workData?.name,
          materialName: materialData?.name
        });

        // –ï—Å–ª–∏ –µ—Å—Ç—å —Ä–∞–±–æ—Ç–∞ –∏ –º–∞—Ç–µ—Ä–∏–∞–ª - —ç—Ç–æ —Å–≤—è–∑–∫–∞
        if (workData && materialData) {
          // –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤–ª—è–µ–º —Ä–∞–±–æ—Ç—É –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç, –µ—Å–ª–∏ –µ–µ –µ—â–µ –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ
          const workType = item.sub_work_library ? 'sub_work' : 'work';
          const workAlreadyExists = group.materials.some(m =>
            m.id === workData.id && (m.type === 'work' || m.type === 'sub_work')
          );

          console.log(`    üîç Work "${workData.name}" (${workData.id}) already exists: ${workAlreadyExists}`);

          if (!workAlreadyExists) {
            console.log(`    ‚ûï Adding work "${workData.name}" to materials list`);
            // –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–±–æ—Ç—É –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç
            group.materials.push({
              id: workData.id,
              name: workData.name,
              description: workData.description,
              unit: workData.unit,
              type: workType as any,
              category: workData.category,
              material_type: undefined,
              consumption_coefficient: 1,
              unit_rate: workData.unit_rate,
              currency_type: workData.currency_type,
              delivery_price_type: undefined,
              delivery_amount: undefined,
              quote_link: undefined,
              conversion_coefficient: 1,
              is_linked_to_work: false,
              notes: undefined,
              template_item_id: item.id,
              template_name: item.template_name,
              template_description: item.template_description,
              work_library_id: item.work_library_id,
              sub_work_library_id: item.sub_work_library_id,
              material_library_id: undefined,
              sub_material_library_id: undefined,
              work_library: item.work_library,
              sub_work_library: item.sub_work_library,
              material_library: undefined,
              sub_material_library: undefined
            });
          }

          // –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–π –∫ —Ä–∞–±–æ—Ç–µ
          const materialType = item.sub_material_library ? 'sub_material' : 'material';
          group.materials.push({
            id: materialData.id,
            name: materialData.name,
            description: materialData.description,
            unit: materialData.unit,
            type: materialType,
            category: materialData.category,
            material_type: materialData.material_type,
            consumption_coefficient: materialData.consumption_coefficient,
            unit_rate: materialData.unit_rate,
            currency_type: materialData.currency_type,
            delivery_price_type: materialData.delivery_price_type,
            delivery_amount: materialData.delivery_amount,
            quote_link: materialData.quote_link,
            conversion_coefficient: item.conversion_coefficient,
            is_linked_to_work: item.is_linked_to_work,
            notes: item.notes,
            template_item_id: item.id,
            template_name: item.template_name,
            template_description: item.template_description,
            work_library_id: item.work_library_id,
            sub_work_library_id: item.sub_work_library_id,
            material_library_id: item.material_library_id,
            sub_material_library_id: item.sub_material_library_id,
            work_library: item.work_library,
            sub_work_library: item.sub_work_library,
            material_library: item.material_library,
            sub_material_library: item.sub_material_library,
            // –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Ä–∞–±–æ—Ç—É –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏
            linked_work_id: workData.id,
            linked_work_name: workData.name
          });

          // –¢–∞–∫–∂–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞–±–æ—Ç—É –µ—Å–ª–∏ –µ–µ –µ—â–µ –Ω–µ—Ç
          if (!group.work_data && item.is_linked_to_work) {
            group.work_data = {
              id: workData.id,
              name: workData.name,
              description: workData.description,
              unit: workData.unit,
              type: workType,
              unit_rate: workData.unit_rate,
              currency_type: workData.currency_type,
              category: workData.category
            };
          }
        }
        // –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ —Ä–∞–±–æ—Ç–∞ –±–µ–∑ –º–∞—Ç–µ—Ä–∏–∞–ª–∞
        else if (workData && !materialData) {
          const workType = item.sub_work_library ? 'sub_work' : 'work';
          // –î–ª—è —Ä–∞–±–æ—Ç –±–µ–∑ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö –∫–∞–∫ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é –∑–∞–ø–∏—Å—å –≤ materials
          // —á—Ç–æ–±—ã –æ–Ω–∏ –æ—Ç–æ–±—Ä–∞–∂–∞–ª–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü–µ
          group.materials.push({
            id: workData.id,
            name: workData.name,
            description: workData.description,
            unit: workData.unit,
            type: workType as any,
            category: workData.category,
            material_type: undefined,
            consumption_coefficient: 1,
            unit_rate: workData.unit_rate,
            currency_type: workData.currency_type,
            delivery_price_type: undefined,
            delivery_amount: undefined,
            quote_link: undefined,
            conversion_coefficient: 1,
            is_linked_to_work: false,
            notes: '–†–∞–±–æ—Ç–∞ –±–µ–∑ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤',
            template_item_id: item.id,
            template_name: item.template_name,
            template_description: item.template_description,
            work_library_id: item.work_library_id,
            sub_work_library_id: item.sub_work_library_id,
            material_library_id: null,
            sub_material_library_id: null,
            work_library: item.work_library,
            sub_work_library: item.sub_work_library,
            material_library: null,
            sub_material_library: null
          });

          // –¢–∞–∫–∂–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ work_data –µ—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–∞—è —Ä–∞–±–æ—Ç–∞
          if (!group.work_data) {
            group.work_data = {
              id: workData.id,
              name: workData.name,
              description: workData.description,
              unit: workData.unit,
              type: workType,
              unit_rate: workData.unit_rate,
              currency_type: workData.currency_type,
              category: workData.category
            };
          }
        }
        // –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ –º–∞—Ç–µ—Ä–∏–∞–ª –±–µ–∑ —Ä–∞–±–æ—Ç—ã
        else if (!workData && materialData) {
          const materialType = item.material_library ? 'material' : 'sub_material';
          group.materials.push({
            id: materialData.id,
            name: materialData.name,
            description: materialData.description,
            unit: materialData.unit,
            type: materialType,
            category: materialData.category,
            material_type: materialData.material_type,
            consumption_coefficient: materialData.consumption_coefficient,
            unit_rate: materialData.unit_rate,
            currency_type: materialData.currency_type,
            delivery_price_type: materialData.delivery_price_type,
            delivery_amount: materialData.delivery_amount,
            quote_link: materialData.quote_link,
            conversion_coefficient: item.conversion_coefficient,
            is_linked_to_work: false,
            notes: item.notes,
            template_item_id: item.id,
            template_name: item.template_name,
            template_description: item.template_description,
            work_library_id: null,
            sub_work_library_id: null,
            material_library_id: item.material_library_id,
            sub_material_library_id: item.sub_material_library_id,
            work_library: null,
            sub_work_library: null,
            material_library: item.material_library,
            sub_material_library: item.sub_material_library
          });
        }
      });

      const templates = Array.from(grouped.values());
      console.log('‚úÖ Templates grouped:', templates.length);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ "–ù–æ–≤—ã–π —à–∞–±–ª–æ–Ω" –ø–æ—Å–ª–µ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏
      const newTemplate = templates.find(t => t.template_name === '–ù–æ–≤—ã–π —à–∞–±–ª–æ–Ω');
      if (newTemplate) {
        console.log('üéØ "–ù–æ–≤—ã–π —à–∞–±–ª–æ–Ω" after grouping:', {
          name: newTemplate.template_name,
          materials_count: newTemplate.materials?.length,
          materials: newTemplate.materials?.map(m => ({
            id: m.id,
            name: m.name,
            type: m.type,
            linked_work_id: m.linked_work_id,
            linked_work_name: m.linked_work_name,
            is_linked_to_work: m.is_linked_to_work
          }))
        });
      }

      return { data: templates };
    } catch (error) {
      console.error('üí• Exception in getTemplates:', error);
      return { error: error instanceof Error ? error.message : 'Unknown error' };
    }
  },

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —à–∞–±–ª–æ–Ω–∞
   */
  async getTemplateByName(templateName: string) {
    console.log('üöÄ Getting template by name:', templateName);

    try {
      const { data, error } = await supabase
        .from('work_material_templates')
        .select(`
          *,
          work_library:works_library!work_library_id(
            id, name, description, unit, item_type, unit_rate, currency_type, category
          ),
          sub_work_library:works_library!sub_work_library_id(
            id, name, description, unit, item_type, unit_rate, currency_type, category
          ),
          material_library:materials_library!material_library_id(
            id, name, description, unit, category, item_type, material_type, consumption_coefficient, unit_rate, currency_type, delivery_price_type, delivery_amount, quote_link
          ),
          sub_material_library:materials_library!sub_material_library_id(
            id, name, description, unit, category, item_type, material_type, consumption_coefficient, unit_rate, currency_type, delivery_price_type, delivery_amount, quote_link
          )
        `)
        .eq('template_name', templateName)
        .order('created_at', { ascending: true });

      console.log('üì¶ Template items fetched:', { count: data?.length, error });

      if (error) {
        console.error('‚ùå Failed to fetch template:', error);
        return { error: error.message };
      }

      console.log('‚úÖ Template retrieved successfully');
      return { data };
    } catch (error) {
      console.error('üí• Exception in getTemplateByName:', error);
      return { error: error instanceof Error ? error.message : 'Unknown error' };
    }
  },

  /**
   * –û–±–Ω–æ–≤–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç —à–∞–±–ª–æ–Ω–∞
   */
  async updateTemplateItem(itemId: string, updates: Partial<WorkMaterialTemplate>) {
    console.log('üöÄ Updating template item:', { itemId, updates });

    try {
      const updateData: any = {};
      if (updates.template_name !== undefined) updateData.template_name = updates.template_name.trim();
      if (updates.template_description !== undefined) updateData.template_description = updates.template_description?.trim() || null;
      if (updates.work_library_id !== undefined) updateData.work_library_id = updates.work_library_id;
      if (updates.sub_work_library_id !== undefined) updateData.sub_work_library_id = updates.sub_work_library_id;
      if (updates.material_library_id !== undefined) updateData.material_library_id = updates.material_library_id;
      if (updates.sub_material_library_id !== undefined) updateData.sub_material_library_id = updates.sub_material_library_id;
      if (updates.conversion_coefficient !== undefined) updateData.conversion_coefficient = updates.conversion_coefficient;
      if (updates.is_linked_to_work !== undefined) updateData.is_linked_to_work = updates.is_linked_to_work;
      if (updates.notes !== undefined) updateData.notes = updates.notes?.trim() || null;

      const { data, error } = await supabase
        .from('work_material_templates')
        .update(updateData)
        .eq('id', itemId)
        .select()
        .single();

      console.log('üì¶ Update result:', { data, error });

      if (error) {
        console.error('‚ùå Failed to update template item:', error);
        return { error: error.message };
      }

      console.log('‚úÖ Template item updated successfully');
      return { data };
    } catch (error) {
      console.error('üí• Exception in updateTemplateItem:', error);
      return { error: error instanceof Error ? error.message : 'Unknown error' };
    }
  },

  /**
   * –£–¥–∞–ª–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç —à–∞–±–ª–æ–Ω–∞
   */
  async deleteTemplateItem(itemId: string) {
    console.log('üöÄ Deleting template item:', itemId);

    try {
      const { error } = await supabase
        .from('work_material_templates')
        .delete()
        .eq('id', itemId);

      console.log('üì¶ Delete result:', { error });

      if (error) {
        console.error('‚ùå Failed to delete template item:', error);
        return { error: error.message };
      }

      console.log('‚úÖ Template item deleted successfully');
      return { data: null };
    } catch (error) {
      console.error('üí• Exception in deleteTemplateItem:', error);
      return { error: error instanceof Error ? error.message : 'Unknown error' };
    }
  },

  /**
   * –£–¥–∞–ª–∏—Ç—å –≤–µ—Å—å —à–∞–±–ª–æ–Ω (–≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º template_name)
   */
  async deleteTemplate(templateName: string) {
    console.log('üöÄ Deleting entire template:', templateName);

    try {
      const { error } = await supabase
        .from('work_material_templates')
        .delete()
        .eq('template_name', templateName);

      console.log('üì¶ Delete template result:', { error });

      if (error) {
        console.error('‚ùå Failed to delete template:', error);
        return { error: error.message };
      }

      console.log('‚úÖ Template deleted successfully');
      return { data: null };
    } catch (error) {
      console.error('üí• Exception in deleteTemplate:', error);
      return { error: error instanceof Error ? error.message : 'Unknown error' };
    }
  },

  /**
   * –î—É–±–ª–∏—Ä–æ–≤–∞—Ç—å —à–∞–±–ª–æ–Ω —Å –Ω–æ–≤—ã–º –∏–º–µ–Ω–µ–º
   */
  async duplicateTemplate(originalTemplateName: string, newTemplateName: string) {
    console.log('üöÄ Duplicating template:', { originalTemplateName, newTemplateName });

    try {
      // –ü–æ–ª—É—á–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —à–∞–±–ª–æ–Ω–∞
      const { data: originalItems, error: fetchError } = await this.getTemplateByName(originalTemplateName);

      if (fetchError) {
        return { error: fetchError };
      }

      if (!originalItems || originalItems.length === 0) {
        return { error: '–®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω' };
      }

      // –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏–∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å –Ω–æ–≤—ã–º –∏–º–µ–Ω–µ–º
      const newItems = originalItems.map((item: any) => ({
        template_name: newTemplateName.trim(),
        template_description: item.template_description,
        work_library_id: item.work_library_id,
        sub_work_library_id: item.sub_work_library_id,
        material_library_id: item.material_library_id,
        sub_material_library_id: item.sub_material_library_id,
        conversion_coefficient: item.conversion_coefficient,
        is_linked_to_work: item.is_linked_to_work,
        notes: item.notes
      }));

      const { data, error } = await supabase
        .from('work_material_templates')
        .insert(newItems)
        .select();

      console.log('üì¶ Duplicate result:', { count: data?.length, error });

      if (error) {
        console.error('‚ùå Failed to duplicate template:', error);
        return { error: error.message };
      }

      console.log('‚úÖ Template duplicated successfully');
      return { data };
    } catch (error) {
      console.error('üí• Exception in duplicateTemplate:', error);
      return { error: error instanceof Error ? error.message : 'Unknown error' };
    }
  },

  /**
   * –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —à–∞–±–ª–æ–Ω –≤ BOQ —ç–ª–µ–º–µ–Ω—Ç—ã
   */
  async convertTemplateToBOQItems(templateName: string, tenderId: string, clientPositionId?: string) {
    console.log('üöÄ Converting template to BOQ items:', { templateName, tenderId, clientPositionId });

    try {
      // –ü–æ–ª—É—á–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —à–∞–±–ª–æ–Ω–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
      const { data: templateItems, error: fetchError } = await this.getTemplateByName(templateName);

      if (fetchError) {
        return { error: fetchError };
      }

      if (!templateItems || templateItems.length === 0) {
        return { error: '–®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø—É—Å—Ç' };
      }

      console.log('üìã Template items loaded:', templateItems.length);

      // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —à–∞–±–ª–æ–Ω–∞ –≤ BOQ —ç–ª–µ–º–µ–Ω—Ç—ã
      const boqItems = [];

      for (const templateItem of templateItems) {
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–±–æ—Ç—É
        const workData = templateItem.work_library || templateItem.sub_work_library;
        const workType = templateItem.work_library ? 'work' : 'sub_work';

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª
        const materialData = templateItem.material_library || templateItem.sub_material_library;
        const materialType = templateItem.material_library ? 'material' : 'sub_material';

        if (!workData || !materialData) {
          console.warn('‚ö†Ô∏è Skipping template item with missing work or material:', templateItem.id);
          continue;
        }

        // –°–æ–∑–¥–∞–µ–º BOQ —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã
        const workItem = {
          tender_id: tenderId,
          client_position_id: clientPositionId || null,
          item_type: workType as 'work' | 'sub_work',
          description: workData.name,
          unit: workData.unit,
          quantity: 1, // –ë–∞–∑–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–±–æ—Ç
          unit_rate: 0, // –ë—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
          work_id: workData.id,
          material_id: null,
          notes: templateItem.template_description || null,
          delivery_price_type: 'included' as const,
          currency_type: 'RUB' as const
        };

        // –°–æ–∑–¥–∞–µ–º BOQ —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞
        const materialItem = {
          tender_id: tenderId,
          client_position_id: clientPositionId || null,
          item_type: materialType as 'material' | 'sub_material',
          description: materialData.name,
          unit: materialData.unit,
          quantity: 1, // –ë–∞–∑–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
          unit_rate: 0, // –ë—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
          work_id: templateItem.is_linked_to_work ? workData.id : null,
          material_id: materialData.id,
          conversion_coefficient: templateItem.conversion_coefficient,
          consumption_coefficient: materialData.consumption_coefficient || 1.0,
          notes: templateItem.notes || null,
          delivery_price_type: 'included' as const,
          currency_type: 'RUB' as const
        };

        // –ï—Å–ª–∏ –º–∞—Ç–µ—Ä–∏–∞–ª –ø—Ä–∏–≤—è–∑–∞–Ω –∫ —Ä–∞–±–æ—Ç–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º base_quantity
        if (!templateItem.is_linked_to_work) {
          materialItem.base_quantity = 1;
        }

        boqItems.push(workItem, materialItem);
      }

      console.log('‚úÖ Template converted to BOQ items:', boqItems.length);
      return { data: boqItems };
    } catch (error) {
      console.error('üí• Exception in convertTemplateToBOQItems:', error);
      return { error: error instanceof Error ? error.message : 'Unknown error' };
    }
  }
};