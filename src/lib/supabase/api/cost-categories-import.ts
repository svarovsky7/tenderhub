import { supabase } from '../client';
import type { Database } from '../types/database';

type CostCategory = Database['public']['Tables']['cost_categories']['Row'];
type DetailCostCategory = Database['public']['Tables']['detail_cost_categories']['Row'];
type Location = Database['public']['Tables']['location']['Row'];

export interface CostCategoryImportData {
  sortOrder: number;
  categoryName: string;
  categoryUnit?: string;
  detailCategoryName: string;
  detailCategoryUnit: string;
  locationName: string;
}

// –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∏–º–ø–æ—Ä—Ç–∞
interface GroupedImportData {
  categories: Map<string, { name: string; unit?: string; sortOrder: number }>;
  detailCategories: Map<string, { categoryName: string; name: string; unit: string; sortOrder: number }>;
  locations: Map<string, { name: string; sortOrder: number }>;
  mappings: Array<{ detailKey: string; locationName: string }>;
}

// –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–º–ø–æ—Ä—Ç–∞ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
function groupImportData(data: CostCategoryImportData[]): GroupedImportData {
  const categories = new Map<string, { name: string; unit?: string; sortOrder: number }>();
  const detailCategories = new Map<string, { categoryName: string; name: string; unit: string; sortOrder: number }>();
  const locations = new Map<string, { name: string; sortOrder: number }>();
  const mappings: Array<{ detailKey: string; locationName: string }> = [];

  data.forEach((row) => {
    // –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω—É–º–µ—Ä–∞—Ü–∏—é –∏–∑ –ø–µ—Ä–≤–æ–π –≤—Å—Ç—Ä–µ—á–µ–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–º–µ–Ω–∏
    if (!categories.has(row.categoryName)) {
      categories.set(row.categoryName, {
        name: row.categoryName,
        unit: row.categoryUnit,
        sortOrder: row.sortOrder
      });
    }

    // –î–µ—Ç–∞–ª—å–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–∫–ª—é—á: –∫–∞—Ç–µ–≥–æ—Ä–∏—è + –¥–µ—Ç–∞–ª—å–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è)
    const detailKey = `${row.categoryName}::${row.detailCategoryName}`;
    if (!detailCategories.has(detailKey)) {
      detailCategories.set(detailKey, {
        categoryName: row.categoryName,
        name: row.detailCategoryName,
        unit: row.detailCategoryUnit,
        sortOrder: row.sortOrder
      });
    }

    // –õ–æ–∫–∞—Ü–∏–∏
    if (!locations.has(row.locationName)) {
      locations.set(row.locationName, {
        name: row.locationName,
        sortOrder: row.sortOrder
      });
    }

    // –°–≤—è–∑–∏ –¥–µ—Ç–∞–ª—å–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è -> –ª–æ–∫–∞—Ü–∏—è
    mappings.push({
      detailKey,
      locationName: row.locationName
    });
  });

  return { categories, detailCategories, locations, mappings };
}

// –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ –∏–º–ø–æ—Ä—Ç–æ–º
async function clearOldData() {
  console.log('üóëÔ∏è [clearOldData] Clearing old mappings');
  
  try {
    // –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å—Ç–∞—Ä—ã–µ —Å–≤—è–∑–∏ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–π —Å–ø–æ—Å–æ–± –±–µ–∑ —É—Å–ª–æ–≤–∏—è
    const { error: mappingError } = await supabase
      .from('category_location_mapping')
      .delete()
      .gte('created_at', '1970-01-01'); // –£–¥–∞–ª—è–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ (–≤—Å–µ —Å–æ–∑–¥–∞–Ω—ã –ø–æ—Å–ª–µ 1970)

    if (mappingError && mappingError.code !== 'PGRST116') {
      console.error('‚ùå [clearOldData] Failed to clear mappings:', mappingError);
    } else {
      console.log('‚úÖ [clearOldData] Mappings cleared');
    }
  } catch (error) {
    console.log('üîÑ [clearOldData] Error clearing mappings, continuing...');
  }
}

// –ò–º–ø–æ—Ä—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å –ø–µ—Ä–µ–∑–∞–ø–∏—Å—å—é
export async function importCostCategoriesWithOverwrite(data: CostCategoryImportData[]) {
  console.log('üöÄ [importCostCategoriesWithOverwrite] called with:', data.length, 'rows');
  
  const results = {
    success: 0,
    failed: 0,
    errors: [] as string[]
  };

  try {
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    const grouped = groupImportData(data);
    console.log('üìä Grouped data:', {
      categories: grouped.categories.size,
      details: grouped.detailCategories.size,
      locations: grouped.locations.size,
      mappings: grouped.mappings.length
    });

    // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Å–≤—è–∑–∏
    await clearOldData();

    // 1. –°–æ–∑–¥–∞–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    const categoryMap = new Map<string, string>(); // name -> id
    for (const [name, catData] of grouped.categories) {
      try {
        // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        const { data: newCategory, error: insertError } = await supabase
          .from('cost_categories')
          .insert({
            name: catData.name,
            code: `CAT-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,
            description: catData.unit ? `–ï–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è: ${catData.unit}` : null,
            sort_order: catData.sortOrder,
            is_active: true
          })
          .select()
          .single();
        
        if (newCategory && !insertError) {
          categoryMap.set(name, newCategory.id);
          console.log('‚úÖ New category created:', newCategory.name, 'sort_order:', newCategory.sort_order);
          continue;
        }
        
        // –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å (–≤–æ–∑–º–æ–∂–Ω–æ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç), –∏—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é
        const { data: existingCategory, error: selectError } = await supabase
          .from('cost_categories')
          .select('*')
          .eq('name', catData.name)
          .maybeSingle();

        if (existingCategory && !selectError) {
          // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
          const { data: updatedCategory, error: updateError } = await supabase
            .from('cost_categories')
            .update({
              description: catData.unit ? `–ï–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è: ${catData.unit}` : null,
              sort_order: catData.sortOrder,
              is_active: true
            })
            .eq('id', existingCategory.id)
            .select()
            .single();
          
          if (updatedCategory && !updateError) {
            categoryMap.set(name, updatedCategory.id);
            console.log('‚úÖ Category updated:', updatedCategory.name, 'sort_order:', updatedCategory.sort_order);
          } else {
            // –ï—Å–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π ID
            categoryMap.set(name, existingCategory.id);
            console.log('‚úÖ Category found (update failed, using existing):', existingCategory.name);
          }
        } else {
          console.error('‚ùå Failed to create/find category:', name, insertError, selectError);
          results.errors.push(`–ö–∞—Ç–µ–≥–æ—Ä–∏—è "${name}": –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∏–ª–∏ –Ω–∞–π—Ç–∏`);
        }
      } catch (error) {
        console.error('‚ùå Unexpected error for category:', name, error);
        results.errors.push(`–ö–∞—Ç–µ–≥–æ—Ä–∏—è "${name}": –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞`);
      }
    }

    // 2. –°–æ–∑–¥–∞–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    const detailCategoryMap = new Map<string, string>(); // key -> id
    for (const [key, detailData] of grouped.detailCategories) {
      const categoryId = categoryMap.get(detailData.categoryName);
      if (!categoryId) {
        console.error('‚ùå Category not found for detail:', detailData.categoryName);
        console.log('üìä Available categories:', Array.from(categoryMap.keys()));
        continue;
      }

      try {
        // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –¥–µ—Ç–∞–ª—å–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        const { data: newDetail, error: insertError } = await supabase
          .from('detail_cost_categories')
          .insert({
            category_id: categoryId,
            name: detailData.name,
            code: `DET-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,
            unit: detailData.unit,
            sort_order: detailData.sortOrder,
            base_price: 0,
            is_active: true
          })
          .select()
          .single();
        
        if (newDetail && !insertError) {
          detailCategoryMap.set(key, newDetail.id);
          console.log('‚úÖ New detail category created:', newDetail.name, 'for category:', detailData.categoryName);
          continue;
        }
        
        // –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å, –∏—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é
        const { data: existingDetail, error: selectError } = await supabase
          .from('detail_cost_categories')
          .select('*')
          .eq('category_id', categoryId)
          .eq('name', detailData.name)
          .maybeSingle();

        if (existingDetail && !selectError) {
          // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –¥–µ—Ç–∞–ª—å–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
          const { data: updatedDetail, error: updateError } = await supabase
            .from('detail_cost_categories')
            .update({
              unit: detailData.unit,
              sort_order: detailData.sortOrder,
              is_active: true
            })
            .eq('id', existingDetail.id)
            .select()
            .single();
          
          if (updatedDetail && !updateError) {
            detailCategoryMap.set(key, updatedDetail.id);
            console.log('‚úÖ Detail category updated:', updatedDetail.name, 'for category:', detailData.categoryName);
          } else {
            // –ï—Å–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π ID
            detailCategoryMap.set(key, existingDetail.id);
            console.log('‚úÖ Detail category found (update failed, using existing):', existingDetail.name);
          }
        } else {
          console.error('‚ùå Failed to create/find detail category:', key, insertError, selectError);
          results.errors.push(`–î–µ—Ç–∞–ª—å–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è "${detailData.name}": –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∏–ª–∏ –Ω–∞–π—Ç–∏`);
        }
      } catch (error) {
        console.error('‚ùå Unexpected error for detail category:', key, error);
        results.errors.push(`–î–µ—Ç–∞–ª—å–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è "${detailData.name}": –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞`);
      }
    }

    // 3. –°–æ–∑–¥–∞–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞—Ü–∏–∏
    const locationMap = new Map<string, string>(); // name -> id
    for (const [name, locData] of grouped.locations) {
      try {
        // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –ª–æ–∫–∞—Ü–∏—é
        const { data: newLocation, error: insertError } = await supabase
          .from('location')
          .insert({
            name: locData.name,
            code: `LOC-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,
            sort_order: locData.sortOrder,
            level: 0,
            is_active: true
          })
          .select()
          .single();
        
        if (newLocation && !insertError) {
          locationMap.set(name, newLocation.id);
          console.log('‚úÖ New location created:', newLocation.name, 'sort_order:', newLocation.sort_order);
          continue;
        }
        
        // –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å, –∏—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é
        const { data: existingLocation, error: selectError } = await supabase
          .from('location')
          .select('*')
          .eq('name', locData.name)
          .maybeSingle();

        if (existingLocation && !selectError) {
          // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ª–æ–∫–∞—Ü–∏—é
          const { data: updatedLocation, error: updateError } = await supabase
            .from('location')
            .update({
              sort_order: locData.sortOrder,
              is_active: true
            })
            .eq('id', existingLocation.id)
            .select()
            .single();
          
          if (updatedLocation && !updateError) {
            locationMap.set(name, updatedLocation.id);
            console.log('‚úÖ Location updated:', updatedLocation.name, 'sort_order:', updatedLocation.sort_order);
          } else {
            // –ï—Å–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π ID
            locationMap.set(name, existingLocation.id);
            console.log('‚úÖ Location found (update failed, using existing):', existingLocation.name);
          }
        } else {
          console.error('‚ùå Failed to create/find location:', name, insertError, selectError);
          results.errors.push(`–õ–æ–∫–∞—Ü–∏—è "${name}": –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∏–ª–∏ –Ω–∞–π—Ç–∏`);
        }
      } catch (error) {
        console.error('‚ùå Unexpected error for location:', name, error);
        results.errors.push(`–õ–æ–∫–∞—Ü–∏—è "${name}": –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞`);
      }
    }

    // 4. –°–æ–∑–¥–∞–µ–º —Å–≤—è–∑–∏ –¥–µ—Ç–∞–ª—å–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è -> –ª–æ–∫–∞—Ü–∏—è
    console.log('üìä Creating mappings:');
    console.log('  - Detail categories:', detailCategoryMap.size);
    console.log('  - Locations:', locationMap.size);
    console.log('  - Mappings to create:', grouped.mappings.length);
    
    const uniqueMappings = new Map<string, boolean>();
    let mappingCount = 0;
    
    for (const mapping of grouped.mappings) {
      const detailId = detailCategoryMap.get(mapping.detailKey);
      const locationId = locationMap.get(mapping.locationName);

      if (!detailId || !locationId) {
        console.error('‚ùå Missing IDs for mapping:', {
          detailKey: mapping.detailKey,
          locationName: mapping.locationName,
          hasDetailId: !!detailId,
          hasLocationId: !!locationId
        });
        console.log('üìä Available detail categories:', Array.from(detailCategoryMap.keys()));
        console.log('üìä Available locations:', Array.from(locationMap.keys()));
        continue;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å —Å–≤—è–∑–∏
      const mappingKey = `${detailId}::${locationId}`;
      if (uniqueMappings.has(mappingKey)) {
        console.log('‚è≠Ô∏è Skipping duplicate mapping:', mapping.detailKey, '->', mapping.locationName);
        continue; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
      }
      uniqueMappings.set(mappingKey, true);

      try {
        // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Å–≤—è–∑—å
        const { error: insertError } = await supabase
          .from('category_location_mapping')
          .insert({
            detail_category_id: detailId,
            location_id: locationId,
            quantity: 0,
            unit_price: 0,
            is_active: true
          });

        if (!insertError) {
          mappingCount++;
          console.log('‚úÖ New mapping created:', mapping.detailKey, '->', mapping.locationName);
          results.success++;
        } else {
          // –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å (–≤–æ–∑–º–æ–∂–Ω–æ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç), –ø—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å
          const { error: updateError } = await supabase
            .from('category_location_mapping')
            .update({
              quantity: 0,
              unit_price: 0,
              is_active: true
            })
            .eq('detail_category_id', detailId)
            .eq('location_id', locationId);

          if (!updateError) {
            mappingCount++;
            console.log('‚úÖ Existing mapping updated:', mapping.detailKey, '->', mapping.locationName);
            results.success++;
          } else {
            console.error('‚ùå Failed to create/update mapping:', mapping, insertError, updateError);
            results.errors.push(`–°–≤—è–∑—å "${mapping.detailKey}" -> "${mapping.locationName}": –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å`);
          }
        }
      } catch (error) {
        console.error('‚ùå Unexpected error creating mapping:', mapping, error);
        results.errors.push(`–°–≤—è–∑—å "${mapping.detailKey}" -> "${mapping.locationName}": –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞`);
      }
    }
    
    console.log('üìä Total mappings processed:', mappingCount);

    console.log('‚úÖ [importCostCategoriesWithOverwrite] completed:', results);
    return results;

  } catch (error) {
    console.error('‚ùå [importCostCategoriesWithOverwrite] unexpected error:', error);
    results.failed = data.length;
    results.errors.push(`–û–±—â–∞—è –æ—à–∏–±–∫–∞: ${error}`);
    return results;
  }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –ª–æ–∫–∞—Ü–∏–π –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
export async function getLocationsForDetailCategory(detailCategoryId: string): Promise<any[]> {
  console.log('üöÄ [getLocationsForDetailCategory] called with:', detailCategoryId);
  
  try {
    const { data, error } = await supabase
      .from('category_location_mapping')
      .select(`
        location_id,
        location:location!category_location_mapping_location_id_fkey (
          id,
          name,
          code,
          description,
          sort_order
        )
      `)
      .eq('detail_category_id', detailCategoryId)
      .eq('is_active', true);

    if (error) {
      console.error('‚ùå [getLocationsForDetailCategory] failed:', error);
      throw error;
    }

    console.log('‚úÖ [getLocationsForDetailCategory] found:', data?.length, 'locations');
    
    // –§–∏–ª—å—Ç—Ä—É–µ–º null –∑–Ω–∞—á–µ–Ω–∏—è –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ location –æ–±—ä–µ–∫—Ç—ã
    const locations = data?.map(item => item.location).filter(Boolean) || [];
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ sort_order
    locations.sort((a, b) => (a.sort_order || 0) - (b.sort_order || 0));
    
    return locations;
  } catch (error) {
    console.error('‚ùå [getLocationsForDetailCategory] error:', error);
    return [];
  }
}