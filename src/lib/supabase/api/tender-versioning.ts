import { supabase } from '../client';
import type { ApiResponse } from '../types';

export interface TenderVersionMapping {
  id?: string;
  old_tender_id: string;
  new_tender_id: string;
  old_position_id?: string;
  new_position_id?: string;
  old_position_number?: string;
  old_work_name?: string;
  old_volume?: number;
  old_unit?: string;
  old_client_note?: string;
  old_item_no?: string;
  new_position_number?: string;
  new_work_name?: string;
  new_volume?: number;
  new_unit?: string;
  new_client_note?: string;
  new_item_no?: string;
  mapping_type?: 'exact' | 'fuzzy' | 'manual' | 'dop' | 'new' | 'deleted';
  confidence_score?: number;
  fuzzy_score?: number;
  context_score?: number;
  hierarchy_score?: number;
  mapping_status?: 'suggested' | 'confirmed' | 'rejected' | 'applied';
  action_type?: 'copy_boq' | 'create_new' | 'delete' | 'preserve_dop';
  is_dop?: boolean;
  parent_mapping_id?: string;
  notes?: string;
}

export interface PositionMatchingOptions {
  fuzzyThreshold?: number;
  contextWeight?: number;
  fuzzyWeight?: number;
  hierarchyWeight?: number;
  autoConfirmThreshold?: number;
}

export const tenderVersioningApi = {
  /**
   * –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –≤–µ—Ä—Å–∏—é —Ç–µ–Ω–¥–µ—Ä–∞
   */
  async createNewVersion(parentTenderId: string, createdBy?: string): Promise<ApiResponse<string>> {
    console.log('üöÄ Creating new tender version from:', parentTenderId);

    try {
      const { data, error } = await supabase.rpc('create_tender_version', {
        p_parent_tender_id: parentTenderId,
        p_created_by: createdBy || null
      });

      if (error) {
        console.error('‚ùå Failed to create tender version:', error);
        return { error: error.message };
      }

      console.log('‚úÖ New tender version created:', data);
      return { data, message: '–ù–æ–≤–∞—è –≤–µ—Ä—Å–∏—è —Ç–µ–Ω–¥–µ—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞' };
    } catch (error) {
      console.error('üí• Exception in createNewVersion:', error);
      return { error: error instanceof Error ? error.message : 'Unknown error' };
    }
  },

  /**
   * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π –º–µ–∂–¥—É –≤–µ—Ä—Å–∏—è–º–∏
   */
  async autoMatchPositions(
    oldTenderId: string,
    newTenderId: string,
    options?: PositionMatchingOptions
  ): Promise<ApiResponse<TenderVersionMapping[]>> {
    console.log('üöÄ Auto-matching positions between tenders:', { oldTenderId, newTenderId });

    try {
      // –ü–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏ –∏–∑ —Å—Ç–∞—Ä–æ–≥–æ —Ç–µ–Ω–¥–µ—Ä–∞ (–∏—Å–∫–ª—é—á–∞—è –î–û–ü)
      const { data: oldPositions, error: oldError } = await supabase
        .from('client_positions')
        .select('*')
        .eq('tender_id', oldTenderId)
        .eq('is_additional', false)  // –ò—Å–∫–ª—é—á–∞–µ–º –î–û–ü –ø–æ–∑–∏—Ü–∏–∏ –ø–æ —Ñ–ª–∞–≥—É is_additional
        .order('position_number');

      if (oldError) {
        console.error('‚ùå Failed to fetch old positions:', oldError);
        return { error: oldError.message };
      }

      // –ü–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏ –∏–∑ –Ω–æ–≤–æ–≥–æ —Ç–µ–Ω–¥–µ—Ä–∞ (–∏—Å–∫–ª—é—á–∞—è –î–û–ü)
      const { data: newPositions, error: newError } = await supabase
        .from('client_positions')
        .select('*')
        .eq('tender_id', newTenderId)
        .eq('is_additional', false)  // –ò—Å–∫–ª—é—á–∞–µ–º –î–û–ü –ø–æ–∑–∏—Ü–∏–∏ –ø–æ —Ñ–ª–∞–≥—É is_additional
        .order('position_number');

      if (newError) {
        console.error('‚ùå Failed to fetch new positions:', newError);
        return { error: newError.message };
      }

      console.log(`üìä Matching ${oldPositions?.length || 0} old positions with ${newPositions?.length || 0} new positions`);

      // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –¥–ª—è –ª—É—á—à–µ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è)
      const fuzzyWeight = options?.fuzzyWeight ?? 0.6;  // –£–º–µ–Ω—å—à–∏–ª–∏ –≤–µ—Å fuzzy –¥–ª—è –±–æ–ª—å—à–µ–≥–æ –≤–ª–∏—è–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
      const contextWeight = options?.contextWeight ?? 0.3;  // –£–≤–µ–ª–∏—á–∏–ª–∏ –≤–µ—Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ (–Ω–æ–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏)
      const hierarchyWeight = options?.hierarchyWeight ?? 0.1;
      const fuzzyThreshold = options?.fuzzyThreshold ?? 0.5;  // –°–Ω–∏–∑–∏–ª–∏ –ø–æ—Ä–æ–≥ –¥–ª—è –±–æ–ª–µ–µ –º—è–≥–∫–æ–≥–æ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è
      const autoConfirmThreshold = options?.autoConfirmThreshold ?? 0.9;  // –°–Ω–∏–∑–∏–ª–∏ –ø–æ—Ä–æ–≥ –∞–≤—Ç–æ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è

      const mappings: TenderVersionMapping[] = [];
      const usedNewPositions = new Set<string>();

      // –°–æ–ø–æ—Å—Ç–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –ø–æ–∑–∏—Ü–∏–∏ —Å –Ω–æ–≤—ã–º–∏
      for (const oldPos of oldPositions || []) {
        let bestMatch: any = null;
        let bestScore = 0;

        for (const newPos of newPositions || []) {
          // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏
          if (usedNewPositions.has(newPos.id)) continue;

          // –†–∞—Å—á–µ—Ç fuzzy score –ø–æ work_name —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –∞–ª–≥–æ—Ä–∏—Ç–º–æ–º
          const fuzzyScore = this.calculateFuzzyScore(
            oldPos.work_name || '',
            newPos.work_name || ''
          );

          // –†–∞—Å—á–µ—Ç context score –ø–æ –Ω–æ–º–µ—Ä—É –ø–æ–∑–∏—Ü–∏–∏ (–ø–æ–≤—ã—à–µ–Ω–Ω–∞—è –≤–∞–∂–Ω–æ—Å—Ç—å)
          const contextScore = this.calculateContextScore(
            oldPos.position_number,
            newPos.position_number
          );

          // –†–∞—Å—á–µ—Ç hierarchy score –ø–æ —Ç–∏–ø—É –ø–æ–∑–∏—Ü–∏–∏
          const hierarchyScore = oldPos.position_type === newPos.position_type ? 1.0 :
            (!oldPos.position_type || !newPos.position_type) ? 0.5 : 0.0;

          // –û–±—â–∏–π score
          const totalScore = (fuzzyScore * fuzzyWeight) +
            (contextScore * contextWeight) +
            (hierarchyScore * hierarchyWeight);

          if (totalScore > bestScore) {
            bestScore = totalScore;
            bestMatch = {
              position: newPos,
              scores: { fuzzyScore, contextScore, hierarchyScore }
            };
          }
        }

        // –°–æ–∑–¥–∞–µ–º –º–∞–ø–ø–∏–Ω–≥
        if (bestMatch && bestScore >= fuzzyThreshold) {
          usedNewPositions.add(bestMatch.position.id);

          mappings.push({
            old_tender_id: oldTenderId,
            new_tender_id: newTenderId,
            old_position_id: oldPos.id,
            new_position_id: bestMatch.position.id,
            old_position_number: oldPos.position_number || oldPos.item_no,
            old_work_name: oldPos.work_name,
            old_volume: oldPos.volume || oldPos.manual_volume,
            old_unit: oldPos.unit,
            old_client_note: oldPos.client_note || oldPos.manual_note,
            old_item_no: oldPos.item_no,
            new_position_number: bestMatch.position.position_number || bestMatch.position.item_no,
            new_work_name: bestMatch.position.work_name,
            new_volume: bestMatch.position.volume || bestMatch.position.manual_volume,
            new_unit: bestMatch.position.unit,
            new_client_note: bestMatch.position.client_note || bestMatch.position.manual_note,
            new_item_no: bestMatch.position.item_no,
            mapping_type: bestScore >= autoConfirmThreshold ? 'exact' : 'fuzzy',
            confidence_score: bestScore,
            fuzzy_score: bestMatch.scores.fuzzyScore,
            context_score: bestMatch.scores.contextScore,
            hierarchy_score: bestMatch.scores.hierarchyScore,
            mapping_status: bestScore >= autoConfirmThreshold ? 'confirmed' : 'suggested',
            action_type: 'copy_boq',
            is_dop: oldPos.position_type === 'dop'
          });
        } else {
          // –ü–æ–∑–∏—Ü–∏—è —É–¥–∞–ª–µ–Ω–∞ –≤ –Ω–æ–≤–æ–π –≤–µ—Ä—Å–∏–∏
          mappings.push({
            old_tender_id: oldTenderId,
            new_tender_id: newTenderId,
            old_position_id: oldPos.id,
            old_position_number: oldPos.position_number || oldPos.item_no,
            old_work_name: oldPos.work_name,
            old_volume: oldPos.volume || oldPos.manual_volume,
            old_unit: oldPos.unit,
            old_client_note: oldPos.client_note || oldPos.manual_note,
            old_item_no: oldPos.item_no,
            mapping_type: 'deleted',
            confidence_score: 0,
            mapping_status: 'suggested',
            action_type: 'delete',
            is_dop: oldPos.position_type === 'dop'
          });
        }
      }

      // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –ø–æ–∑–∏—Ü–∏–∏ (–∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –±—ã–ª–∏ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω—ã)
      for (const newPos of newPositions || []) {
        if (!usedNewPositions.has(newPos.id)) {
          mappings.push({
            old_tender_id: oldTenderId,
            new_tender_id: newTenderId,
            new_position_id: newPos.id,
            new_position_number: newPos.position_number || newPos.item_no,
            new_work_name: newPos.work_name,
            new_volume: newPos.volume || newPos.manual_volume,
            new_unit: newPos.unit,
            new_client_note: newPos.client_note || newPos.manual_note,
            new_item_no: newPos.item_no,
            mapping_type: 'new',
            confidence_score: 0,
            mapping_status: 'suggested',
            action_type: 'create_new'
          });
        }
      }

      console.log(`‚úÖ Created ${mappings.length} position mappings`);
      return { data: mappings };
    } catch (error) {
      console.error('üí• Exception in autoMatchPositions:', error);
      return { error: error instanceof Error ? error.message : 'Unknown error' };
    }
  },

  /**
   * –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –º–∞–ø–ø–∏–Ω–≥–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
   */
  async saveMappings(mappings: TenderVersionMapping[]): Promise<ApiResponse<any[]>> {
    console.log('üöÄ Saving position mappings:', mappings.length);

    try {
      // –û—á–∏—â–∞–µ–º –º–∞–ø–ø–∏–Ω–≥–∏ –æ—Ç –ø–æ–ª—è 'key' –∏ –¥—Ä—É–≥–∏—Ö frontend-only –ø–æ–ª–µ–π
      const cleanMappings = mappings.map(({ key, ...mapping }: any) => mapping);

      const { data, error } = await supabase
        .from('tender_version_mappings')
        .insert(cleanMappings)
        .select();

      if (error) {
        console.error('‚ùå Failed to save mappings:', error);
        return { error: error.message };
      }

      console.log('‚úÖ Mappings saved successfully');
      return {
        data: data || [],
        message: `–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ ${mappings.length} —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–π`
      };
    } catch (error) {
      console.error('üí• Exception in saveMappings:', error);
      return { error: error instanceof Error ? error.message : 'Unknown error' };
    }
  },

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –º–∞–ø–ø–∏–Ω–≥–∏ –¥–ª—è —Ç–µ–Ω–¥–µ—Ä–∞
   */
  async getMappings(newTenderId: string): Promise<ApiResponse<TenderVersionMapping[]>> {
    console.log('üöÄ Getting mappings for tender:', newTenderId);

    try {
      const { data, error } = await supabase
        .from('tender_version_mappings')
        .select('*')
        .eq('new_tender_id', newTenderId)
        .order('confidence_score', { ascending: false });

      if (error) {
        console.error('‚ùå Failed to fetch mappings:', error);
        return { error: error.message };
      }

      console.log(`‚úÖ Fetched ${data?.length || 0} mappings`);
      return { data: data || [] };
    } catch (error) {
      console.error('üí• Exception in getMappings:', error);
      return { error: error instanceof Error ? error.message : 'Unknown error' };
    }
  },

  /**
   * –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –º–∞–ø–ø–∏–Ω–≥–∞
   */
  async updateMappingStatus(
    mappingId: string,
    status: 'confirmed' | 'rejected',
    newPositionId?: string
  ): Promise<ApiResponse<void>> {
    console.log('üöÄ Updating mapping status:', { mappingId, status, newPositionId });

    try {
      const updateData: any = {
        mapping_status: status,
        updated_at: new Date().toISOString()
      };

      if (newPositionId) {
        updateData.new_position_id = newPositionId;
        updateData.mapping_type = 'manual';
      }

      const { error } = await supabase
        .from('tender_version_mappings')
        .update(updateData)
        .eq('id', mappingId);

      if (error) {
        console.error('‚ùå Failed to update mapping:', error);
        return { error: error.message };
      }

      console.log('‚úÖ Mapping status updated');
      return { message: '–°—Ç–∞—Ç—É—Å –º–∞–ø–ø–∏–Ω–≥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω' };
    } catch (error) {
      console.error('üí• Exception in updateMappingStatus:', error);
      return { error: error instanceof Error ? error.message : 'Unknown error' };
    }
  },

  /**
   * –ü—Ä–∏–º–µ–Ω–∏—Ç—å –º–∞–ø–ø–∏–Ω–≥–∏ –∏ –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ
   */
  async applyMappings(newTenderId: string): Promise<ApiResponse<void>> {
    console.log('üöÄ Applying mappings for tender:', newTenderId);

    try {
      // –ü–æ–ª—É—á–∞–µ–º –í–°–ï –º–∞–ø–ø–∏–Ω–≥–∏ –¥–ª—è —Ç–µ–Ω–¥–µ—Ä–∞
      const { data: allMappings, error: mappingsError } = await supabase
        .from('tender_version_mappings')
        .select('*')
        .eq('new_tender_id', newTenderId);

      if (mappingsError) {
        console.error('‚ùå Failed to fetch mappings:', mappingsError);
        return { error: mappingsError.message };
      }

      // –ü—Ä–∏–º–µ–Ω—è–µ–º –í–°–ï –º–∞–ø–ø–∏–Ω–≥–∏ –∫—Ä–æ–º–µ —è–≤–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã—Ö
      // –≠—Ç–æ –Ω—É–∂–Ω–æ —á—Ç–æ–±—ã –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –≤—Å–µ –ø–æ–∑–∏—Ü–∏–∏ –º–µ–∂–¥—É –≤–µ—Ä—Å–∏—è–º–∏
      const mappingsToApply = (allMappings || []).filter(m =>
        m.mapping_status !== 'rejected' && // –ò—Å–∫–ª—é—á–∞–µ–º —Ç–æ–ª—å–∫–æ —è–≤–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã–µ
        m.action_type === 'copy_boq' // –¢–æ–ª—å–∫–æ –º–∞–ø–ø–∏–Ω–≥–∏ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è BOQ
      );

      console.log(`üì¶ Found ${mappingsToApply.length} mappings to apply (–∏–∑ ${allMappings?.length || 0} –≤—Å–µ–≥–æ)`);

      // –ü—Ä–∏–º–µ–Ω—è–µ–º –∫–∞–∂–¥—ã–π –º–∞–ø–ø–∏–Ω–≥
      let successCount = 0;
      let errorCount = 0;

      for (const mapping of mappingsToApply) {
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –í–°–ï –º–∞–ø–ø–∏–Ω–≥–∏ –ø–µ—Ä–µ–¥ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ–º
        if (mapping.mapping_status !== 'confirmed') {
          await supabase
            .from('tender_version_mappings')
            .update({ mapping_status: 'confirmed', updated_at: new Date().toISOString() })
            .eq('id', mapping.id);
        }

        // –ü–µ—Ä–µ–Ω–æ—Å–∏–º BOQ items
        if (mapping.action_type === 'copy_boq' &&
            mapping.old_position_id &&
            mapping.new_position_id) {

          console.log(`üìã Transferring BOQ items for mapping:`, {
            mappingId: mapping.id,
            oldPosition: mapping.old_position_id,
            newPosition: mapping.new_position_id,
            oldName: mapping.old_work_name,
            newName: mapping.new_work_name
          });

          // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∏–º, –µ—Å—Ç—å –ª–∏ BOQ items –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞
          const { data: boqCount, error: countError } = await supabase
            .from('boq_items')
            .select('id', { count: 'exact', head: true })
            .eq('client_position_id', mapping.old_position_id);

          console.log(`üìä Found ${boqCount || 0} BOQ items in old position`);

          const { error } = await supabase.rpc('transfer_boq_items', {
            p_mapping_id: mapping.id
          });

          if (error) {
            console.error(`‚ùå Failed to transfer BOQ for mapping ${mapping.id}:`, error);
            console.error('  Old position:', mapping.old_position_number, mapping.old_work_name);
            console.error('  New position:', mapping.new_position_number, mapping.new_work_name);
            errorCount++;
          } else {
            console.log(`‚úÖ Transferred BOQ: ${mapping.old_position_number} -> ${mapping.new_position_number}`);

            // –ü—Ä–æ–≤–µ—Ä–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            const { data: newBoqCount, error: newCountError } = await supabase
              .from('boq_items')
              .select('id', { count: 'exact', head: true })
              .eq('client_position_id', mapping.new_position_id);

            console.log(`‚úÖ New position now has ${newBoqCount || 0} BOQ items`);
            successCount++;
          }
        }
      }

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –î–û–ü –ø–æ–∑–∏—Ü–∏–∏ - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–Ω–æ—Å–∏–º –∏—Ö —Å —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–º–∏ –ø–æ–∑–∏—Ü–∏—è–º–∏
      const { data: oldTenderId } = await supabase
        .from('tender_version_mappings')
        .select('old_tender_id')
        .eq('new_tender_id', newTenderId)
        .limit(1)
        .single();

      if (oldTenderId) {
        console.log('üîÑ Transferring DOP positions...');

        // –ü–µ—Ä–µ–Ω–æ—Å–∏–º –î–û–ü –ø–æ–∑–∏—Ü–∏–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
        const dopResult = await this.transferDopPositionsWithMappings(
          oldTenderId.old_tender_id,
          newTenderId
        );

        if (dopResult.error) {
          console.error('‚ùå Failed to transfer DOP positions:', dopResult.error);
        } else if (dopResult.data) {
          console.log(`‚úÖ Transferred ${dopResult.data.dopCount || 0} DOP positions`);
          console.log(`‚úÖ Transferred BOQ items for ${dopResult.data.boqTransferCount || 0} DOP positions`);
        }
      }

      console.log(`‚úÖ Applied mappings: ${successCount} success, ${errorCount} errors`);
      return {
        message: `–ü—Ä–∏–º–µ–Ω–µ–Ω–æ ${successCount} —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–π${errorCount > 0 ? `, ${errorCount} –æ—à–∏–±–æ–∫` : ''}`
      };
    } catch (error) {
      console.error('üí• Exception in applyMappings:', error);
      return { error: error instanceof Error ? error.message : 'Unknown error' };
    }
  },

  /**
   * –ü–µ—Ä–µ–Ω–æ—Å –î–û–ü –ø–æ–∑–∏—Ü–∏–π —Å —É—á–µ—Ç–æ–º –º–∞–ø–ø–∏–Ω–≥–æ–≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏—Ö –ø–æ–∑–∏—Ü–∏–π
   */
  async transferDopPositionsWithMappings(
    oldTenderId: string,
    newTenderId: string
  ): Promise<ApiResponse<{ dopCount: number; boqTransferCount: number }>> {
    console.log('üöÄ Transferring DOP positions with mappings');

    try {
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –î–û–ü –ø–æ–∑–∏—Ü–∏–∏ –∏–∑ —Å—Ç–∞—Ä–æ–≥–æ —Ç–µ–Ω–¥–µ—Ä–∞
      const { data: dopPositions, error: dopError } = await supabase
        .from('client_positions')
        .select('*')
        .eq('tender_id', oldTenderId)
        .eq('is_additional', true)  // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–ª–∞–≥ is_additional –¥–ª—è –î–û–ü –ø–æ–∑–∏—Ü–∏–π
        .order('position_number');

      if (dopError) {
        console.error('‚ùå Failed to fetch DOP positions:', dopError);
        return { error: dopError.message };
      }

      if (!dopPositions || dopPositions.length === 0) {
        console.log('‚ÑπÔ∏è No DOP positions found in old tender');
        return { data: { dopCount: 0, boqTransferCount: 0 } };
      }

      console.log(`üì¶ Found ${dopPositions.length} DOP positions to transfer`);

      // –ü–æ–ª—É—á–∞–µ–º –º–∞–ø–ø–∏–Ω–≥–∏ –¥–ª—è —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏—Ö –ø–æ–∑–∏—Ü–∏–π
      const { data: mappings, error: mappingError } = await supabase
        .from('tender_version_mappings')
        .select('*')
        .eq('new_tender_id', newTenderId)
        .in('mapping_status', ['confirmed', 'applied']);

      if (mappingError) {
        console.error('‚ùå Failed to fetch mappings:', mappingError);
        return { error: mappingError.message };
      }

      let dopCount = 0;
      let boqTransferCount = 0;

      // –ü–µ—Ä–µ–Ω–æ—Å–∏–º –∫–∞–∂–¥—É—é –î–û–ü –ø–æ–∑–∏—Ü–∏—é
      for (const dopPosition of dopPositions) {
        // –ù–∞—Ö–æ–¥–∏–º –º–∞–ø–ø–∏–Ω–≥ –¥–ª—è —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π –ø–æ–∑–∏—Ü–∏–∏ (–∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏–º—è –ø–æ–ª—è)
        const parentMapping = mappings?.find(m => m.old_position_id === dopPosition.parent_position_id);

        let newParentId = null;
        if (!parentMapping || !parentMapping.new_position_id) {
          console.warn(`‚ö†Ô∏è No parent mapping found for DOP position ${dopPosition.id}`);

          // –ï—Å–ª–∏ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∞—è –ø–æ–∑–∏—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –¥—Ä—É–≥—É—é –ø–æ–∑–∏—Ü–∏—é –≤ —Ç–æ–º –∂–µ —Ä–∞–∑–¥–µ–ª–µ
          const { data: alternativeParent } = await supabase
            .from('client_positions')
            .select('id')
            .eq('tender_id', newTenderId)
            .eq('is_additional', false)  // –ù–µ –î–û–ü –ø–æ–∑–∏—Ü–∏—è
            .limit(1)
            .single();

          if (!alternativeParent) {
            console.error(`‚ùå No alternative parent found for orphaned DOP ${dopPosition.id}`);
            continue;
          }

          newParentId = alternativeParent.id;
          console.log(`üìé Reassigned orphaned DOP to alternative parent ${alternativeParent.id}`);
        } else {
          newParentId = parentMapping.new_position_id;
        }

        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –î–û–ü –ø–æ–∑–∏—Ü–∏—é —Å–æ –≤—Å–µ–º–∏ –ø–æ–ª—è–º–∏
        const { data: newDopPosition, error: createError } = await supabase
          .from('client_positions')
          .insert({
            tender_id: newTenderId,
            parent_position_id: newParentId,  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π ID —Ä–æ–¥–∏—Ç–µ–ª—è
            position_number: dopPosition.position_number,
            item_no: dopPosition.item_no,
            work_name: dopPosition.work_name,
            unit: dopPosition.unit,
            volume: dopPosition.volume,
            manual_volume: dopPosition.manual_volume,
            client_note: dopPosition.client_note,
            manual_note: dopPosition.manual_note,
            position_type: dopPosition.position_type,  // –ö–æ–ø–∏—Ä—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–∏–ø
            hierarchy_level: dopPosition.hierarchy_level,
            is_additional: true,  // –í–∞–∂–Ω–æ! –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –¥–ª—è –î–û–ü
            total_materials_cost: 0,
            total_works_cost: 0,
            total_commercial_materials_cost: 0,
            total_commercial_works_cost: 0
          })
          .select()
          .single();

        if (createError) {
          console.error(`‚ùå Failed to create DOP position:`, createError);
          continue;
        }

        dopCount++;
        console.log(`‚úÖ Created DOP position ${newDopPosition.id}`);

        // –ü–µ—Ä–µ–Ω–æ—Å–∏–º BOQ items –¥–ª—è —ç—Ç–æ–π –î–û–ü –ø–æ–∑–∏—Ü–∏–∏
        const { data: boqItems, error: boqError } = await supabase
          .from('boq_items')
          .select('*')
          .eq('client_position_id', dopPosition.id);

        if (boqError) {
          console.error(`‚ùå Failed to fetch BOQ items for DOP:`, boqError);
          continue;
        }

        if (boqItems && boqItems.length > 0) {
          // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ BOQ items
          const newBoqItems = boqItems.map(item => ({
            ...item,
            id: undefined, // –ü—É—Å—Ç—å –ë–î —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤—ã–π ID
            client_position_id: newDopPosition.id,
            created_at: undefined,
            updated_at: undefined
          }));

          const { error: insertBoqError } = await supabase
            .from('boq_items')
            .insert(newBoqItems);

          if (insertBoqError) {
            console.error(`‚ùå Failed to insert BOQ items for DOP:`, insertBoqError);
          } else {
            boqTransferCount++;
            console.log(`‚úÖ Transferred ${boqItems.length} BOQ items for DOP ${newDopPosition.id}`);
          }
        }
      }

      console.log(`‚úÖ Successfully transferred ${dopCount} DOP positions with BOQ items`);
      return {
        data: { dopCount, boqTransferCount },
        message: `–ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ ${dopCount} –î–û–ü –ø–æ–∑–∏—Ü–∏–π`
      };
    } catch (error) {
      console.error('üí• Exception in transferDopPositionsWithMappings:', error);
      return { error: error instanceof Error ? error.message : 'Unknown error' };
    }
  },

  /**
   * –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ fuzzy score
   */
  calculateFuzzyScore(str1: string, str2: string): number {
    if (!str1 || !str2) return 0;

    const s1 = str1.toLowerCase().trim();
    const s2 = str2.toLowerCase().trim();

    if (s1 === s2) return 1;

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –Ω–∞—á–∞–ª–∞ —Å—Ç—Ä–æ–∫–∏ (–ø–µ—Ä–≤—ã–µ 30 —Å–∏–º–≤–æ–ª–æ–≤)
    const prefixLength = 30;
    const prefix1 = s1.substring(0, prefixLength);
    const prefix2 = s2.substring(0, prefixLength);

    // –ï—Å–ª–∏ –Ω–∞—á–∞–ª–∞ —Å—Ç—Ä–æ–∫ —Å–æ–≤–ø–∞–¥–∞—é—Ç –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ, –¥–∞–µ–º –±–æ–Ω—É—Å
    if (prefix1 === prefix2 && prefix1.length >= 10) {
      // –ú–∏–Ω–∏–º—É–º 0.7 –µ—Å–ª–∏ –Ω–∞—á–∞–ª–∞ —Å–æ–≤–ø–∞–¥–∞—é—Ç
      return Math.max(0.7, this.calculateLevenshteinScore(s1, s2));
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –¥—Ä—É–≥ –≤ –¥—Ä—É–≥–µ
    if (s1.includes(s2) || s2.includes(s1)) {
      return 0.8; // –í—ã—Å–æ–∫–∏–π score –µ—Å–ª–∏ –æ–¥–Ω–∞ —Å—Ç—Ä–æ–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥—Ä—É–≥—É—é
    }

    // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ä–∞—Å—á–µ—Ç —á–µ—Ä–µ–∑ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –õ–µ–≤–µ–Ω—à—Ç–µ–π–Ω–∞
    return this.calculateLevenshteinScore(s1, s2);
  },

  /**
   * –†–∞—Å—á–µ—Ç score —á–µ—Ä–µ–∑ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –õ–µ–≤–µ–Ω—à—Ç–µ–π–Ω–∞
   */
  calculateLevenshteinScore(s1: string, s2: string): number {
    const len1 = s1.length;
    const len2 = s2.length;
    const matrix: number[][] = [];

    for (let i = 0; i <= len1; i++) {
      matrix[i] = [i];
    }

    for (let j = 0; j <= len2; j++) {
      matrix[0][j] = j;
    }

    for (let i = 1; i <= len1; i++) {
      for (let j = 1; j <= len2; j++) {
        if (s1[i - 1] === s2[j - 1]) {
          matrix[i][j] = matrix[i - 1][j - 1];
        } else {
          matrix[i][j] = Math.min(
            matrix[i - 1][j] + 1,
            matrix[i][j - 1] + 1,
            matrix[i - 1][j - 1] + 1
          );
        }
      }
    }

    const distance = matrix[len1][len2];
    const maxLen = Math.max(len1, len2);
    return Math.max(0, 1 - distance / maxLen);
  },

  /**
   * –°–æ–∑–¥–∞—Ç—å —Ä—É—á–Ω–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –º–µ–∂–¥—É –ø–æ–∑–∏—Ü–∏—è–º–∏
   */
  async createManualMapping(
    oldTenderId: string,
    newTenderId: string,
    oldPositionId: string,
    newPositionId: string | null
  ): Promise<ApiResponse<TenderVersionMapping>> {
    console.log('üöÄ Creating manual mapping:', { oldPositionId, newPositionId });

    try {
      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∞—Ä–æ–π –ø–æ–∑–∏—Ü–∏–∏
      const { data: oldPosition, error: oldError } = await supabase
        .from('client_positions')
        .select('*')
        .eq('id', oldPositionId)
        .single();

      if (oldError) {
        console.error('‚ùå Failed to fetch old position:', oldError);
        return { error: oldError.message };
      }

      // –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞ –Ω–æ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è - –ø–æ–ª—É—á–∞–µ–º –µ—ë –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
      let newPosition = null;
      if (newPositionId) {
        const { data: newPos, error: newError } = await supabase
          .from('client_positions')
          .select('*')
          .eq('id', newPositionId)
          .single();

        if (newError) {
          console.error('‚ùå Failed to fetch new position:', newError);
          return { error: newError.message };
        }
        newPosition = newPos;
      }

      // –°–æ–∑–¥–∞–µ–º –º–∞–ø–ø–∏–Ω–≥
      const mapping: TenderVersionMapping = {
        old_tender_id: oldTenderId,
        new_tender_id: newTenderId,
        old_position_id: oldPositionId,
        new_position_id: newPositionId,
        old_position_number: oldPosition.position_number || oldPosition.item_no,
        old_work_name: oldPosition.work_name,
        old_volume: oldPosition.volume || oldPosition.manual_volume,
        old_unit: oldPosition.unit,
        old_client_note: oldPosition.client_note || oldPosition.manual_note,
        old_item_no: oldPosition.item_no,
        new_position_number: newPosition?.position_number || newPosition?.item_no,
        new_work_name: newPosition?.work_name,
        new_volume: newPosition?.volume || newPosition?.manual_volume,
        new_unit: newPosition?.unit,
        new_client_note: newPosition?.client_note || newPosition?.manual_note,
        new_item_no: newPosition?.item_no,
        mapping_type: 'manual',
        confidence_score: 1.0, // –†—É—á–Ω–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∏–º–µ–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
        mapping_status: 'confirmed',
        action_type: newPositionId ? 'copy_boq' : 'delete'
      };

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É
      const { data, error } = await supabase
        .from('tender_version_mappings')
        .insert(mapping)
        .select()
        .single();

      if (error) {
        console.error('‚ùå Failed to save manual mapping:', error);
        return { error: error.message };
      }

      console.log('‚úÖ Manual mapping created');
      return { data, message: '–†—É—á–Ω–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ' };
    } catch (error) {
      console.error('üí• Exception in createManualMapping:', error);
      return { error: error instanceof Error ? error.message : 'Unknown error' };
    }
  },

  /**
   * –û–±–Ω–æ–≤–∏—Ç—å —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π
   */
  async updateMapping(
    mappingId: string,
    newPositionId: string | null
  ): Promise<ApiResponse<void>> {
    console.log('üöÄ Updating mapping:', { mappingId, newPositionId });

    try {
      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –º–∞–ø–ø–∏–Ω–≥
      const { data: currentMapping, error: fetchError } = await supabase
        .from('tender_version_mappings')
        .select('*')
        .eq('id', mappingId)
        .single();

      if (fetchError) {
        console.error('‚ùå Failed to fetch mapping:', fetchError);
        return { error: fetchError.message };
      }

      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–æ–≤–æ–π –ø–æ–∑–∏—Ü–∏–∏ (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞)
      let newPosition = null;
      if (newPositionId) {
        const { data: newPos, error: newError } = await supabase
          .from('client_positions')
          .select('*')
          .eq('id', newPositionId)
          .single();

        if (newError) {
          console.error('‚ùå Failed to fetch new position:', newError);
          return { error: newError.message };
        }
        newPosition = newPos;
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º –º–∞–ø–ø–∏–Ω–≥
      const updateData: any = {
        new_position_id: newPositionId,
        new_position_number: newPosition?.position_number || newPosition?.item_no || null,
        new_work_name: newPosition?.work_name || null,
        new_volume: newPosition?.volume || newPosition?.manual_volume || null,
        new_unit: newPosition?.unit || null,
        new_client_note: newPosition?.client_note || newPosition?.manual_note || null,
        new_item_no: newPosition?.item_no || null,
        mapping_type: 'manual',
        confidence_score: 1.0,
        mapping_status: 'confirmed',
        action_type: newPositionId ? 'copy_boq' : 'delete',
        updated_at: new Date().toISOString()
      };

      const { error } = await supabase
        .from('tender_version_mappings')
        .update(updateData)
        .eq('id', mappingId);

      if (error) {
        console.error('‚ùå Failed to update mapping:', error);
        return { error: error.message };
      }

      console.log('‚úÖ Mapping updated successfully');
      return { message: '–°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ' };
    } catch (error) {
      console.error('üí• Exception in updateMapping:', error);
      return { error: error instanceof Error ? error.message : 'Unknown error' };
    }
  },

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è
   */
  async getAvailablePositionsForMapping(
    newTenderId: string
  ): Promise<ApiResponse<any[]>> {
    console.log('üöÄ Getting available positions for mapping:', newTenderId);

    try {
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–æ–∑–∏—Ü–∏–∏ –∏–∑ –Ω–æ–≤–æ–π –≤–µ—Ä—Å–∏–∏
      const { data: positions, error } = await supabase
        .from('client_positions')
        .select('id, position_number, item_no, work_name, unit, volume')
        .eq('tender_id', newTenderId)
        .order('position_number');

      if (error) {
        console.error('‚ùå Failed to fetch positions:', error);
        return { error: error.message };
      }

      // –ü–æ–ª—É—á–∞–µ–º —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏
      const { data: mappings, error: mappingError } = await supabase
        .from('tender_version_mappings')
        .select('new_position_id')
        .eq('new_tender_id', newTenderId)
        .not('new_position_id', 'is', null);

      if (mappingError) {
        console.error('‚ùå Failed to fetch mappings:', mappingError);
        return { error: mappingError.message };
      }

      const usedPositionIds = new Set(mappings?.map(m => m.new_position_id) || []);

      // –ü–æ–º–µ—á–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏
      const positionsWithStatus = positions?.map(pos => ({
        ...pos,
        isUsed: usedPositionIds.has(pos.id),
        label: `${pos.position_number || pos.item_no || ''} - ${pos.work_name}`.trim()
      })) || [];

      console.log(`‚úÖ Found ${positionsWithStatus.length} positions (${usedPositionIds.size} used)`);
      return { data: positionsWithStatus };
    } catch (error) {
      console.error('üí• Exception in getAvailablePositionsForMapping:', error);
      return { error: error instanceof Error ? error.message : 'Unknown error' };
    }
  },

  /**
   * –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ context score
   */
  calculateContextScore(pos1: string | number | null | undefined, pos2: string | number | null | undefined): number {
    // –ü—Ä–∏–≤–æ–¥–∏–º –∫ —Å—Ç—Ä–æ–∫–∞–º –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º null/undefined
    const position1 = String(pos1 || '');
    const position2 = String(pos2 || '');

    // –ï—Å–ª–∏ –æ–¥–Ω–∞ –∏–ª–∏ –æ–±–µ –ø–æ–∑–∏—Ü–∏–∏ –ø—É—Å—Ç—ã–µ
    if (!position1 || !position2) return 0.3;

    // –ï—Å–ª–∏ –ø–æ–∑–∏—Ü–∏–∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–æ–≤–ø–∞–¥–∞—é—Ç - –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π score
    if (position1 === position2) return 1.0;

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–∏–µ –Ω–æ–º–µ—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "1.1", "2.3.4")
    const parts1 = position1.split('.');
    const parts2 = position2.split('.');

    // –ï—Å–ª–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –Ω–æ–º–µ—Ä–æ–≤ –æ–¥–∏–Ω–∞–∫–æ–≤–∞—è
    if (parts1.length === parts2.length) {
      let matchCount = 0;
      for (let i = 0; i < parts1.length; i++) {
        if (parts1[i] === parts2[i]) {
          matchCount++;
        }
      }
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º score –ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é —á–∞—Å—Ç–µ–π
      return matchCount / parts1.length;
    }

    // –î–ª—è –ø—Ä–æ—Å—Ç—ã—Ö —á–∏—Å–ª–æ–≤—ã—Ö –Ω–æ–º–µ—Ä–æ–≤
    try {
      const num1 = parseInt(position1);
      const num2 = parseInt(position2);

      if (!isNaN(num1) && !isNaN(num2)) {
        const diff = Math.abs(num1 - num2);
        if (diff === 0) return 1.0;
        if (diff === 1) return 0.85;  // –£–≤–µ–ª–∏—á–∏–ª–∏ score –¥–ª—è —Å–æ—Å–µ–¥–Ω–∏—Ö –ø–æ–∑–∏—Ü–∏–π
        if (diff === 2) return 0.7;
        if (diff <= 5) return 0.5;
        return 0.3;
      }
    } catch {
      return 0.3;
    }

    return 0.3;
  },

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –≤–µ—Ä—Å–∏–π —Ç–µ–Ω–¥–µ—Ä–∞
   */
  async getVersionHistory(tenderId: string): Promise<ApiResponse<any[]>> {
    console.log('üöÄ Getting version history for tender:', tenderId);

    try {
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≤–µ—Ä—Å–∏–∏ —ç—Ç–æ–≥–æ —Ç–µ–Ω–¥–µ—Ä–∞
      const { data: tender } = await supabase
        .from('tenders')
        .select('id, parent_version_id')
        .eq('id', tenderId)
        .single();

      if (!tender) {
        return { error: 'Tender not found' };
      }

      // –ù–∞—Ö–æ–¥–∏–º –∫–æ—Ä–Ω–µ–≤–æ–π —Ç–µ–Ω–¥–µ—Ä
      let rootTenderId = tenderId;
      if (tender.parent_version_id) {
        const { data: parent } = await supabase
          .from('tenders')
          .select('id, parent_version_id')
          .eq('id', tender.parent_version_id)
          .single();

        if (parent && !parent.parent_version_id) {
          rootTenderId = parent.id;
        }
      }

      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≤–µ—Ä—Å–∏–∏
      const { data: versions, error } = await supabase
        .from('tenders')
        .select('id, name, version, version_status, version_created_at, created_at')
        .or(`id.eq.${rootTenderId},parent_version_id.eq.${rootTenderId}`)
        .order('version', { ascending: true });

      if (error) {
        console.error('‚ùå Failed to fetch version history:', error);
        return { error: error.message };
      }

      console.log(`‚úÖ Found ${versions?.length || 0} versions`);
      return { data: versions || [] };
    } catch (error) {
      console.error('üí• Exception in getVersionHistory:', error);
      return { error: error instanceof Error ? error.message : 'Unknown error' };
    }
  }
};