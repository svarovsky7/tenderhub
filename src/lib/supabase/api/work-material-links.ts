import { supabase } from '../client';
import type { Database } from '../types/database';

// –¢–∏–ø—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ —Å–≤—è–∑—è–º–∏
export interface WorkMaterialLink {
  id?: string;
  client_position_id: string;
  work_boq_item_id: string;
  material_boq_item_id: string;
  material_quantity_per_work?: number;
  usage_coefficient?: number;
  notes?: string;
  created_at?: string;
  updated_at?: string;
}

export interface WorkMaterialLinkDetailed extends WorkMaterialLink {
  work_description?: string;
  work_unit?: string;
  work_quantity?: number;
  material_description?: string;
  material_unit?: string;
  material_quantity?: number;
  material_unit_rate?: number;
  total_material_needed?: number;
  total_material_cost?: number;
}

export const workMaterialLinksApi = {
  /**
   * –°–æ–∑–¥–∞—Ç—å —Å–≤—è–∑—å –º–µ–∂–¥—É —Ä–∞–±–æ—Ç–æ–π –∏ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–º
   */
  async createLink(link: WorkMaterialLink) {
    console.log('üöÄ Creating work-material link:', link);
    
    try {
      const { data, error } = await supabase
        .from('work_material_links')
        .insert({
          client_position_id: link.client_position_id,
          work_boq_item_id: link.work_boq_item_id,
          material_boq_item_id: link.material_boq_item_id,
          material_quantity_per_work: link.material_quantity_per_work || 1.0,
          usage_coefficient: link.usage_coefficient || 1.0,
          notes: link.notes
        })
        .select()
        .single();

      console.log('üì¶ Create link result:', { data, error });

      if (error) {
        console.error('‚ùå Failed to create link:', error);
        return { error: error.message };
      }

      console.log('‚úÖ Work-material link created successfully');
      return { data };
    } catch (error) {
      console.error('üí• Exception in createLink:', error);
      return { error: error instanceof Error ? error.message : 'Unknown error' };
    }
  },

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Å–≤—è–∑–∏ –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏ –∑–∞–∫–∞–∑—á–∏–∫–∞
   */
  async getLinksByPosition(positionId: string) {
    console.log('üöÄ Getting links for position:', positionId);
    
    try {
      const { data, error } = await supabase
        .from('work_material_links_detailed')
        .select('*')
        .eq('client_position_id', positionId);

      console.log('üì¶ Links fetched:', { count: data?.length, error });

      if (error) {
        console.error('‚ùå Failed to fetch links:', error);
        return { error: error.message };
      }

      console.log('‚úÖ Links retrieved successfully');
      return { data };
    } catch (error) {
      console.error('üí• Exception in getLinksByPosition:', error);
      return { error: error instanceof Error ? error.message : 'Unknown error' };
    }
  },

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —Ä–∞–±–æ—Ç–æ–π
   */
  async getMaterialsForWork(workBoqItemId: string) {
    console.log('üöÄ Getting materials for work:', workBoqItemId);
    
    try {
      const { data, error } = await supabase
        .rpc('get_materials_for_work', { 
          p_work_boq_item_id: workBoqItemId 
        });

      console.log('üì¶ Materials fetched:', { count: data?.length, error });

      if (error) {
        console.error('‚ùå Failed to fetch materials:', error);
        return { error: error.message };
      }

      console.log('‚úÖ Materials retrieved successfully');
      return { data };
    } catch (error) {
      console.error('üí• Exception in getMaterialsForWork:', error);
      return { error: error instanceof Error ? error.message : 'Unknown error' };
    }
  },

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Ä–∞–±–æ—Ç—ã, –∏—Å–ø–æ–ª—å–∑—É—é—â–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª
   */
  async getWorksUsingMaterial(materialBoqItemId: string) {
    console.log('üöÄ Getting works using material:', materialBoqItemId);
    
    try {
      const { data, error } = await supabase
        .rpc('get_works_using_material', { 
          p_material_boq_item_id: materialBoqItemId 
        });

      console.log('üì¶ Works fetched:', { count: data?.length, error });

      if (error) {
        console.error('‚ùå Failed to fetch works:', error);
        return { error: error.message };
      }

      console.log('‚úÖ Works retrieved successfully');
      return { data };
    } catch (error) {
      console.error('üí• Exception in getWorksUsingMaterial:', error);
      return { error: error instanceof Error ? error.message : 'Unknown error' };
    }
  },

  /**
   * –û–±–Ω–æ–≤–∏—Ç—å —Å–≤—è–∑—å
   */
  async updateLink(linkId: string, updates: Partial<WorkMaterialLink>) {
    console.log('üöÄ Updating work-material link:', { linkId, updates });
    
    try {
      const { data, error } = await supabase
        .from('work_material_links')
        .update({
          material_quantity_per_work: updates.material_quantity_per_work,
          usage_coefficient: updates.usage_coefficient,
          notes: updates.notes
        })
        .eq('id', linkId)
        .select()
        .single();

      console.log('üì¶ Update result:', { data, error });

      if (error) {
        console.error('‚ùå Failed to update link:', error);
        return { error: error.message };
      }

      console.log('‚úÖ Link updated successfully');
      return { data };
    } catch (error) {
      console.error('üí• Exception in updateLink:', error);
      return { error: error instanceof Error ? error.message : 'Unknown error' };
    }
  },

  /**
   * –£–¥–∞–ª–∏—Ç—å —Å–≤—è–∑—å
   */
  async deleteLink(linkId: string) {
    console.log('üöÄ Deleting work-material link:', linkId);
    
    try {
      const { error } = await supabase
        .from('work_material_links')
        .delete()
        .eq('id', linkId);

      console.log('üì¶ Delete result:', { error });

      if (error) {
        console.error('‚ùå Failed to delete link:', error);
        return { error: error.message };
      }

      console.log('‚úÖ Link deleted successfully');
      return { data: null };
    } catch (error) {
      console.error('üí• Exception in deleteLink:', error);
      return { error: error instanceof Error ? error.message : 'Unknown error' };
    }
  },

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å–≤—è–∑–∏
   */
  async checkLinkExists(workBoqItemId: string, materialBoqItemId: string) {
    console.log('üöÄ Checking if link exists:', { workBoqItemId, materialBoqItemId });
    
    try {
      const { data, error } = await supabase
        .from('work_material_links')
        .select('id')
        .eq('work_boq_item_id', workBoqItemId)
        .eq('material_boq_item_id', materialBoqItemId)
        .single();

      console.log('üì¶ Check result:', { exists: !!data, error });

      if (error && error.code !== 'PGRST116') { // PGRST116 = no rows returned
        console.error('‚ùå Failed to check link:', error);
        return { error: error.message };
      }

      return { exists: !!data, linkId: data?.id };
    } catch (error) {
      console.error('üí• Exception in checkLinkExists:', error);
      return { error: error instanceof Error ? error.message : 'Unknown error' };
    }
  }
};