import { supabase } from '../client';
import type { Database } from '../types/database';

type CostCategory = Database['public']['Tables']['cost_categories']['Row'];
type DetailCostCategory = Database['public']['Tables']['detail_cost_categories']['Row'];
type Location = Database['public']['Tables']['location']['Row'];

export interface CostCategoryImportData {
  categoryName: string;
  categoryUnit?: string;
  detailCategoryName: string;
  detailCategoryUnit: string;
  locationName: string;
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∑–∞—Ç—Ä–∞—Ç
export async function getCostCategories() {
  console.log('üöÄ [getCostCategories] called');
  
  const { data, error } = await supabase
    .from('cost_categories')
    .select('*');

  if (error) {
    console.error('‚ùå [getCostCategories] failed:', error);
    throw error;
  }

  console.log('‚úÖ [getCostCategories] completed:', data?.length, 'categories');
  return data;
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
export async function getDetailCostCategories(categoryId?: string) {
  console.log('üöÄ [getDetailCostCategories] called with:', { categoryId });
  
  let query = supabase
    .from('detail_cost_categories')
    .select(`
      *,
      cost_categories!inner(
        id,
        name,
        code
      )
    `);

  if (categoryId) {
    query = query.eq('category_id', categoryId);
  }

  const { data, error } = await query;

  if (error) {
    console.error('‚ùå [getDetailCostCategories] failed:', error);
    throw error;
  }

  console.log('‚úÖ [getDetailCostCategories] completed:', data?.length, 'detail categories');
  return data;
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–π
export async function getLocations(parentId?: string) {
  console.log('üöÄ [getLocations] called with:', { parentId });

  let query = supabase
    .from('location')
    .select('*');

  if (parentId === null) {
    query = query.is('parent_id', null);
  } else if (parentId) {
    query = query.eq('parent_id', parentId);
  }

  const { data, error } = await query;

  if (error) {
    console.error('‚ùå [getLocations] failed:', error);
    throw error;
  }

  console.log('‚úÖ [getLocations] completed:', data?.length, 'locations');
  return data;
}

// Batch load all categories and locations for Excel export
export async function getAllCategoriesAndLocations() {
  console.log('üöÄ [getAllCategoriesAndLocations] Starting batch load...');
  const startTime = performance.now();

  try {
    // Load all data in parallel
    const [categories, detailCategories, locations] = await Promise.all([
      supabase
        .from('cost_categories')
        .select('*'),
      supabase
        .from('detail_cost_categories')
        .select('*'),
      supabase
        .from('location')
        .select('*')
    ]);

    if (categories.error) throw categories.error;
    if (detailCategories.error) throw detailCategories.error;
    if (locations.error) throw locations.error;

    // Create Maps for fast access by ID
    const categoryMap = new Map();
    const detailCategoryMap = new Map();
    const locationMap = new Map();

    categories.data?.forEach(cat => categoryMap.set(cat.id, cat));
    detailCategories.data?.forEach(detail => detailCategoryMap.set(detail.id, detail));
    locations.data?.forEach(loc => locationMap.set(loc.id, loc));

    const loadTime = performance.now() - startTime;
    console.log(`‚úÖ [getAllCategoriesAndLocations] Loaded in ${loadTime.toFixed(0)}ms:`,
      `${categories.data?.length || 0} categories,`,
      `${detailCategories.data?.length || 0} detail categories,`,
      `${locations.data?.length || 0} locations`);

    return {
      categories: categories.data || [],
      detailCategories: detailCategories.data || [],
      locations: locations.data || [],
      categoryMap,
      detailCategoryMap,
      locationMap
    };
  } catch (error) {
    console.error('‚ùå [getAllCategoriesAndLocations] failed:', error);
    throw error;
  }
}

// –°–æ–∑–¥–∞–Ω–∏–µ –∏–ª–∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∑–∞—Ç—Ä–∞—Ç
async function upsertCostCategory(name: string, unit?: string): Promise<CostCategory | null> {
  console.log('üöÄ [upsertCostCategory] called with:', { name, unit });
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ
    const { data: existing, error: selectError } = await supabase
      .from('cost_categories')
      .select('*')
      .eq('name', name)
      .single();

    if (existing) {
      console.log('‚úÖ [upsertCostCategory] found existing:', existing.id);
      return existing;
    }

    // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –Ω–µ "PGRST116" (not found), —Ç–æ —ç—Ç–æ —Ä–µ–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞
    if (selectError && selectError.code !== 'PGRST116') {
      console.error('‚ùå [upsertCostCategory] select failed:', selectError);
      throw selectError;
    }

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    const code = `CAT-${Date.now()}`;
    const { data, error } = await supabase
      .from('cost_categories')
      .insert({
        code,
        name,
        description: unit ? `–ï–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è: ${unit}` : undefined
      })
      .select()
      .single();

    if (error) {
      console.error('‚ùå [upsertCostCategory] insert failed:', error);
      throw error;
    }

    if (!data) {
      console.error('‚ùå [upsertCostCategory] no data returned after insert');
      throw new Error('Failed to create category: no data returned');
    }

    console.log('‚úÖ [upsertCostCategory] created:', data.id);
    return data;
  } catch (error) {
    console.error('‚ùå [upsertCostCategory] unexpected error:', error);
    throw error;
  }
}

// –°–æ–∑–¥–∞–Ω–∏–µ –∏–ª–∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
async function upsertDetailCostCategory(
  categoryId: string,
  name: string,
  unit: string
): Promise<DetailCostCategory | null> {
  console.log('üöÄ [upsertDetailCostCategory] called with:', { categoryId, name, unit });
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ
    const { data: existing, error: selectError } = await supabase
      .from('detail_cost_categories')
      .select('*')
      .eq('category_id', categoryId)
      .eq('name', name)
      .single();

    if (existing) {
      console.log('‚úÖ [upsertDetailCostCategory] found existing:', existing.id);
      return existing;
    }

    // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –Ω–µ "PGRST116" (not found), —Ç–æ —ç—Ç–æ —Ä–µ–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞
    if (selectError && selectError.code !== 'PGRST116') {
      console.error('‚ùå [upsertDetailCostCategory] select failed:', selectError);
      throw selectError;
    }

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –¥–µ—Ç–∞–ª—å–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    const code = `DETAIL-${Date.now()}`;
    const { data, error } = await supabase
      .from('detail_cost_categories')
      .insert({
        category_id: categoryId,
        code,
        name,
        unit,
        base_price: 0
      })
      .select()
      .single();

    if (error) {
      console.error('‚ùå [upsertDetailCostCategory] insert failed:', error);
      throw error;
    }

    if (!data) {
      console.error('‚ùå [upsertDetailCostCategory] no data returned after insert');
      throw new Error('Failed to create detail category: no data returned');
    }

    console.log('‚úÖ [upsertDetailCostCategory] created:', data.id);
    return data;
  } catch (error) {
    console.error('‚ùå [upsertDetailCostCategory] unexpected error:', error);
    throw error;
  }
}

// –°–æ–∑–¥–∞–Ω–∏–µ –∏–ª–∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–∏
async function upsertLocation(name: string): Promise<Location | null> {
  console.log('üöÄ [upsertLocation] called with:', { name });
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ
    const { data: existing, error: selectError } = await supabase
      .from('location')
      .select('*')
      .eq('name', name)
      .single();

    if (existing) {
      console.log('‚úÖ [upsertLocation] found existing:', existing.id);
      return existing;
    }

    // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –Ω–µ "PGRST116" (not found), —Ç–æ —ç—Ç–æ —Ä–µ–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞
    if (selectError && selectError.code !== 'PGRST116') {
      console.error('‚ùå [upsertLocation] select failed:', selectError);
      throw selectError;
    }

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –ª–æ–∫–∞—Ü–∏—é
    const code = `LOC-${Date.now()}`;
    const { data, error } = await supabase
      .from('location')
      .insert({
        code,
        name,
        parent_id: null,
        level: 0
      })
      .select()
      .single();

    if (error) {
      console.error('‚ùå [upsertLocation] insert failed:', error);
      throw error;
    }

    if (!data) {
      console.error('‚ùå [upsertLocation] no data returned after insert');
      throw new Error('Failed to create location: no data returned');
    }

    console.log('‚úÖ [upsertLocation] created:', data.id);
    return data;
  } catch (error) {
    console.error('‚ùå [upsertLocation] unexpected error:', error);
    throw error;
  }
}

// –°–æ–∑–¥–∞–Ω–∏–µ —Å–≤—è–∑–∏ –º–µ–∂–¥—É –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π –∏ –ª–æ–∫–∞—Ü–∏–µ–π
async function createCategoryLocationMapping(
  detailCategoryId: string,
  locationId: string
) {
  console.log('üöÄ [createCategoryLocationMapping] called with:', { detailCategoryId, locationId });
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å–≤—è–∑–∏
  const { data: existing } = await supabase
    .from('category_location_mapping')
    .select('*')
    .eq('detail_category_id', detailCategoryId)
    .eq('location_id', locationId)
    .single();

  if (existing) {
    console.log('‚úÖ [createCategoryLocationMapping] mapping already exists:', existing.id);
    return existing;
  }

  // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–≤—è–∑—å
  const { data, error } = await supabase
    .from('category_location_mapping')
    .insert({
      detail_category_id: detailCategoryId,
      location_id: locationId,
      quantity: 0,
      unit_price: 0,
      is_active: true
    })
    .select()
    .single();

  if (error) {
    console.error('‚ùå [createCategoryLocationMapping] failed:', error);
    throw error;
  }

  console.log('‚úÖ [createCategoryLocationMapping] created:', data.id);
  return data;
}

// –ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∏–∑ Excel
export async function importCostCategories(data: CostCategoryImportData[]) {
  console.log('üöÄ [importCostCategories] called with:', data.length, 'rows');
  
  const results = {
    success: 0,
    failed: 0,
    errors: [] as string[]
  };

  // –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ sortOrder –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Ä—è–¥–∫–∞
  const sortedData = [...data].sort((a, b) => a.sortOrder - b.sortOrder);

  for (const [index, row] of sortedData.entries()) {
    try {
      console.log('üîÑ Processing row:', row);
      
      // 1. –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å —É—á–µ—Ç–æ–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
      const category = await upsertCostCategoryWithOrder(
        row.categoryName, 
        row.categoryUnit,
        row.sortOrder || index
      );
      
      if (!category) {
        throw new Error(`Failed to create or find category: ${row.categoryName}`);
      }
      
      // 2. –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
      const detailCategory = await upsertDetailCostCategoryWithOrder(
        category.id,
        row.detailCategoryName,
        row.detailCategoryUnit,
        row.sortOrder || index
      );
      
      if (!detailCategory) {
        throw new Error(`Failed to create or find detail category: ${row.detailCategoryName}`);
      }
      
      // 3. –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞—Ü–∏—é
      const location = await upsertLocationWithOrder(
        row.locationName,
        row.sortOrder || index
      );
      
      if (!location) {
        throw new Error(`Failed to create or find location: ${row.locationName}`);
      }
      
      // 4. –°–æ–∑–¥–∞–µ–º —Å–≤—è–∑—å –º–µ–∂–¥—É –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π –∏ –ª–æ–∫–∞—Ü–∏–µ–π
      await createCategoryLocationMapping(detailCategory.id, location.id);
      
      results.success++;
      console.log('‚úÖ Row processed successfully');
    } catch (error) {
      console.error('‚ùå Failed to process row:', error);
      results.failed++;
      const errorMessage = error instanceof Error ? error.message : String(error);
      results.errors.push(`–û—à–∏–±–∫–∞ –¥–ª—è —Å—Ç—Ä–æ–∫–∏ "${row.categoryName}": ${errorMessage}`);
    }
  }

  console.log('‚úÖ [importCostCategories] completed:', results);
  return results;
}

// –°–æ–∑–¥–∞–Ω–∏–µ –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π
async function upsertCostCategoryWithOrder(name: string, unit?: string, sortOrder: number = 0): Promise<CostCategory | null> {
  console.log('üöÄ [upsertCostCategoryWithOrder] called with:', { name, unit, sortOrder });
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ
    const { data: existing, error: selectError } = await supabase
      .from('cost_categories')
      .select('*')
      .eq('name', name)
      .single();

    if (existing) {
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å –Ω–æ–≤—ã–º –ø–æ—Ä—è–¥–∫–æ–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
      const { data, error } = await supabase
        .from('cost_categories')
        .update({
          description: unit ? `–ï–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è: ${unit}` : existing.description,
          updated_at: new Date().toISOString()
        })
        .eq('id', existing.id)
        .select()
        .single();
      
      if (error) {
        console.error('‚ùå [upsertCostCategoryWithOrder] update failed:', error);
        throw error;
      }
      
      console.log('‚úÖ [upsertCostCategoryWithOrder] updated existing:', data?.id);
      return data;
    }

    // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –Ω–µ "PGRST116" (not found), —Ç–æ —ç—Ç–æ —Ä–µ–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞
    if (selectError && selectError.code !== 'PGRST116') {
      console.error('‚ùå [upsertCostCategoryWithOrder] select failed:', selectError);
      throw selectError;
    }

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    const code = `CAT-${Date.now()}`;
    const { data, error } = await supabase
      .from('cost_categories')
      .insert({
        code,
        name,
        description: unit ? `–ï–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è: ${unit}` : undefined,
        is_active: true
      })
      .select()
      .single();

    if (error) {
      console.error('‚ùå [upsertCostCategoryWithOrder] insert failed:', error);
      throw error;
    }

    if (!data) {
      console.error('‚ùå [upsertCostCategoryWithOrder] no data returned after insert');
      throw new Error('Failed to create category: no data returned');
    }

    console.log('‚úÖ [upsertCostCategoryWithOrder] created:', data.id);
    return data;
  } catch (error) {
    console.error('‚ùå [upsertCostCategoryWithOrder] unexpected error:', error);
    throw error;
  }
}

// –°–æ–∑–¥–∞–Ω–∏–µ –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π
async function upsertDetailCostCategoryWithOrder(
  categoryId: string,
  name: string,
  unit: string,
  sortOrder: number = 0
): Promise<DetailCostCategory | null> {
  console.log('üöÄ [upsertDetailCostCategoryWithOrder] called with:', { categoryId, name, unit, sortOrder });
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ
    const { data: existing, error: selectError } = await supabase
      .from('detail_cost_categories')
      .select('*')
      .eq('category_id', categoryId)
      .eq('name', name)
      .single();

    if (existing) {
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –¥–µ—Ç–∞–ª—å–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
      const { data, error } = await supabase
        .from('detail_cost_categories')
        .update({
          unit,
          updated_at: new Date().toISOString()
        })
        .eq('id', existing.id)
        .select()
        .single();
      
      if (error) {
        console.error('‚ùå [upsertDetailCostCategoryWithOrder] update failed:', error);
        throw error;
      }
      
      console.log('‚úÖ [upsertDetailCostCategoryWithOrder] updated existing:', data?.id);
      return data;
    }

    // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –Ω–µ "PGRST116" (not found), —Ç–æ —ç—Ç–æ —Ä–µ–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞
    if (selectError && selectError.code !== 'PGRST116') {
      console.error('‚ùå [upsertDetailCostCategoryWithOrder] select failed:', selectError);
      throw selectError;
    }

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –¥–µ—Ç–∞–ª—å–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    const code = `DETAIL-${Date.now()}`;
    const { data, error } = await supabase
      .from('detail_cost_categories')
      .insert({
        category_id: categoryId,
        code,
        name,
        unit,
        base_price: 0,
        is_active: true
      })
      .select()
      .single();

    if (error) {
      console.error('‚ùå [upsertDetailCostCategoryWithOrder] insert failed:', error);
      throw error;
    }

    if (!data) {
      console.error('‚ùå [upsertDetailCostCategoryWithOrder] no data returned after insert');
      throw new Error('Failed to create detail category: no data returned');
    }

    console.log('‚úÖ [upsertDetailCostCategoryWithOrder] created:', data.id);
    return data;
  } catch (error) {
    console.error('‚ùå [upsertDetailCostCategoryWithOrder] unexpected error:', error);
    throw error;
  }
}

// –°–æ–∑–¥–∞–Ω–∏–µ –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–∏ —Å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π
async function upsertLocationWithOrder(name: string, sortOrder: number = 0): Promise<Location | null> {
  console.log('üöÄ [upsertLocationWithOrder] called with:', { name, sortOrder });
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ
    const { data: existing, error: selectError } = await supabase
      .from('location')
      .select('*')
      .eq('name', name)
      .single();

    if (existing) {
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ª–æ–∫–∞—Ü–∏—é
      const { data, error } = await supabase
        .from('location')
        .update({
          updated_at: new Date().toISOString()
        })
        .eq('id', existing.id)
        .select()
        .single();
      
      if (error) {
        console.error('‚ùå [upsertLocationWithOrder] update failed:', error);
        throw error;
      }
      
      console.log('‚úÖ [upsertLocationWithOrder] updated existing:', data?.id);
      return data;
    }

    // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –Ω–µ "PGRST116" (not found), —Ç–æ —ç—Ç–æ —Ä–µ–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞
    if (selectError && selectError.code !== 'PGRST116') {
      console.error('‚ùå [upsertLocationWithOrder] select failed:', selectError);
      throw selectError;
    }

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –ª–æ–∫–∞—Ü–∏—é
    const code = `LOC-${Date.now()}`;
    const { data, error } = await supabase
      .from('location')
      .insert({
        code,
        name,
        parent_id: null,
        level: 0,
        is_active: true
      })
      .select()
      .single();

    if (error) {
      console.error('‚ùå [upsertLocationWithOrder] insert failed:', error);
      throw error;
    }

    if (!data) {
      console.error('‚ùå [upsertLocationWithOrder] no data returned after insert');
      throw new Error('Failed to create location: no data returned');
    }

    console.log('‚úÖ [upsertLocationWithOrder] created:', data.id);
    return data;
  } catch (error) {
    console.error('‚ùå [upsertLocationWithOrder] unexpected error:', error);
    throw error;
  }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
export async function exportCostCategories() {
  console.log('üöÄ [exportCostCategories] called');
  
  // –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å sort_order
  const { data: categoriesData, error: catError } = await supabase
    .from('cost_categories')
    .select('*')
;

  if (catError) {
    console.error('‚ùå [exportCostCategories] categories failed:', catError);
    throw catError;
  }

  // –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  const { data: detailsData, error: detError } = await supabase
    .from('detail_cost_categories')
    .select('*')
;

  if (detError) {
    console.error('‚ùå [exportCostCategories] details failed:', detError);
    throw detError;
  }

  // –ü–æ–ª—É—á–∞–µ–º –ª–æ–∫–∞—Ü–∏–∏
  const { data: locationsData, error: locError } = await supabase
    .from('location')
    .select('*')
;

  if (locError) {
    console.error('‚ùå [exportCostCategories] locations failed:', locError);
    throw locError;
  }

  // –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ —Å –Ω—É–º–µ—Ä–∞—Ü–∏–µ–π
  const exportData: CostCategoryImportData[] = [];
  let sortOrder = 1;

  for (const category of categoriesData || []) {
    const categoryDetails = detailsData?.filter(d => d.category_id === category.id) || [];
    
    for (const detail of categoryDetails) {
      // –î–ª—è –∫–∞–∂–¥–æ–π –¥–µ—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –ª–æ–∫–∞—Ü–∏–∏
      for (const location of locationsData || []) {
        exportData.push({
          sortOrder: sortOrder++,
          categoryName: category.name,
          categoryUnit: category.description?.replace('–ï–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è: ', '') || '',
          detailCategoryName: detail.name,
          detailCategoryUnit: detail.unit,
          locationName: location.name
        });
      }
    }
  }

  console.log('‚úÖ [exportCostCategories] completed:', exportData.length, 'records');
  return exportData;
}

// –£–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
export async function deleteCostCategory(id: string) {
  console.log('üöÄ [deleteCostCategory] called with:', id);
  
  const { error } = await supabase
    .from('cost_categories')
    .delete()
    .eq('id', id);

  if (error) {
    console.error('‚ùå [deleteCostCategory] failed:', error);
    throw error;
  }

  console.log('‚úÖ [deleteCostCategory] completed');
}

// –£–¥–∞–ª–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
export async function deleteDetailCostCategory(id: string) {
  console.log('üöÄ [deleteDetailCostCategory] called with:', id);
  
  const { error } = await supabase
    .from('detail_cost_categories')
    .delete()
    .eq('id', id);

  if (error) {
    console.error('‚ùå [deleteDetailCostCategory] failed:', error);
    throw error;
  }

  console.log('‚úÖ [deleteDetailCostCategory] completed');
}

// –£–¥–∞–ª–µ–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–∏
export async function deleteLocation(id: string) {
  console.log('üöÄ [deleteLocation] called with:', id);
  
  const { error } = await supabase
    .from('location')
    .delete()
    .eq('id', id);

  if (error) {
    console.error('‚ùå [deleteLocation] failed:', error);
    throw error;
  }

  console.log('‚úÖ [deleteLocation] completed');
}